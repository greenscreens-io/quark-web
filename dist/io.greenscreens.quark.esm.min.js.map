{"version":3,"file":"io.greenscreens.quark.esm.min.js","sources":["../modules/core/Error.mjs","../modules/core/Buffer.mjs","../modules/core/Event.mjs","../modules/core/Streams.mjs","../modules/core/Security.mjs","../modules/core/Queue.mjs","../modules/core/Request.mjs","../modules/core/Generator.mjs","../modules/core/SocketChannel.mjs","../modules/core/WebChannel.mjs","../modules/core/QuarkEngine.mjs"],"sourcesContent":["/*\r\n * Copyright (C) 2015, 2024 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Custom Error to handle reponse structure\r\n */\r\nexport default class QuarkError extends Error {\r\n    constructor(data) {\r\n       super(data.message || data.msg || data.error || data);\r\n       this.data = data;\r\n    }\r\n}","/*\r\n * Copyright (C) 2015, 2023 Green Screens Ltd.\r\n */\r\n\r\nexport default class QuarkBuffer {\r\n\r\n\tstatic #encoder = new TextEncoder();\r\n\tstatic #decoder = new TextDecoder();\r\n\r\n\t/**\r\n\t * Detect data and convert to Uint8Array\r\n\t * \r\n\t * @param {variant}\r\n\t * @returns {variant}\r\n\t */\r\n\tstatic validateData(src) {\r\n\t\tlet data = null;\r\n\t\tif (src instanceof Array) {\r\n\t\t\tdata = new Uint8Array(src);\r\n\t\t} else if (src instanceof ArrayBuffer) {\r\n\t\t\tdata = new Uint8Array(src);\r\n\t\t} else if (src instanceof Uint8Array) {\r\n\t\t\tdata = src;\r\n\t\t} else if (src instanceof String || typeof src === 'string') {\r\n\t\t\tdata = QuarkBuffer.fromText(src);\r\n\t\t} else if (src.toArrayBuffer) {\r\n\t\t\tdata = new Uint8Array(src.toArrayBuffer());\r\n\t\t} else {\r\n\t\t\tthrow \"Invalid input, must be String or ArrayBuffer or Uint8Array\";\r\n\t\t}\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * Verify if data is string\r\n\t * @param {*} data \r\n\t * @returns \r\n\t */\r\n\tstatic isString(data) {\r\n\t\treturn typeof data === 'string';\r\n\t}\r\n\r\n\t/**\r\n\t * Check if string is hex string\r\n\t * @param {*} data \r\n\t * @returns \r\n\t */\r\n\tstatic isHexString(data) {\r\n\t\treturn QuarkBuffer.isString(data) ? (/^[0-9A-Fa-f]+$/g).test(data) : false;\r\n\t}\r\n\r\n\tstatic toBuffer(data, b64 = false) {\r\n\t\tconst me = QuarkBuffer;\r\n\t\tif (me.isString(data)) {\r\n\t\t\tif (b64) {\r\n\t\t\t\tdata = me.fromBase64(data);\r\n\t\t\t} else if (me.isHexString(data)) {\r\n\t\t\t\tdata = me.fromHex(data);\r\n\t\t\t} else {\r\n\t\t\t\tdata = me.fromText(data);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn me.validateData(data);\r\n\t}\r\n\r\n\tstatic toText(val) {\r\n\t\treturn QuarkBuffer.isText(val) ? val : QuarkBuffer.#decoder.decode(val);\r\n\t}\r\n\r\n\tstatic fromText(val) {\r\n\t\treturn QuarkBuffer.isText(val) ? QuarkBuffer.#encoder.encode(val) : val;\r\n\t}\r\n\r\n\tstatic isText(val) {\r\n\t\treturn typeof val === 'string';\r\n\t}\r\n\r\n\tstatic fromHex(value) {\r\n\r\n\t\tconst arry = [];\r\n\r\n\t\tfor (let i = 0; i < value.length; i += 2) {\r\n\t\t\tarry.push(parseInt(\"0x\" + value.substr(i, 2), 16));\r\n\t\t}\r\n\r\n\t\treturn new Uint8Array(arry);\r\n\t}\r\n\r\n\tstatic toHex(buffer) {\r\n\t\treturn Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('');\r\n\t}\r\n\r\n\tstatic fromBase64(value) {\r\n\r\n\t\tconst strbin = atob(value);\r\n\t\tconst buffer = new ArrayBuffer(strbin.length);\r\n\t\tconst bufView = new Uint8Array(buffer);\r\n\r\n\t\tfor (let i = 0, strLen = strbin.length; i < strLen; i++) {\r\n\t\t\tbufView[i] = strbin.charCodeAt(i);\r\n\t\t}\r\n\r\n\t\treturn bufView;\r\n\t}\r\n\r\n\tstatic toBase64(buffer) {\r\n\t\tbuffer = QuarkBuffer.toBuffer(buffer);\r\n\t\treturn btoa(buffer.reduce((data, val) => {\r\n\t\t\treturn data + String.fromCharCode(val);\r\n\t\t}, ''));\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * A module loading Event class\r\n * @module Events\r\n */\r\n\r\n/**\r\n * Extends native event by adding helper functions\r\n */\r\nexport default class QuarkEvent extends EventTarget {\r\n\r\n    #listeners = new Set();\r\n\r\n    #list(type = '', listener) {\r\n        const me = this;\r\n        const list = Array.from(me.#listeners);\r\n        return QuarkEvent.#isFunction(listener) ?\r\n            list.filter(o => o.type === type && o.listener === listener)\r\n            :\r\n            list.filter(o => o.type === type);\r\n    }\r\n\r\n    addEventListener(type, listener, opt) {\r\n        const me = this;\r\n        if (!QuarkEvent.#isFunction(listener)) return false;\r\n        me.#listeners.add({ type: type, listener: listener });\r\n        return super.addEventListener(type, listener, opt);\r\n    }\r\n\r\n    removeEventListener(type, listener) {\r\n        const me = this;\r\n        const list = me.#list(type, listener);\r\n        list.forEach(o => super.removeEventListener(o.type, o.listener))\r\n        list.forEach(o => me.#listeners.delete(o));\r\n    }\r\n\r\n    /**\r\n     * Remove all listeners\r\n     */\r\n    unbind() {\r\n        const me = this;\r\n        Array.from(me.#listeners).forEach(o => {\r\n            super.removeEventListener(o.type, o.listener);\r\n        });\r\n        me.#listeners.clear();\r\n    }\r\n\r\n    /**\r\n     * Listen for events\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    on(type = '', listener) {\r\n        return this.addEventListener(type, listener);\r\n    }\r\n\r\n    /**\r\n     * Listen for events only once\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    once(type, listener) {\r\n        const me = this;\r\n        let wrap = (e) => {\r\n            listener(e);\r\n            wrap = null;\r\n        }\r\n        wrap.type = type;\r\n        wrap.listener = listener;\r\n        return me.addEventListener(type, wrap, { once: true });\r\n    }\r\n\r\n    /**\r\n     * Stop listening for events\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    off(type = '', listener) {\r\n        return this.removeEventListener(type, listener);\r\n    }\r\n\r\n    /**\r\n     * Send event to listeners\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {object} data  Data to send \r\n     */\r\n    emit(type, data) {\r\n        if (!type) return false;\r\n        const evt = new CustomEvent(type, { detail: data });\r\n        return this.dispatchEvent(evt);\r\n    }\r\n\r\n    send(type, data) { this.emit(type, data); }\r\n    listen(type, listener) { this.on(type, listener); }\r\n    unlisten(type, listener) { this.off(type, listener); }\r\n\r\n    /**\r\n     * Wait for an event \r\n     * @param {string} type Event name to be listened\r\n     * @returns {Event}\r\n     */\r\n    wait(type = '') {\r\n        if (!type) return e('Event undefined!');\r\n        const me = this;\r\n        return new Promise((r, e) => {\r\n            me.once(type, (e) => r(e));\r\n        });\r\n    }\r\n\r\n    static #isFunction(fn) {\r\n        return typeof fn === 'function';\r\n    }\r\n\r\n    /**\r\n     * Generic prevent event bubling\r\n     * \r\n     * @param {Event} e \r\n     */\r\n    static prevent(e) {\r\n        if (QuarkEvent.#isFunction(e, 'preventDefault')) e.preventDefault();\r\n        if (QuarkEvent.#isFunction(e, 'stopPropagation')) e.stopPropagation();\r\n    }\r\n\r\n    static {\r\n        Object.freeze(QuarkEvent);\r\n    }\r\n\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport QuarkBuffer from './Buffer.mjs';\r\n\r\n/**\r\n * Browser native compression\r\n */\r\nexport default class QuarkStreams {\r\n\r\n\tstatic get isAvailable() {\r\n\t\treturn typeof CompressionStream !== 'undefined' &&\r\n\t\t\ttypeof DecompressionStream !== 'undefined';\r\n\t}\r\n\r\n\t/**\r\n\t * Stream header GS[version(5)][type(0|1|2|3)][len]\r\n\t * type: 0 - utf8 binary string, 1 - compressed, 2 - encrypted, 3 - 1 & 2\r\n\t * new Uint8Array([71, 83, 5, type, 0, 0, 0, 0]);\r\n\t * @param {Uint8Array} data\r\n\t * @returns {Uint8Array}\r\n\t */\r\n\tstatic #toGS(raw, encrypted = false, compressed = false) {\r\n\t\tif (!raw instanceof Uint8Array) return raw;\r\n\t\tconst type = QuarkStreams.#dataType(encrypted, compressed);\r\n\r\n\t\tconst data = new Uint8Array(8 + raw.length);\r\n\t\tconst dv = new DataView(data.buffer);\r\n\t\tdv.setUint8(0, 71);\r\n\t\tdv.setUint8(1, 83);\r\n\t\tdv.setUint8(2, 5);\r\n\t\tdv.setUint8(3, type);\r\n\t\tdv.setUint32(4, raw.length);\r\n\t\tdata.set(raw, 8);\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * Encode binary message to GS binary format\r\n\t * @param {*} raw \r\n\t * @param {*} security \r\n\t */\r\n\tstatic async wrap(raw, security) {\r\n\t\traw = QuarkStreams.toBinary(raw);\r\n\t\traw = await QuarkStreams.compressOrDefault(raw);\r\n\t\traw = await security.encrypt(raw);\r\n\t\traw = QuarkStreams.#toGS(raw, security.isValid, QuarkStreams.isAvailable);\r\n\t\t/*\r\n\t\tif (globalThis.QUARK_DEBUG) {\r\n\t\t\tconsole.log('DEBUG: Output :', QuarkBuffer.toHex(raw));\r\n\t\t}\r\n\t\t*/\r\n\t\treturn raw;\r\n\t}\r\n\r\n\t/**\r\n\t * Decode binary message from GS binary format\r\n\t * @param {*} raw \r\n\t * @param {*} security \r\n\t */\r\n\tstatic async unwrap(raw, security, challenge) {\r\n\r\n\t\tif (raw instanceof Uint8Array) raw = raw.buffer;\r\n\r\n\t\t/*\r\n\t\tif (globalThis.QUARK_DEBUG) {\r\n\t\t\tconsole.log('DEBUG: Input :', QuarkBuffer.toHex(raw));\r\n\t\t}\r\n\t\t*/\r\n\t\tconst dv = new DataView(raw);\r\n\t\tconst isGS = QuarkStreams.#isGS(dv);\r\n\r\n\t\traw = Streams.toBinary(raw);\r\n\t\tif (!isGS) return raw;\r\n\r\n\t\tconst type = dv.getUint8(3);\r\n\t\tconst len = dv.getUint32(4);\r\n\r\n\t\tif (dv.byteLength !== len + 8) return raw;\r\n\r\n\t\traw = raw.slice(8);\r\n\r\n\t\tconst isCompress = QuarkStreams.isCompressFlag(type);\r\n\t\tconst isEncrypt = QuarkStreams.isEncryptFlag(type);\r\n\t\tconst isApi = QuarkStreams.isApiFlag(type);\r\n\r\n\t\tlet api = null;\r\n\t\tif (isApi) {\r\n\t\t\tconst encLen = dv.getUint32(8);\r\n\t\t\tconst verLen = dv.getUint32(8 + 4 + encLen);\r\n\t\t\tconst sgnLen = dv.getUint32(8 + 4 + encLen + 4 + verLen);\r\n\r\n\t\t\tapi = {\r\n\t\t\t\tchallenge: challenge,\r\n\t\t\t\tkeyEnc: (raw.slice(4, 4 + encLen)),\r\n\t\t\t\tkeyVer: (raw.slice(4 + encLen + 4, 4 + encLen + 4 + verLen)),\r\n\t\t\t\tsignature: (raw.slice(4 + encLen + 4 + verLen + 4, 4 + encLen + 4 + verLen + 4 + sgnLen))\r\n\t\t\t};\r\n\r\n\t\t\tawait security.init(api);\r\n\t\t\traw = raw.slice((4 * 3) + encLen + verLen + sgnLen);\r\n\t\t}\r\n\r\n\r\n\t\tif (isEncrypt) {\r\n\t\t\traw = await security?.decrypt(raw);\r\n\t\t}\r\n\r\n\t\tif (isCompress) {\r\n\t\t\traw = await QuarkStreams.decompress(raw).arrayBuffer();\r\n\t\t}\r\n\r\n\t\traw = QuarkStreams.toBinary(raw);\r\n\t\tif (!QuarkStreams.isJson(raw)) throw new Error('Invalid response');\r\n\r\n\t\treturn JSON.parse(QuarkBuffer.toText(raw));\r\n\t}\r\n\r\n\t/**\r\n\t * Check if DataView id GS data format\r\n\t * @param {*} dv \r\n\t * @returns \r\n\t */\r\n\tstatic #isGS(dv) {\r\n\t\treturn dv.byteLength > 8 && dv.getUint16(0) === 18259 && dv.getUint8(2) === 5;\r\n\t}\r\n\r\n\tstatic isCompressFlag(type) {\r\n\t\treturn (type & 1) === 1;\r\n\t}\r\n\r\n\tstatic isEncryptFlag(type) {\r\n\t\treturn (type & 2) === 2;\r\n\t}\r\n\r\n\tstatic isApiFlag(type) {\r\n\t\treturn (type & 4) === 4;\r\n\t}\r\n\r\n\tstatic #dataType(isEncrypt, isCompress) {\r\n\t\tconst type = isCompress ? 1 : 0;\r\n\t\treturn type | (isEncrypt ? 2 : 0);\r\n\t}\r\n\r\n\tstatic #stream(data, stream) {\r\n\t\tconst me = this;\r\n\t\tconst byteArray = me.toBinary(data);\r\n\t\tconst writer = stream.writable.getWriter();\r\n\t\twriter.write(byteArray);\r\n\t\twriter.close();\r\n\t\treturn new Response(stream.readable);\r\n\t}\r\n\r\n\t/**\r\n\t * If compression available, compress, \r\n\t * else return original value\r\n\t * @param {*} data \r\n\t * @param {*} encoding \r\n\t */\r\n\tstatic async compressOrDefault(data, encoding = 'gzip') {\r\n\t\tif (!QuarkStreams.isAvailable) return data;\r\n\t\tconst raw = await QuarkStreams.compress(data, encoding).arrayBuffer();\r\n\t\treturn Streams.toBinary(raw);\r\n\t}\r\n\r\n\t/**\r\n\t * If decompression available, decompress, \r\n\t * else return original value\r\n\t * @param {*} data \r\n\t * @param {*} encoding \r\n\t */\r\n\tstatic async decompressOrDefault(data, encoding = 'gzip') {\r\n\t\tif (!QuarkStreams.isAvailable) return data;\r\n\t\tconst raw = await QuarkStreams.decompress(data, encoding).arrayBuffer();\r\n\t\treturn QuarkStreams.toBinary(raw);\r\n\t}\r\n\r\n\t/**\r\n\t * Compress to gzip format\r\n\t * @param {*} data \r\n\t * @param {*} encoding gzip | deflate (zlib)\r\n\t * @returns {Response} \r\n\t */\r\n\tstatic compress(data, encoding = 'gzip') {\r\n\t\tconst stream = new CompressionStream(encoding);\r\n\t\treturn this.#stream(data, stream);\r\n\t}\r\n\r\n\t/**\r\n\t * Decompress from gzip format\r\n\t * @param {*} data \r\n\t * @param {*} encoding gzip | deflate (zlib)\r\n\t * @returns {Response} \r\n\t */\r\n\tstatic decompress(data, encoding = 'gzip') {\r\n\t\tconst stream = new DecompressionStream(encoding);\r\n\t\treturn this.#stream(data, stream);\r\n\t}\r\n\r\n\tstatic toBinary(data) {\r\n\t\tif (data instanceof Uint8Array) return data;\r\n\t\tif (data instanceof ArrayBuffer) return new Uint8Array(data);\r\n\t\tif (typeof data === 'string') return QuarkBuffer.fromText(data);\r\n\t\treturn this.toBinary(JSON.stringify(data));\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 2 bytes mathes gzip/deflate header signature\r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\r\n\tstatic isCompressed(data) {\r\n\t\tconst me = this;\r\n\t\tdata = me.toBinary(data);\r\n\t\treturn me.isGzip(data); // || me.isZlib(data);\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 3 bytes matches gzip header signature\r\n\t * \r\n\t * zlib\r\n\t * 1F 8B 08\r\n\t * 31 139 8\r\n\t * \r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\r\n\tstatic isGzip(data) {\r\n\t\treturn data.at(0) === 31 && data.at(1) === 139 && data.at(2) === 8;\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 2 bytes matches deflate (zlib) header signature\r\n\t * \r\n\t * deflate\r\n\t * 78  (01, 5e,9c, da) \r\n\t * 120 (1, 94, 156, 218)\r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\r\n\tstatic isZlib(data) {\r\n\t\treturn data.at(0) === 120 && [1, 94, 156, 218].indexOf(data.at(1)) > -1;\r\n\t}\r\n\r\n\tstatic isJson(data) {\r\n\t\tconst me = this;\r\n\t\tdata = typeof data === 'string' ? data.trim() : me.toBinary(data);\r\n\t\tconst first = data.at(0);\r\n\t\tconst last = data.at(data.length - 1);\r\n\t\treturn me.#isJsonArray(first, last) || me.#isJsonObj(first, last);\r\n\t}\r\n\r\n\tstatic #isJsonObj(first, last) {\r\n\t\treturn (first === '{' || first === 123) && (last === '}' || last === 125);\r\n\t}\r\n\r\n\tstatic #isJsonArray(first, last) {\r\n\t\treturn (first === '[' || first === 91) && (last === ']' || last === 93);\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2023 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Security engine using Web Crypto API to encrypt / decrypt\r\n * messages between browser and server.\r\n *\r\n */\r\n\r\nimport QuarkBuffer from \"./Buffer.mjs\";\r\n\r\nexport default class QuarkSecurity {\r\n\r\n    static #ECDH_TYPE = { name: 'ECDH', namedCurve: \"P-256\" };\r\n    static #ECDSA_TYPE = { name: 'ECDSA', namedCurve: \"P-384\" };\r\n    static #VERIFY = { name: 'ECDSA', hash: \"SHA-384\" };\r\n    static #AES_TYPE = { name: \"AES-CTR\", length: 256 };\r\n    static #COOKIE_KEY = 'gs-public-key';\r\n\r\n    #publicKey = null;\r\n    #keyPair = null;\r\n    #aesKey = null;\r\n\r\n    /**\r\n     * Create random bytes\r\n     *\r\n     * @param {int} size\r\n     *     length of data (required)\r\n     */\r\n    static getRandom(size) {\r\n        const array = new Uint8Array(size);\r\n        crypto.getRandomValues(array);\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * Initialize browser ECDH key pair \r\n     */\r\n    static initKeyPair() {\r\n        const use = ['deriveKey', 'deriveBits'];\r\n        return crypto.subtle.generateKey(Security.#ECDH_TYPE, true, use);\r\n    }\r\n\r\n    /**\r\n     * Import Async key received from server\r\n     * Key is publicKey used to send encrypted AES key\r\n     *\r\n     * @param {String} key PEM encoded key\r\n     * @param {Object} type Crypto API key definition format\r\n     * @param {String} mode Comma separted list of key usages \r\n     */\r\n    static async importKey(key, type, mode) {\r\n        const der = QuarkBuffer.toBuffer(key, true);\r\n        const use = mode ? mode.split(',') : [];\r\n        return crypto.subtle.importKey('spki', der, type, true, use);\r\n    }\r\n\r\n    /**\r\n     * Export key in hex form\r\n     * @param {CryptoKey} key\r\n     * @returns {string}\r\n     */\r\n    static async exportKey(key) {\r\n        const ab = await crypto.subtle.exportKey('raw', key);\r\n        return QuarkBuffer.toHex(ab);\r\n    }\r\n\r\n    /**\r\n     * Verify signature\r\n     *\r\n     * @param {CryptoKey} Public key used for verification\r\n     * @param {ArrayBuffer} signature Signature of received data\r\n     * @param {ArrayBuffer} challenge Challenge to verify with signature (ts + pemENCDEC + pemVERSGN)\r\n     */\r\n    static async verify(key, signature, challenge) {\r\n        signature = QuarkBuffer.toBuffer(signature, true);\r\n        challenge = QuarkBuffer.toBuffer(challenge);\r\n        const type = QuarkSecurity.#VERIFY;\r\n        return crypto.subtle.verify(type, key, signature, challenge);\r\n    }\r\n\r\n    /**\r\n     * Sign data with HMAC\r\n     * @param {CryptoKey} Private key used for verification\r\n     * @param {ArrayBuffer} data Data to sign\r\n     */\r\n    static async sign(key, data) {\r\n        data = QuarkBuffer.toBuffer(data);\r\n        return crypto.subtle.sign('ECDSA', key, data);\r\n    }\r\n\r\n    get publicKey() { return this.#publicKey; }\r\n\r\n    setCookie(name, value) {\r\n\t\tconst cookie = this.isSecure ? '; SameSite=None; Secure' : '; SameSite=Lax';\r\n\t\tdocument.cookie = `${name}=${value}${cookie}`;\t\t\r\n\t}\r\n\t\r\n    cookie(path = \"/\") {\r\n        return `${QuarkSecurity.#COOKIE_KEY}=${this.cookieValue(path)}`;\r\n    }\r\n\r\n    cookieValue(path = \"/\") {\r\n        return `${this.#publicKey||''};path=${path}`;\r\n    }\r\n    \r\n    updateCookie(path = \"/\") {\r\n\t\tthis.setCookie(QuarkSecurity.#COOKIE_KEY, this.cookieValue(path));\r\n    }\r\n\r\n    /**\r\n     *  Use local challenge, to verify received data signature\r\n     *\r\n     *  @param {Object} cfg Data received from server contins public key and signature\r\n     */\r\n    #getChallenge(cfg) {\r\n        const me = this;\r\n        return [cfg.challenge || '', me.#toChallenge(cfg.keyEnc) || '', me.#toChallenge(cfg.keyVer) || ''].join('');\r\n    }\r\n\r\n    #toChallenge(val) {\r\n        return QuarkBuffer.isText(val) ? val : QuarkBuffer.toBase64(val);\r\n    }\r\n\r\n    async #initVerify(cfg) {\r\n        const me = this;\r\n        const type = QuarkSecurity.#ECDSA_TYPE;\r\n        const verKey = await QuarkSecurity.importKey(cfg.keyVer, type, 'verify');\r\n        const status = await QuarkSecurity.verify(verKey, cfg.signature, me.#getChallenge(cfg));\r\n        if (!status) throw new Error('Signature invalid');\r\n    }\r\n\r\n    /**\r\n     * Initialize server public key\r\n     * @param {object} cfg \r\n     */\r\n    #initPublic(cfg) {\r\n        return QuarkSecurity.importKey(cfg.keyEnc, QuarkSecurity.#ECDH_TYPE, '');\r\n    }\r\n\r\n    /**\r\n     * Derive shared secret from server public ECDH and browser keypair.private ECDH\r\n     * @returns {CryptoKey}\r\n     */\r\n    #deriveAES(priv, pub) {\r\n        const pubDef = { name: \"ECDH\", public: pub };\r\n        const use = ['encrypt', 'decrypt'];\r\n        const derivedKey = QuarkSecurity.#AES_TYPE;\r\n        const dbg = false; // globalThis.QUARK_DEBUG === true;\r\n        return crypto.subtle.deriveKey(pubDef, priv, derivedKey, dbg, use);\r\n    }\r\n\r\n    #toAlgo(iv) {\r\n        iv = QuarkBuffer.toBuffer(iv);\r\n        const type = Object.assign({ counter: iv }, QuarkSecurity.#AES_TYPE);\r\n        type.length = 128;\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Encrypt message with AES\r\n     * @param {CryptoKey} key \r\n     * @param {ArrayBuffer} iv IV as Hex string \r\n     * @param {ArrayBuffer} data as Hex string \r\n     */\r\n    async encryptRaw(key, iv, data) {\r\n        const databin = QuarkBuffer.toBuffer(data);\r\n        const type = this.#toAlgo(iv);\r\n        return crypto.subtle.encrypt(type, key, databin);\r\n    }\r\n\r\n    /**\r\n     * Decrypt AES encrypted message\r\n     * @param {CryptoKey} key \r\n     * @param {ArrayBuffer} iv IV as Hex string \r\n     * @param {ArrayBuffer} data as Hex string \r\n     */\r\n    async decryptRaw(key, iv, data) {\r\n        const databin = QuarkBuffer.toBuffer(data);\r\n        const type = this.#toAlgo(iv);\r\n        return crypto.subtle.decrypt(type, key, databin);\r\n    }\r\n\r\n    async decryptAsBuffer(key, iv, data) {\r\n        const result = await this.decryptRaw(key, iv, data);\r\n        return QuarkBuffer.toBuffer(result);\r\n    }\r\n\r\n    async encryptAsBuffer(key, iv, data) {\r\n        const result = await this.encryptRaw(key, iv, data);\r\n        return QuarkBuffer.toBuffer(result);\r\n    }\r\n\r\n    async decryptAsString(key, iv, data) {\r\n        const result = await this.decryptRaw(key, iv, data);\r\n        return QuarkBuffer.toText(result);\r\n    }\r\n\r\n    async encryptAsHex(key, iv, data) {\r\n        const result = await this.encryptRaw(key, iv, data);\r\n        return QuarkBuffer.toHex(result);\r\n    }\r\n\r\n    get isValid() {\r\n        const me = this;\r\n        return me.#publicKey !== null && me.#aesKey !== null;\r\n    }\r\n\r\n    get isSecure() {\r\n\t\treturn ['https:', 'wss:'].indexOf(location.protocol) > -1;\r\n\t}\r\n    \r\n    static get isAvailable() {\r\n        return crypto.subtle ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Initialize encryption and verification keys\r\n     * Verifies data signatures to prevent tampering\r\n     */\r\n    async init(cfg) {\r\n\r\n        if (!QuarkSecurity.isAvailable) {\r\n            console.log('Security mode not available, TLS protocol required.');\r\n            return;\r\n        }\r\n\r\n        console.log('Security Initializing...');\r\n        const me = this;\r\n\r\n        await me.#initVerify(cfg);\r\n\r\n        const publicKey = await me.#initPublic(cfg);\r\n        me.#aesKey = await me.#deriveAES(me.#keyPair.privateKey, publicKey);\r\n        me.#keyPair = null;\r\n\r\n        console.log('Security Initialized!');\r\n\r\n    }\r\n\r\n    /**\r\n     * Encrypt provided data\r\n     * @param {Uint8Array} data Data to encrypt\r\n     * @returns {Uint8Array} [head+iv+data]\r\n     */\r\n    async encrypt(data) {\r\n        const me = this;\r\n        if (!me.isValid) return data;\r\n        if (!data instanceof Uint8Array) return data;\r\n        const iv = QuarkSecurity.getRandom(16);\r\n        const d = await me.encryptAsBuffer(me.#aesKey, iv, data);\r\n\r\n        const raw = new Uint8Array(iv.length + d.length);\r\n        raw.set(iv, 0);\r\n        raw.set(d, iv.length);\r\n        return raw;\r\n    }\r\n\r\n    /**\r\n     * Decrypt received data in format {d:.., k:...}\r\n     *\r\n     * @param {ArrayBuffer|Uint8Array} data\r\n     * @param {ArrayBuffer|Uint8Array} iv\r\n     * @return \r\n     */\r\n    async decrypt(data, iv) {\r\n\r\n        const me = this;\r\n\r\n        if (!iv) {\r\n            iv = data.slice(0, 16);\r\n            data = data.slice(16);\r\n        }\r\n\r\n        return await me.decryptAsBuffer(me.#aesKey, iv, data);\r\n    }\r\n\r\n    async #preInit() {\r\n        const me = this;\r\n        me.#keyPair = await QuarkSecurity.initKeyPair();\r\n        me.#publicKey = await QuarkSecurity.exportKey(me.#keyPair.publicKey);\r\n    }\r\n\r\n    static async create(cfg) {\r\n        const security = new QuarkSecurity();\r\n        await security.#preInit();\r\n        if (cfg) await security.init(cfg);\r\n        return security;\r\n    }\r\n\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Queue to handle requests\r\n */\r\nexport default class QuarkQueue extends Map {\r\n\r\n\t#up = 0;\r\n\t#down = 0;\r\n\t#tid = 0;\r\n\r\n\t/**\r\n\t * Update counters and queue to link resposnes to requests\r\n\t * @param {Object} req\r\n\t *      Request data\r\n\t */\r\n\tupdateRequest(req) {\r\n\t\tconst me = this;\r\n\t\tme.#tid++;\r\n\t\tme.#up++;\r\n\t\treq.tid = me.#tid.toString();\r\n\t\tme.set(req.tid, req);\r\n\t}\r\n\r\n\t/**\r\n\t * Reset queue to remove old stalled elements\r\n\t */\r\n\treset() {\r\n\t\tconst me = this;\r\n\t\tif (me.#up > 50 && me.#down >= me.#up) {\r\n\t\t\tme.#up = 0;\r\n\t\t\tme.#down = 0;\r\n\t\t\tme.clear();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Process array of response records\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\tprocess(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst unknown = [];\r\n\r\n\t\tif (Array.isArray(obj)) {\r\n\t\t\tobj.forEach((o) => {\r\n\t\t\t\tconst res = me.execute(o);\r\n\t\t\t\tif (res) unkown.push(res);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconst o = me.execute(obj);\r\n\t\t\tif (o) unknown.push(o);\r\n\t\t}\r\n\r\n\t\treturn unknown;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Process single response record\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\texecute(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst tid = obj.tid;\r\n\t\tlet unknown = null;\r\n\r\n\t\tme.#down++;\r\n\r\n\t\tif (me.has(tid)) {\r\n\t\t\tconst req = me.get(tid);\r\n\t\t\ttry {\r\n\t\t\t\treq.finish(obj);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log(e);\r\n\t\t\t\treq.finish(e);\r\n\t\t\t} finally {\r\n\t\t\t\tme.delete(tid);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tunknown = obj;\r\n\t\t}\r\n\r\n\t\tme.reset();\r\n\r\n\t\treturn unknown;\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * API engine asynchronous request\r\n */\r\nexport default class QuarkRequest {\r\n\r\n    #id = 0;\r\n    #timeout = 0;\r\n    #callback;\r\n\r\n    constructor(timeout, callback) {\r\n        const me = this;\r\n        me.#callback = callback;\r\n        me.#timeout = timeout;\r\n        me.#init();\r\n    }\r\n\r\n    get(object, property) {\r\n        const me = this;\r\n        if (property === 'timeout') return me.timeout;\r\n        if (property === 'finish') return me.callback.bind(me);\r\n        return object[property];\r\n    }\r\n\r\n    callback(o) {\r\n        const me = this;\r\n        if (me.timeout) return;\r\n        me.#clear();\r\n        return me.#callback(o);\r\n    }\r\n\r\n    get timeout() {\r\n        return this.#timeout === true;\r\n    }\r\n\r\n    #clear() {\r\n        const me = this;\r\n        if (me.#id === 0) return;\r\n        clearTimeout(me.#id);\r\n    }\r\n\r\n    #init() {\r\n        const me = this;\r\n        if (me.#timeout === 0) return;\r\n        me.#id = setTimeout(() => {\r\n            me.#timeout = true;\r\n            me.#callback(new Error('Call timeouted!'));\r\n        }, me.#timeout);\r\n    }\r\n\r\n    static wrap(data, timeout, callback) {\r\n        return new Proxy(data, new QuarkRequest(timeout, callback));\r\n    }\r\n}","/*\r\n * Copyright (C) 2015, 2024 Green Screens Ltd.\r\n */\r\n\r\nimport QuarkEvent from \"./Event.mjs\";\r\nimport Request from \"./Request.mjs\";\r\nimport QuarkError from './Error.mjs';\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to call remote services.\r\n * All Direct functions linked to defiend namespace\r\n */\r\nexport default class QuarkGenerator extends QuarkEvent {\r\n\r\n\t#model = {};\r\n\t#id = null;\r\n\t#cnt = 0;\r\n\t#timeout = 0;\r\n\r\n\tconstructor(id = 0, timeout = 0) {\r\n\t\tsuper();\r\n\t\tthis.#id = id;\r\n\t\tthis.#timeout = timeout;\r\n\t}\r\n\r\n\t/**\r\n\t * Return generted API structure and callers\r\n\t */\r\n\tget api() {\r\n\t\treturn this.#model;\r\n\t}\r\n\r\n\t/**\r\n\t * Disconnect generator from API callers\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\t\tme.off('call');\r\n\t\tme.off('api');\r\n\t\tme.off('raw');\r\n\t\tme.off('error');\r\n\t\tme.#detach();\r\n\t}\r\n\r\n\t#cleanup(obj, id) {\r\n\t\tfor (let k in obj) {\r\n\t\t\tlet el = obj[k];\r\n\t\t\tif (typeof el === 'object') {\r\n\t\t\t\tif (this.#cleanup(el, id)) obj[k] = null;\r\n\t\t\t} else if (el._id_ === id) {\r\n\t\t\t\tobj[k] = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Object.values(obj).filter(o => o != null).length === 0;\r\n\t}\r\n\r\n\t#detach() {\r\n\t\tconst me = this;\r\n\t\tme.#cleanup(me.#model, me.#id);\r\n\t\tme.#model = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Build JS object with callable functions that maps to Java side methods\r\n\t * Data is retrieved from API service\r\n\t *\r\n\t * @param {String} url || api object\r\n\t * \t\t  URL Address for API service definitions\r\n\t */\r\n\tbuild(o) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst data = o ? o.api || o : null;\r\n\r\n\t\tif (data) me.#buildAPI(data);\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * From API tree generate namespace tree and\r\n\t * links generated functions to WebScoket api calls\r\n\t *\r\n\t * @param {Object} cfg\r\n\t * \t\tAlternative definition to API\r\n\t */\r\n\t#buildAPI(cfg) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (Array.isArray(cfg)) {\r\n\t\t\tcfg.forEach(v => me.#buildInstance(v));\r\n\t\t} else {\r\n\t\t\tme.#buildInstance(cfg);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Build from single definition\r\n\t *\r\n\t * @param {Object} api\r\n\t * \t\t  Java Class/Method definition\r\n\t */\r\n\t#buildInstance(api) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet tree = null;\r\n\t\tlet action = null;\r\n\r\n\t\ttree = me.#buildNamespace(api.namespace);\r\n\r\n\t\tif (!tree[api.action]) {\r\n\t\t\ttree[api.action] = {};\r\n\t\t}\r\n\t\taction = tree[api.action];\r\n\r\n\t\tme.#reduce(api.methods)?.forEach(v => me.#buildMethod(action, v, me.#id));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Reduce duplicate methods with parameters overrides\r\n\t * @param {Array<Object>} list \r\n\t * @returns \r\n\t */\r\n\t#reduce(list) {\r\n\t\treturn list.reduce((a, v, i, ar) => {\r\n\r\n\t\t\tif (a.filter(r => r.name == v.name).length == 1) return a;\r\n\r\n\t\t\tconst objs = ar.filter(r => r.name == v.name);\r\n\t\t\tif (objs.length === 1) {\r\n\t\t\t\ta.push(v);\r\n\t\t\t\treturn a;\r\n\t\t\t}\r\n\r\n\t\t\tconst obj = objs.filter(r => r.name === v.name).reduce((a, v) => {\r\n\t\t\t\ta.mid.push(v.mid);\r\n\t\t\t\ta.len.push(v.len);\r\n\t\t\t\ta.async[v.len] = v.async;\r\n\t\t\t\treturn a;\r\n\t\t\t}, { name: v.name, mid: [], len: [], async: {} });\r\n\r\n\t\t\ta.push(obj);\r\n\t\t\treturn a\r\n\t\t}, []);\r\n\t}\r\n\r\n\t/**\r\n\t * Generate namespace object structure from string version\r\n\t *\r\n\t * @param  {String} namespace\r\n\t * \t\t\tTree structure delimited with dots\r\n\t *\r\n\t * @return {Object}\r\n\t * \t\t\tObject tree structure\r\n\t */\r\n\t#buildNamespace(namespace) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tlet tmp = globalThis;\r\n\t\tlet tmp2 = me.#model;\r\n\r\n\t\tnamespace.split('.').every(v => {\r\n\r\n\t\t\tif (!tmp[v]) tmp[v] = {};\r\n\t\t\ttmp = tmp[v];\r\n\r\n\t\t\tif (!tmp2[v]) tmp2[v] = tmp;\r\n\t\t\ttmp2 = tmp;\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn tmp;\r\n\t}\r\n\r\n\t/**\r\n\t * Build instance methods\r\n\t *\r\n\t * @param {String} instance\r\n\t * @param {Array} api\r\n\t * @param {String} id\r\n\t */\r\n\t#buildMethod(instance, api, id) {\r\n\r\n\t\tconst enc = api.encrypt === false ? false : true;\r\n\t\tconst cfg = {\r\n\t\t\tl: api.len,\r\n\t\t\ta: api.async || false,\r\n\t\t\tx: api.mid,\r\n\t\t\te: enc,\r\n\t\t\ti: id\r\n\t\t};\r\n\r\n\t\tinstance[api.name] = this.#apiFn(cfg);\r\n\t\tinstance[api.name]._id_ = id;\r\n\t\t// Object.freeze(instance[api.name]);\r\n\t}\r\n\r\n\t/**\r\n\t * Generic function used to attach for generated API\r\n\t *\r\n\t * @param {Array} params List of arguments from caller\r\n\t */\r\n\t#apiFn(params) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst prop = params;\r\n\r\n\t\tconst fn = function () {\r\n\r\n\t\t\tconst args = Array.prototype.slice.call(arguments);\r\n\r\n\t\t\t// overriden function with multiple param lengths\r\n\t\t\tconst isOverride = Array.isArray(prop.l);\r\n\r\n\t\t\tconst len = isOverride ? prop.l.filter(v => v === args.length).pop() : prop.l;\r\n\t\t\tif (args.length != len) throw new Error(`Invalid arguments length. Required (${prop.l})`);\r\n\r\n\t\t\tconst handle = Array.isArray(prop.x) ? prop.x[len - 1] : prop.x;\r\n\t\t\tconst isAsync = isOverride ? prop.a[args.length] : prop.a;\r\n\t\t\tconst timeout = isAsync ? 0 : me.#timeout;\r\n\r\n\t\t\tconst req = {\r\n\t\t\t\t\"handle\": handle,\r\n\t\t\t\t\"id\": prop.i,\r\n\t\t\t\t\"enc\": prop.e,\r\n\t\t\t\t\"data\": args,\r\n\t\t\t\t\"key\": ++me.#cnt,\r\n\t\t\t\t\"tid\": 0,\r\n\t\t\t\t\"ts\": Date.now()\r\n\t\t\t};\r\n\t\t\tObject.seal(req);\r\n\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst proxy = Request.wrap(req, timeout, (obj) => {\r\n\t\t\t\t\t\tme.#onResponse(obj, resolve, reject);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tme.emit('call', proxy);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.log(e);\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn fn;\r\n\t}\r\n\r\n\t/**\r\n\t * Process remote response\r\n\t */\r\n\t#onResponse(obj, resolve, reject) {\r\n\r\n\t\tif (obj instanceof Error) return reject(obj);\r\n\r\n\t\tconst result = obj.result || obj;\r\n\r\n\t\tif (result.success) {\r\n\t\t\tresolve(result);\r\n\t\t} else {\r\n\t\t\treject(new QuarkError(result));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Static instance builder\r\n\t * @param {object} cfg Api list from server side Quark engine\r\n\t * @param {number} id Unique Quark Engine ID - to link functions to the engine instance\r\n\t * @returns \r\n\t */\r\n\tstatic build(cfg, id, timeout) {\r\n\t\tconst generator = new QuarkGenerator(id, timeout);\r\n\t\tgenerator.build(cfg);\r\n\t\treturn generator;\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport QuarkEvent from \"./Event.mjs\";\r\nimport QuarkQueue from \"./Queue.mjs\";\r\nimport QuarkStreams from \"./Streams.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to call remote services.\r\n * All Direct functions linked to io.greenscreens namespace\r\n */\r\nexport default class QuarkSocketChannel extends QuarkEvent {\r\n\r\n\t#challenge = Date.now();\r\n\t#queue = new QuarkQueue();\r\n\t#webSocket = null;\r\n\t#engine = null;\r\n\t#iid = 0;\r\n\r\n\t/**\r\n\t * Initialize Socket channel\r\n\t */\r\n\tasync init(engine) {\r\n\r\n\t\tconst me = this;\r\n\t\tme.stop();\r\n\t\tme.#engine = engine;\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tme.#startSocket(resolve, reject);\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tget isOpen() {\r\n\t\tconst me = this;\r\n\t\tif (me.#webSocket == null) return false;\r\n\t\treturn me.#webSocket.readyState === me.#webSocket.OPEN;\r\n\t}\r\n\r\n\t/**\r\n\t * Close WebSocket channel if available\r\n\t */\r\n\tstop() {\r\n\t\tconst me = this;\r\n\t\tif (me.#webSocket == null) return false;\r\n\t\tme.#webSocket.close();\r\n\t\tme.#webSocket = null;\r\n\t\tme.#engine = null;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Must be here, if encryption and compression is not available, \r\n\t * for server to regoznize Quark data format.\r\n\t * @param {*} req \r\n\t * @returns \r\n\t */\r\n\t#wrap(cmd, req) {\r\n\t\tconst data = {\r\n\t\t\ttype: 'GS',\r\n\t\t\tcmd: cmd,\r\n\t\t\tdata: req ? [req] : null\r\n\t\t};\r\n\t\treturn JSON.stringify(data);\r\n\t}\r\n\r\n\tget #ping() {\r\n\t\treturn this.#wrap('ping');\r\n\t}\r\n\r\n\t/**\r\n\t * Prepare remote call, encrypt if available\r\n\t *\r\n\t * @param {Object} req\r\n\t *         Data to send (optionaly encrypt)\r\n\t */\r\n\tasync #onCall(req) {\r\n\r\n\t\treq = req.detail;\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (req.id !== me.#engine.id) return;\r\n\r\n\t\tme.#queue.updateRequest(req);\r\n\r\n\t\tconst msg = me.#wrap('data', req);\r\n\t\tconst raw = await QuarkStreams.wrap(msg, me.#engine.Security);\r\n\t\tme.#webSocket.send(raw);\r\n\t}\r\n\r\n\tasync #startSocket(resolve, reject) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tconst url = new URL(engine.serviceURL);\r\n\r\n\t\t// const headers = Object.assign({}, engine.headers || {});\r\n\t\tconst querys = Object.assign({}, engine.querys || {});\r\n\t\tquerys.q = me.#challenge;\r\n\t\tquerys.c = QuarkStreams.isAvailable;\r\n\r\n\t\tObject.entries(querys || {}).forEach((v) => {\r\n\t\t\tif (v[1]) url.searchParams.append(v[0], encodeURIComponent(v[1]));\r\n\t\t});\r\n\r\n\t\tengine.Security.updateCookie();\r\n\r\n\t\tme.#webSocket = new WebSocket(url.toString(), ['quark']);\r\n\t\tme.#webSocket.binaryType = \"arraybuffer\";\r\n\r\n\t\tconst onCall = me.#onCall.bind(me);\r\n\r\n\t\tme.#webSocket.onopen = (event) => {\r\n\r\n\t\t\tme.emit('online', event);\r\n\t\t\tgenerator.on('call', onCall);\r\n\t\t\tme.#initPing();\r\n\r\n\t\t\tif (!engine.isWSAPI) {\r\n\t\t\t\treturn resolve(true);\r\n\t\t\t}\r\n\r\n\t\t\tgenerator.once('api', async (e) => {\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst data = e.detail;\r\n\t\t\t\t\tdata.challenge = me.#challenge;\r\n\t\t\t\t\tawait engine.registerAPI(data);\r\n\t\t\t\t\tresolve(true);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\r\n\t\t};\r\n\r\n\t\tme.#webSocket.onclose = (event) => {\r\n\t\t\tgenerator.off('call', onCall);\r\n\t\t\tclearInterval(me.#iid);\r\n\t\t\tme.stop();\r\n\t\t\tme.emit('offline', event);\r\n\t\t}\r\n\r\n\t\tme.#webSocket.onerror = (event) => {\r\n\t\t\tgenerator.off('call', onCall);\r\n\t\t\treject(event);\r\n\t\t\tme.stop();\r\n\t\t\tme.emit('error', event);\r\n\t\t};\r\n\r\n\t\tme.#webSocket.onmessage = async (event) => {\r\n\t\t\ttry {\r\n\t\t\t\tif (event.data instanceof ArrayBuffer) {\r\n\t\t\t\t\tawait me.#prepareBinaryMessage(event.data);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tawait me.#prepareTextMessage(event.data);\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\te.data = event;\r\n\t\t\t\tgenerator.emit('error', e);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t#initPing() {\r\n\t\tconst me = this;\r\n\t\tme.#iid = setInterval(() => {\r\n\t\t\tme.send(me.#ping);\r\n\t\t}, 15 * 1000);\r\n\t}\r\n\r\n\tasync #prepareBinaryMessage(message) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst security = engine.Security;\r\n\r\n\t\tmessage = await QuarkStreams.unwrap(message, security, me.#challenge);\r\n\r\n\t\tconst isJSON = QuarkStreams.isJson(message);\r\n\t\tif (!isJSON) return generator.emit('raw', message);\r\n\r\n\t\tif (Array.isArray(message)) {\r\n\t\t\tmessage.forEach(m => me.#onMessage(m));\r\n\t\t} else {\r\n\t\t\tme.#onMessage(message);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Parse and prepare received message for processing\r\n\t *\r\n\t * @param {String} mesasge\r\n\t *\r\n\t */\r\n\tasync #prepareTextMessage(message) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\ttry {\r\n\t\t\tconst isJSON = QuarkStreams.isJson(message);\r\n\r\n\t\t\tif (!isJSON) return generator.emit('raw', message);\r\n\r\n\t\t\tmessage = JSON.parse(message);\r\n\t\t\tif (Array.isArray(message)) {\r\n\t\t\t\tmessage.forEach(m => me.#onMessage(m));\r\n\t\t\t} else {\r\n\t\t\t\tme.#onMessage(message);\r\n\t\t\t}\r\n\r\n\t\t} catch (e) {\r\n\t\t\tgenerator.emit('error', e);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Process received message\r\n\t *\r\n\t * @param {*} msg\r\n\t *\r\n\t */\r\n\tasync #onMessage(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet data = null;\r\n\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tif (obj.cmd === 'api') {\r\n\t\t\treturn generator.emit('api', obj.data);\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'err') {\r\n\t\t\treturn generator.emit('error', obj.result);\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'data') {\r\n\t\t\tdata = obj.data;\r\n\t\t}\r\n\r\n\t\tif (data) {\r\n\t\t\tconst unknown = me.#queue.process(data);\r\n\t\t\tunknown.forEach((obj) => me.emit('message', obj));\r\n\t\t} else {\r\n\t\t\tme.emit('message', data);\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport QuarkStreams from \"./Streams.mjs\";\r\n\r\n/**\r\n * Web Requester Engine\r\n * Used to call remote services through HTTP/S\r\n */\r\nexport default class QuarkWebChannel {\r\n\r\n\tstatic #MIME_BINARY = 'application/octet-stream';\r\n\tstatic #MIME_JSON = 'application/json';\r\n\r\n\t#engine = null;\r\n\r\n\t/**\r\n\t * If http/s used in url, make standard fetch call to the defined service\r\n\t */\r\n\tasync init(engine) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (me.#engine) me.stop();\r\n\r\n\t\tme.#engine = engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tconst data = await me.#getAPI(engine.apiURL);\r\n\t\tawait engine.registerAPI(data);\r\n\r\n\t\tif (engine.isSocketChannel) return;\r\n\r\n\t\tgenerator.on('call', me.#onRequest.bind(me));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Disengage listeners and links\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tme.#engine = null;\r\n\r\n\t\tengine.Generator.off('call');\r\n\t\tif (engine.isSocketChannel) return;\r\n\t\ttry {\r\n\t\t\tfetch(engine.serviceURL, {\r\n\t\t\t\tmethod: 'delete'\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Callback for API call request,\r\n\t * here we make remote API call\r\n\t */\r\n\tasync #onRequest(req) {\r\n\r\n\t\treq = req.detail;\r\n\t\tconst me = this;\r\n\t\tlet o = null;\r\n\r\n\t\tif (req.id !== me.#engine.id) return;\r\n\r\n\t\ttry {\r\n\t\t\to = await me.#onCall(me.#engine, req);\r\n\t\t\treq.finish(o);\r\n\t\t} catch (err) {\r\n\t\t\treq.finish(err);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Get API definition through HTTP/s channel\r\n\t *\r\n\t * @param {String} url\r\n\t * \t\t  URL Address for API service definitions\r\n\t */\r\n\tasync #getAPI(url) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst security = engine.Security;\r\n\t\tconst id = Date.now();\r\n\r\n\t\tconst headers = Object.assign({}, engine.headers || {}, { 'gs-challenge': id });\r\n\r\n\t\tif (security.publicKey) {\r\n\t\t\theaders['gs-public-key'] = security.publicKey;\r\n\t\t}\r\n\r\n\t\tconst res = await me.#fetchCall(url, null, headers, false, 'get');\r\n\t\tconst data = await me.#onResponse(res, id);\r\n\r\n\t\t// update local challenge for signature verificator\r\n\t\tdata.challenge = id.toString();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tget #accept() {\r\n\t\treturn `${QuarkWebChannel.#MIME_BINARY}, ${QuarkWebChannel.#MIME_JSON}`;\r\n\t}\r\n\r\n\t#mime(data) {\r\n\t\tconst isBinary = typeof data === 'string' ? false : true;\r\n\t\treturn isBinary ? QuarkWebChannel.#MIME_BINARY : QuarkWebChannel.#MIME_JSON;\r\n\t}\r\n\r\n\t/**\r\n\t * Send data to server with http/s channel\r\n\t */\r\n\tasync #fetchCall(url, data, head, isCompress, method = 'post') {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst CONTENT_TYPE = me.#mime(data);\r\n\r\n\t\tconst HEADERS_ = {\r\n\t\t\t'Accept': me.#accept,\r\n\t\t\t'Content-Type': CONTENT_TYPE,\r\n\t\t\t'Accept-Encoding': 'gzip,deflate,br'\r\n\t\t};\r\n\r\n\t\tif (isCompress && QuarkStreams.isAvailable) {\r\n\t\t\tdata = QuarkStreams.toBinary(data);\r\n\t\t\tdata = await QuarkStreams.compressOrDefault(data);\r\n\t\t\tHEADERS_['Content-Encoding'] = 'gzip';\r\n\t\t}\r\n\r\n\t\tconst service = new URL(url);\r\n\t\tconst headers = Object.assign({}, engine.headers || {}, HEADERS_, head || {});\r\n\t\tconst querys = Object.assign({}, engine.querys || {});\r\n\r\n\t\tconst req = {\r\n\t\t\tmethod: method,\r\n\t\t\theaders: headers\r\n\t\t};\r\n\r\n\t\tif (data) req.body = data;\r\n\r\n\t\tObject.entries(querys || {}).forEach((v) => {\r\n\t\t\tservice.searchParams.append(v[0], encodeURIComponent(v[1]));\r\n\t\t});\r\n\r\n\t\treturn await fetch(service.toString(), req);\r\n\r\n\t}\r\n\r\n\tasync #onResponse(res, id) {\r\n\r\n\t\tlet obj = await QuarkWebChannel.fromResponse(res);\r\n\t\tif (obj instanceof Uint8Array) {\r\n\t\t\tobj = await QuarkStreams.unwrap(obj, this.#engine.Security, id);\r\n\t\t}\r\n\r\n\t\tif (obj && obj.type == 'ws' && obj.cmd === 'data') {\r\n\t\t\treturn obj.data;\r\n\t\t}\r\n\t\treturn obj;\r\n\t}\r\n\r\n\t/**\r\n\t * Prepare remote call, encrypt if available\r\n\t *\r\n\t * @param {String} url\r\n\t *        Service URL to receive data\r\n\t *\r\n\t * @param {Object} req\r\n\t *         Data to send (optionally encrypt)\r\n\t */\r\n\tasync #onCall(engine, req) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst security = engine.Security;\r\n\t\tconst url = engine.serviceURL;\r\n\r\n\t\tconst isEncrypt = security?.isValid;\r\n\t\tlet isCompress = false;\r\n\t\tlet raw = null;\r\n\r\n\t\tif (req) {\r\n\t\t\tif (isEncrypt) {\r\n\t\t\t\traw = await QuarkStreams.wrap(req, me.#engine.Security);\r\n\t\t\t} else {\r\n\t\t\t\traw = JSON.stringify(raw);\r\n\t\t\t\tisCompress = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst head = {};\r\n\r\n\t\tif (isEncrypt) {\r\n\t\t\thead['gs-public-key'] = security.publicKey;\r\n\t\t}\r\n\r\n\t\t// send and wait for response\r\n\t\tconst res = await me.#fetchCall(url, raw, head, isCompress);\r\n\t\tconst data = await me.#onResponse(res);\r\n\r\n\t\t// if error throw\r\n\t\tif (data.cmd == 'err') {\r\n\t\t\tthrow new Error(data.result.msg);\r\n\t\t}\r\n\r\n\t\t// return server response\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tstatic async fromResponse(res) {\r\n\r\n\t\tif (!res.ok) {\r\n\t\t\tthrow new Error(`${res.status} : ${res.statusText}`);\r\n\t\t}\r\n\r\n\t\tconst mime = res.headers.get('content-type') || '';\r\n\t\tconst isBin = mime.includes(QuarkWebChannel.#MIME_BINARY);\r\n\t\tconst isJson = mime.includes(QuarkWebChannel.#MIME_JSON);\r\n\t\tconst isPlain = !isBin && !isJson;\r\n\r\n\t\tif (isJson) return await res.json();\r\n\t\tif (isPlain) return await res.text();\r\n\r\n\t\tconst raw = await res.arrayBuffer();\r\n\t\treturn new Uint8Array(raw);\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport QuarkGenerator from \"./Generator.mjs\";\r\nimport QuarkSecurity from \"./Security.mjs\";\r\nimport QuarkSocketChannel from \"./SocketChannel.mjs\";\r\nimport QuarkWebChannel from \"./WebChannel.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to initialize remote API and remote services.\r\n */\r\nconst ERROR_MESSAGE = 'Invalid definition for Engine Remote Service';\r\nconst ERROR_API_UNDEFINED = 'API Url not defined!';\r\nconst ERROR_SVC_UNDEFINED = 'Service Url not defined!';\r\n\r\n/**\r\n * Main class for Quark Engine Client\r\n */\r\nexport default class QuarkEngine {\r\n\r\n\t#cfg = null;\r\n\t#isWSAPI = false;\r\n\t#isWebChannel = false;\r\n\t#isSocketChannel = false;\r\n\r\n\t#Security = null;\r\n\t#Generator = null;\r\n\t#WebChannel = null;\r\n\t#SocketChannel = null;\r\n\r\n\t#headers = null;\r\n\t#querys = null;\r\n\r\n\t#id = null;\r\n\r\n\tconstructor(cfg) {\r\n\r\n\t\tcfg = cfg || {};\r\n\r\n\t\tif (!cfg.api) {\r\n\t\t\tthrow new Error(ERROR_API_UNDEFINED);\r\n\t\t}\r\n\r\n\t\tif (!cfg.service) {\r\n\t\t\tthrow new Error(ERROR_SVC_UNDEFINED);\r\n\t\t}\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tme.#cfg = null;\r\n\t\tme.#isWSAPI = false;\r\n\t\tme.#isWebChannel = false;\r\n\t\tme.#isSocketChannel = false;\r\n\r\n\t\tme.#Security = null;\r\n\t\tme.#Generator = null;\r\n\t\tme.#WebChannel = null;\r\n\t\tme.#SocketChannel = null;\r\n\t\tme.#id = Date.now();\r\n\r\n\t\tme.#cfg = cfg;\r\n\t\tme.#isWSAPI = cfg.api === cfg.service && cfg.api.indexOf('ws') == 0;\r\n\r\n\t\tme.#headers = cfg.headers || {};\r\n\t\tme.#querys = cfg.querys || {};\r\n\r\n\t\tme.#Security = cfg.security instanceof QuarkSecurity ? cfg.security : null;\r\n\t\tme.#isWebChannel = cfg.service.indexOf('http') === 0;\r\n\t\tme.#isSocketChannel = cfg.service.indexOf('ws') === 0;\r\n\r\n\t\tif ((me.isWebChannel || me.isSocketChannel) === false) {\r\n\t\t\tthrow new Error(ERROR_MESSAGE);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/*\r\n\t * Initialize engine, throws error,\r\n\t */\r\n\tasync init() {\r\n\r\n\t\tconst me = this;\r\n\t\tif (me.isActive) return;\r\n\r\n\t\tif (!me.#Security) me.#Security = await QuarkSecurity.create();\r\n\t\tme.#Generator = new QuarkGenerator(me.id);\r\n\r\n\t\tif (me.isWebChannel || me.isWSAPI == false) {\r\n\t\t\tme.#WebChannel = new QuarkWebChannel();\r\n\t\t\tawait me.WebChannel.init(me);\r\n\t\t}\r\n\r\n\t\tif (me.isSocketChannel) {\r\n\t\t\tme.#SocketChannel = new QuarkSocketChannel();\r\n\t\t\tawait me.SocketChannel.init(me);\r\n\t\t}\r\n\r\n\t\treturn me;\r\n\t}\r\n\r\n\t/**\r\n\t * Use internaly from channel to register received\r\n\t * API definitions and security data\r\n\t */\r\n\tasync registerAPI(data) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\t// initialize encryption if provided\r\n\t\tif (data.signature && !me.Security?.isValid) {\r\n\t\t\tawait me.Security?.init(data);\r\n\t\t}\r\n\r\n\t\tme.Generator?.build(data.api);\r\n\t}\r\n\r\n\t/**\r\n\t * Stop engine instance by clearing all references\r\n\t * stoping listeners, stoping socket is avaialble\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tme.WebChannel?.stop();\r\n\t\tme.SocketChannel?.stop();\r\n\t\tme.Generator?.stop();\r\n\r\n\t\tme.#WebChannel = null;\r\n\t\tme.#SocketChannel = null;\r\n\t\tme.#Generator = null;\r\n\t\tme.#Security = null;\r\n\t\tme.#cfg = null;\r\n\t}\r\n\r\n\t/*\r\n\t * Return generated API\r\n\t */\r\n\tget api() {\r\n\t\treturn this.Generator?.api || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Check if engine is active\r\n\t */\r\n\tget isActive() {\r\n\t\tconst me = this;\r\n\t\tif (me.SocketChannel && !me.SocketChannel.isOpen) return false;\r\n\t\treturn me.api && me.Security ? true : false;\r\n\t}\r\n\r\n\t/*\r\n\t * Return API URL address\r\n\t */\r\n\tget apiURL() {\r\n\t\treturn this.cfg?.api || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Return Service URL address\r\n\t */\r\n\tget serviceURL() {\r\n\t\treturn this.cfg?.service || null;\r\n\t}\r\n\r\n\tget cfg() { return this.#cfg };\r\n\tget isWSAPI() { return this.#isWSAPI };\r\n\tget isWebChannel() { return this.#isWebChannel };\r\n\tget isSocketChannel() { return this.#isSocketChannel };\r\n\r\n\tget Security() { return this.#Security; }\r\n\tget Generator() { return this.#Generator; }\r\n\tget WebChannel() { return this.#WebChannel; }\r\n\tget SocketChannel() { return this.#SocketChannel; }\r\n\r\n\tget headers() { return this.#headers; }\r\n\tget querys() { return this.#querys; }\r\n\tget id() { return this.#id; }\r\n\r\n\t/*\r\n\t * Static instance builder\r\n\t */\r\n\tstatic async init(cfg) {\r\n\t\tconst engine = new QuarkEngine(cfg);\r\n\t\treturn engine.init();\r\n\t}\r\n}\r\n"],"names":["QuarkError","Error","constructor","data","super","message","msg","error","this","QuarkBuffer","static","TextEncoder","TextDecoder","src","Array","Uint8Array","ArrayBuffer","String","fromText","toArrayBuffer","isString","test","b64","me","fromBase64","isHexString","fromHex","validateData","val","isText","decoder","decode","encoder","encode","value","arry","i","length","push","parseInt","substr","buffer","prototype","map","call","x","toString","slice","join","strbin","atob","bufView","strLen","charCodeAt","toBuffer","btoa","reduce","fromCharCode","QuarkEvent","EventTarget","listeners","Set","list","type","listener","from","isFunction","filter","o","addEventListener","opt","add","removeEventListener","forEach","delete","unbind","clear","on","once","wrap","e","off","emit","evt","CustomEvent","detail","dispatchEvent","send","listen","unlisten","wait","Promise","r","fn","preventDefault","stopPropagation","Object","freeze","QuarkStreams","isAvailable","CompressionStream","DecompressionStream","raw","encrypted","compressed","dataType","dv","DataView","setUint8","setUint32","set","security","toBinary","compressOrDefault","encrypt","toGS","isValid","challenge","isGS","Streams","getUint8","len","getUint32","byteLength","isCompress","isCompressFlag","isEncrypt","isEncryptFlag","api","isApiFlag","encLen","verLen","sgnLen","keyEnc","keyVer","signature","init","decrypt","decompress","arrayBuffer","isJson","JSON","parse","toText","getUint16","stream","byteArray","writer","writable","getWriter","write","close","Response","readable","encoding","compress","stringify","isGzip","at","indexOf","first","trim","last","isJsonArray","isJsonObj","QuarkSecurity","name","namedCurve","hash","publicKey","keyPair","aesKey","size","array","crypto","getRandomValues","subtle","generateKey","Security","ECDH_TYPE","key","mode","der","use","split","importKey","ab","exportKey","toHex","VERIFY","verify","sign","setCookie","cookie","isSecure","document","path","COOKIE_KEY","cookieValue","updateCookie","getChallenge","cfg","toChallenge","toBase64","async","ECDSA_TYPE","verKey","initPublic","deriveAES","priv","pub","pubDef","public","derivedKey","AES_TYPE","deriveKey","toAlgo","iv","assign","counter","databin","result","decryptRaw","encryptRaw","location","protocol","initVerify","privateKey","getRandom","d","encryptAsBuffer","decryptAsBuffer","initKeyPair","preInit","QuarkQueue","Map","up","down","tid","updateRequest","req","reset","process","obj","unknown","isArray","res","execute","unkown","has","get","finish","QuarkRequest","id","timeout","callback","object","property","bind","clearTimeout","setTimeout","Proxy","QuarkGenerator","model","cnt","stop","detach","cleanup","k","el","_id_","values","build","buildAPI","v","buildInstance","tree","action","buildNamespace","namespace","methods","buildMethod","a","ar","objs","mid","tmp","globalThis","tmp2","every","instance","enc","l","apiFn","params","prop","args","arguments","isOverride","pop","handle","isAsync","ts","Date","now","seal","resolve","reject","proxy","Request","onResponse","success","generator","QuarkSocketChannel","queue","webSocket","engine","iid","startSocket","isOpen","readyState","OPEN","cmd","ping","Generator","url","URL","serviceURL","querys","q","c","entries","searchParams","append","encodeURIComponent","WebSocket","binaryType","onCall","onopen","event","initPing","isWSAPI","registerAPI","onclose","clearInterval","onerror","onmessage","prepareBinaryMessage","prepareTextMessage","setInterval","unwrap","m","onMessage","QuarkWebChannel","getAPI","apiURL","isSocketChannel","onRequest","fetch","method","err","headers","fetchCall","accept","MIME_BINARY","MIME_JSON","mime","head","CONTENT_TYPE","HEADERS_","Accept","service","body","fromResponse","ok","status","statusText","isBin","includes","isPlain","json","text","QuarkEngine","isWebChannel","WebChannel","SocketChannel","isActive","create"],"mappings":"AAOe,MAAMA,mBAAmBC,MACpCC,YAAYC,GACTC,MAAMD,EAAKE,SAAWF,EAAKG,KAAOH,EAAKI,OAASJ,GAChDK,KAAKL,KAAOA,CACd,ECPU,MAAMM,YAEpBC,SAAkB,IAAIC,YACtBD,SAAkB,IAAIE,YAQtBF,oBAAoBG,GACnB,IAAIV,EAAO,KACX,GAAIU,aAAeC,MAClBX,EAAO,IAAIY,WAAWF,QAChB,GAAIA,aAAeG,YACzBb,EAAO,IAAIY,WAAWF,QAChB,GAAIA,aAAeE,WACzBZ,EAAOU,OACD,GAAIA,aAAeI,QAAyB,iBAARJ,EAC1CV,EAAOM,YAAYS,SAASL,OACtB,KAAIA,EAAIM,cAGd,KAAM,6DAFNhB,EAAO,IAAIY,WAAWF,EAAIM,gBAG1B,CACD,OAAOhB,CACP,CAODO,gBAAgBP,GACf,MAAuB,iBAATA,CACd,CAODO,mBAAmBP,GAClB,QAAOM,YAAYW,SAASjB,IAAQ,kBAAoBkB,KAAKlB,EAC7D,CAEDO,gBAAgBP,EAAMmB,GAAM,GAC3B,MAAMC,EAAKd,YAUX,OATIc,EAAGH,SAASjB,KAEdA,EADGmB,EACIC,EAAGC,WAAWrB,GACXoB,EAAGE,YAAYtB,GAClBoB,EAAGG,QAAQvB,GAEXoB,EAAGL,SAASf,IAGdoB,EAAGI,aAAaxB,EACvB,CAEDO,cAAckB,GACb,OAAOnB,YAAYoB,OAAOD,GAAOA,EAAMnB,aAAYqB,EAASC,OAAOH,EACnE,CAEDlB,gBAAgBkB,GACf,OAAOnB,YAAYoB,OAAOD,GAAOnB,aAAYuB,EAASC,OAAOL,GAAOA,CACpE,CAEDlB,cAAckB,GACb,MAAsB,iBAARA,CACd,CAEDlB,eAAewB,GAEd,MAAMC,EAAO,GAEb,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,GAAK,EACtCD,EAAKG,KAAKC,SAAS,KAAOL,EAAMM,OAAOJ,EAAG,GAAI,KAG/C,OAAO,IAAIrB,WAAWoB,EACtB,CAEDzB,aAAa+B,GACZ,OAAO3B,MAAM4B,UAAUC,IAAIC,KAAK,IAAI7B,WAAW0B,IAASI,IAAM,KAAOA,EAAEC,SAAS,KAAKC,OAAO,KAAIC,KAAK,GACrG,CAEDtC,kBAAkBwB,GAEjB,MAAMe,EAASC,KAAKhB,GACdO,EAAS,IAAIzB,YAAYiC,EAAOZ,QAChCc,EAAU,IAAIpC,WAAW0B,GAE/B,IAAK,IAAIL,EAAI,EAAGgB,EAASH,EAAOZ,OAAQD,EAAIgB,EAAQhB,IACnDe,EAAQf,GAAKa,EAAOI,WAAWjB,GAGhC,OAAOe,CACP,CAEDzC,gBAAgB+B,GAEf,OADAA,EAAShC,YAAY6C,SAASb,GACvBc,KAAKd,EAAOe,QAAO,CAACrD,EAAMyB,IACzBzB,EAAOc,OAAOwC,aAAa7B,IAChC,IACH,EClGa,MAAM8B,mBAAmBC,YAEpCC,GAAa,IAAIC,IAEjBC,GAAMC,EAAO,GAAIC,GACb,MACMF,EAAOhD,MAAMmD,KADRzD,MACgBoD,GAC3B,OAAOF,YAAWQ,EAAYF,GAC1BF,EAAKK,QAAOC,GAAKA,EAAEL,OAASA,GAAQK,EAAEJ,WAAaA,IAEnDF,EAAKK,QAAOC,GAAKA,EAAEL,OAASA,GACnC,CAEDM,iBAAiBN,EAAMC,EAAUM,GAE7B,QAAKZ,YAAWQ,EAAYF,KADjBxD,MAERoD,EAAWW,IAAI,CAAER,KAAMA,EAAMC,SAAUA,IACnC5D,MAAMiE,iBAAiBN,EAAMC,EAAUM,GACjD,CAEDE,oBAAoBT,EAAMC,GACtB,MAAMzC,EAAKf,KACLsD,EAAOvC,GAAGuC,EAAMC,EAAMC,GAC5BF,EAAKW,SAAQL,GAAKhE,MAAMoE,oBAAoBJ,EAAEL,KAAMK,EAAEJ,YACtDF,EAAKW,SAAQL,GAAK7C,GAAGqC,EAAWc,OAAON,IAC1C,CAKDO,SAEI7D,MAAMmD,KADKzD,MACGoD,GAAYa,SAAQL,IAC9BhE,MAAMoE,oBAAoBJ,EAAEL,KAAMK,EAAEJ,SAAS,IAFtCxD,MAIRoD,EAAWgB,OACjB,CAQDC,GAAGd,EAAO,GAAIC,GACV,OAAOxD,KAAK6D,iBAAiBN,EAAMC,EACtC,CAQDc,KAAKf,EAAMC,GAEP,IAAIe,KAAQC,IACRhB,EAASgB,GACTD,KAAO,IAAI,EAIf,OAFAA,KAAKhB,KAAOA,EACZgB,KAAKf,SAAWA,EANLxD,KAOD6D,iBAAiBN,EAAMgB,KAAM,CAAED,MAAM,GAClD,CAQDG,IAAIlB,EAAO,GAAIC,GACX,OAAOxD,KAAKgE,oBAAoBT,EAAMC,EACzC,CAQDkB,KAAKnB,EAAM5D,GACP,IAAK4D,EAAM,OAAO,EAClB,MAAMoB,EAAM,IAAIC,YAAYrB,EAAM,CAAEsB,OAAQlF,IAC5C,OAAOK,KAAK8E,cAAcH,EAC7B,CAEDI,KAAKxB,EAAM5D,GAAQK,KAAK0E,KAAKnB,EAAM5D,EAAQ,CAC3CqF,OAAOzB,EAAMC,GAAYxD,KAAKqE,GAAGd,EAAMC,EAAY,CACnDyB,SAAS1B,EAAMC,GAAYxD,KAAKyE,IAAIlB,EAAMC,EAAY,CAOtD0B,KAAK3B,EAAO,IACR,IAAKA,EAAM,OAAOiB,EAAE,oBACpB,MAAMzD,EAAKf,KACX,OAAO,IAAImF,SAAQ,CAACC,EAAGZ,KACnBzD,EAAGuD,KAAKf,GAAOiB,GAAMY,EAAEZ,IAAG,GAEjC,CAEDtE,SAAmBmF,GACf,MAAqB,mBAAPA,CACjB,CAODnF,eAAesE,GACPtB,YAAWQ,EAAYc,EAAG,mBAAmBA,EAAEc,iBAC/CpC,YAAWQ,EAAYc,EAAG,oBAAoBA,EAAEe,iBACvD,QAGGC,OAAOC,OAAOvC,WACjB,EC3HU,MAAMwC,aAETC,yBACV,MAAoC,oBAAtBC,mBACkB,oBAAxBC,mBACR,CASD3F,SAAa4F,EAAKC,GAAY,EAAOC,GAAa,GACjD,IAAKF,aAAevF,WAAY,OAAOuF,EACvC,MAAMvC,EAAOmC,cAAaO,EAAUF,EAAWC,GAEzCrG,EAAO,IAAIY,WAAW,EAAIuF,EAAIjE,QAC9BqE,EAAK,IAAIC,SAASxG,EAAKsC,QAO7B,OANAiE,EAAGE,SAAS,EAAG,IACfF,EAAGE,SAAS,EAAG,IACfF,EAAGE,SAAS,EAAG,GACfF,EAAGE,SAAS,EAAG7C,GACf2C,EAAGG,UAAU,EAAGP,EAAIjE,QACpBlC,EAAK2G,IAAIR,EAAK,GACPnG,CACP,CAODO,kBAAkB4F,EAAKS,GAUtB,OATAT,EAAMJ,aAAac,SAASV,GAC5BA,QAAYJ,aAAae,kBAAkBX,GAC3CA,QAAYS,EAASG,QAAQZ,GAC7BA,EAAMJ,cAAaiB,EAAMb,EAAKS,EAASK,QAASlB,aAAaC,YAO7D,CAODzF,oBAAoB4F,EAAKS,EAAUM,GAE9Bf,aAAevF,aAAYuF,EAAMA,EAAI7D,QAOzC,MAAMiE,EAAK,IAAIC,SAASL,GAClBgB,EAAOpB,cAAaoB,EAAMZ,GAGhC,GADAJ,EAAMiB,QAAQP,SAASV,IAClBgB,EAAM,OAAOhB,EAElB,MAAMvC,EAAO2C,EAAGc,SAAS,GACnBC,EAAMf,EAAGgB,UAAU,GAEzB,GAAIhB,EAAGiB,aAAeF,EAAM,EAAG,OAAOnB,EAEtCA,EAAMA,EAAIvD,MAAM,GAEhB,MAAM6E,EAAa1B,aAAa2B,eAAe9D,GACzC+D,EAAY5B,aAAa6B,cAAchE,GAG7C,IAAIiE,EAAM,KACV,GAHc9B,aAAa+B,UAAUlE,GAG1B,CACV,MAAMmE,EAASxB,EAAGgB,UAAU,GACtBS,EAASzB,EAAGgB,UAAU,GAAQQ,GAC9BE,EAAS1B,EAAGgB,UAAU,GAAQQ,EAAS,EAAIC,GAEjDH,EAAM,CACLX,UAAWA,EACXgB,OAAS/B,EAAIvD,MAAM,EAAG,EAAImF,GAC1BI,OAAShC,EAAIvD,MAAM,EAAImF,EAAS,EAAG,EAAIA,EAAS,EAAIC,GACpDI,UAAYjC,EAAIvD,MAAM,EAAImF,EAAS,EAAIC,EAAS,EAAG,EAAID,EAAS,EAAIC,EAAS,EAAIC,UAG5ErB,EAASyB,KAAKR,GACpB1B,EAAMA,EAAIvD,MAAM,GAAUmF,EAASC,EAASC,EAC5C,CAYD,GATIN,IACHxB,QAAYS,GAAU0B,QAAQnC,KAG3BsB,IACHtB,QAAYJ,aAAawC,WAAWpC,GAAKqC,eAG1CrC,EAAMJ,aAAac,SAASV,IACvBJ,aAAa0C,OAAOtC,GAAM,MAAM,IAAIrG,MAAM,oBAE/C,OAAO4I,KAAKC,MAAMrI,YAAYsI,OAAOzC,GACrC,CAOD5F,SAAagG,GACZ,OAAOA,EAAGiB,WAAa,GAAyB,QAApBjB,EAAGsC,UAAU,IAAmC,IAAnBtC,EAAGc,SAAS,EACrE,CAED9G,sBAAsBqD,GACrB,OAAsB,IAAP,EAAPA,EACR,CAEDrD,qBAAqBqD,GACpB,OAAsB,IAAP,EAAPA,EACR,CAEDrD,iBAAiBqD,GAChB,OAAsB,IAAP,EAAPA,EACR,CAEDrD,SAAiBoH,EAAWF,GAE3B,OADaA,EAAa,EAAI,IACfE,EAAY,EAAI,EAC/B,CAEDpH,SAAeP,EAAM8I,GACpB,MACMC,EADK1I,KACUwG,SAAS7G,GACxBgJ,EAASF,EAAOG,SAASC,YAG/B,OAFAF,EAAOG,MAAMJ,GACbC,EAAOI,QACA,IAAIC,SAASP,EAAOQ,SAC3B,CAQD/I,+BAA+BP,EAAMuJ,EAAW,QAC/C,IAAKxD,aAAaC,YAAa,OAAOhG,EACtC,MAAMmG,QAAYJ,aAAayD,SAASxJ,EAAMuJ,GAAUf,cACxD,OAAOpB,QAAQP,SAASV,EACxB,CAQD5F,iCAAiCP,EAAMuJ,EAAW,QACjD,IAAKxD,aAAaC,YAAa,OAAOhG,EACtC,MAAMmG,QAAYJ,aAAawC,WAAWvI,EAAMuJ,GAAUf,cAC1D,OAAOzC,aAAac,SAASV,EAC7B,CAQD5F,gBAAgBP,EAAMuJ,EAAW,QAChC,MAAMT,EAAS,IAAI7C,kBAAkBsD,GACrC,OAAOlJ,MAAKyI,EAAQ9I,EAAM8I,EAC1B,CAQDvI,kBAAkBP,EAAMuJ,EAAW,QAClC,MAAMT,EAAS,IAAI5C,oBAAoBqD,GACvC,OAAOlJ,MAAKyI,EAAQ9I,EAAM8I,EAC1B,CAEDvI,gBAAgBP,GACf,OAAIA,aAAgBY,WAAmBZ,EACnCA,aAAgBa,YAAoB,IAAID,WAAWZ,GACnC,iBAATA,EAA0BM,YAAYS,SAASf,GACnDK,KAAKwG,SAAS6B,KAAKe,UAAUzJ,GACpC,CAMDO,oBAAoBP,GAGnB,OADAA,EADWK,KACDwG,SAAS7G,GADRK,KAEDqJ,OAAO1J,EACjB,CAWDO,cAAcP,GACb,OAAsB,KAAfA,EAAK2J,GAAG,IAA4B,MAAf3J,EAAK2J,GAAG,IAA6B,IAAf3J,EAAK2J,GAAG,EAC1D,CAUDpJ,cAAcP,GACb,OAAsB,MAAfA,EAAK2J,GAAG,IAAc,CAAC,EAAG,GAAI,IAAK,KAAKC,QAAQ5J,EAAK2J,GAAG,KAAO,CACtE,CAEDpJ,cAAcP,GACb,MAAMoB,EAAKf,KAELwJ,GADN7J,EAAuB,iBAATA,EAAoBA,EAAK8J,OAAS1I,EAAGyF,SAAS7G,IACzC2J,GAAG,GAChBI,EAAO/J,EAAK2J,GAAG3J,EAAKkC,OAAS,GACnC,OAAOd,GAAG4I,EAAaH,EAAOE,IAAS3I,GAAG6I,EAAWJ,EAAOE,EAC5D,CAEDxJ,SAAkBsJ,EAAOE,GACxB,QAAkB,MAAVF,GAA2B,MAAVA,GAA4B,MAATE,GAAyB,MAATA,EAC5D,CAEDxJ,SAAoBsJ,EAAOE,GAC1B,QAAkB,MAAVF,GAA2B,KAAVA,GAA2B,MAATE,GAAyB,KAATA,EAC3D,ECpPa,MAAMG,cAEjB3J,SAAoB,CAAE4J,KAAM,OAAQC,WAAY,SAChD7J,SAAqB,CAAE4J,KAAM,QAASC,WAAY,SAClD7J,SAAiB,CAAE4J,KAAM,QAASE,KAAM,WACxC9J,SAAmB,CAAE4J,KAAM,UAAWjI,OAAQ,KAC9C3B,SAAqB,gBAErB+J,GAAa,KACbC,GAAW,KACXC,GAAU,KAQVjK,iBAAiBkK,GACb,MAAMC,EAAQ,IAAI9J,WAAW6J,GAE7B,OADAE,OAAOC,gBAAgBF,GAChBA,CACV,CAKDnK,qBAEI,OAAOoK,OAAOE,OAAOC,YAAYC,UAASC,GAAY,EAD1C,CAAC,YAAa,cAE7B,CAUDzK,uBAAuB0K,EAAKrH,EAAMsH,GAC9B,MAAMC,EAAM7K,YAAY6C,SAAS8H,GAAK,GAChCG,EAAMF,EAAOA,EAAKG,MAAM,KAAO,GACrC,OAAOV,OAAOE,OAAOS,UAAU,OAAQH,EAAKvH,GAAM,EAAMwH,EAC3D,CAOD7K,uBAAuB0K,GACnB,MAAMM,QAAWZ,OAAOE,OAAOW,UAAU,MAAOP,GAChD,OAAO3K,YAAYmL,MAAMF,EAC5B,CASDhL,oBAAoB0K,EAAK7C,EAAWlB,GAChCkB,EAAY9H,YAAY6C,SAASiF,GAAW,GAC5ClB,EAAY5G,YAAY6C,SAAS+D,GACjC,MAAMtD,EAAOsG,eAAcwB,EAC3B,OAAOf,OAAOE,OAAOc,OAAO/H,EAAMqH,EAAK7C,EAAWlB,EACrD,CAOD3G,kBAAkB0K,EAAKjL,GAEnB,OADAA,EAAOM,YAAY6C,SAASnD,GACrB2K,OAAOE,OAAOe,KAAK,QAASX,EAAKjL,EAC3C,CAEGsK,gBAAc,OAAOjK,MAAKiK,CAAa,CAE3CuB,UAAU1B,EAAMpI,GAClB,MAAM+J,EAASzL,KAAK0L,SAAW,0BAA4B,iBAC3DC,SAASF,OAAS,GAAG3B,KAAQpI,IAAQ+J,GACrC,CAEEA,OAAOG,EAAO,KACV,MAAO,GAAG/B,eAAcgC,KAAe7L,KAAK8L,YAAYF,IAC3D,CAEDE,YAAYF,EAAO,KACf,MAAO,GAAG5L,MAAKiK,GAAY,WAAW2B,GACzC,CAEDG,aAAaH,EAAO,KACtB5L,KAAKwL,UAAU3B,eAAcgC,EAAa7L,KAAK8L,YAAYF,GACxD,CAODI,GAAcC,GAEV,MAAO,CAACA,EAAIpF,WAAa,GADd7G,MACqBkM,EAAaD,EAAIpE,SAAW,GADjD7H,MACwDkM,EAAaD,EAAInE,SAAW,IAAItF,KAAK,GAC3G,CAED0J,GAAa9K,GACT,OAAOnB,YAAYoB,OAAOD,GAAOA,EAAMnB,YAAYkM,SAAS/K,EAC/D,CAEDgL,QAAkBH,GACd,MACM1I,EAAOsG,eAAcwC,EACrBC,QAAezC,cAAcoB,UAAUgB,EAAInE,OAAQvE,EAAM,UAE/D,UADqBsG,cAAcyB,OAAOgB,EAAQL,EAAIlE,UAH3C/H,MAGyDgM,EAAcC,IACrE,MAAM,IAAIxM,MAAM,oBAChC,CAMD8M,GAAYN,GACR,OAAOpC,cAAcoB,UAAUgB,EAAIpE,OAAQgC,eAAcc,EAAY,GACxE,CAMD6B,GAAWC,EAAMC,GACb,MAAMC,EAAS,CAAE7C,KAAM,OAAQ8C,OAAQF,GAEjCG,EAAahD,eAAciD,EAEjC,OAAOxC,OAAOE,OAAOuC,UAAUJ,EAAQF,EAAMI,GADjC,EAFA,CAAC,UAAW,WAI3B,CAEDG,GAAQC,GACJA,EAAKhN,YAAY6C,SAASmK,GAC1B,MAAM1J,EAAOiC,OAAO0H,OAAO,CAAEC,QAASF,GAAMpD,eAAciD,GAE1D,OADAvJ,EAAK1B,OAAS,IACP0B,CACV,CAQD6I,iBAAiBxB,EAAKqC,EAAItN,GACtB,MAAMyN,EAAUnN,YAAY6C,SAASnD,GAC/B4D,EAAOvD,MAAKgN,EAAQC,GAC1B,OAAO3C,OAAOE,OAAO9D,QAAQnD,EAAMqH,EAAKwC,EAC3C,CAQDhB,iBAAiBxB,EAAKqC,EAAItN,GACtB,MAAMyN,EAAUnN,YAAY6C,SAASnD,GAC/B4D,EAAOvD,MAAKgN,EAAQC,GAC1B,OAAO3C,OAAOE,OAAOvC,QAAQ1E,EAAMqH,EAAKwC,EAC3C,CAEDhB,sBAAsBxB,EAAKqC,EAAItN,GAC3B,MAAM0N,QAAerN,KAAKsN,WAAW1C,EAAKqC,EAAItN,GAC9C,OAAOM,YAAY6C,SAASuK,EAC/B,CAEDjB,sBAAsBxB,EAAKqC,EAAItN,GAC3B,MAAM0N,QAAerN,KAAKuN,WAAW3C,EAAKqC,EAAItN,GAC9C,OAAOM,YAAY6C,SAASuK,EAC/B,CAEDjB,sBAAsBxB,EAAKqC,EAAItN,GAC3B,MAAM0N,QAAerN,KAAKsN,WAAW1C,EAAKqC,EAAItN,GAC9C,OAAOM,YAAYsI,OAAO8E,EAC7B,CAEDjB,mBAAmBxB,EAAKqC,EAAItN,GACxB,MAAM0N,QAAerN,KAAKuN,WAAW3C,EAAKqC,EAAItN,GAC9C,OAAOM,YAAYmL,MAAMiC,EAC5B,CAEGzG,cAEA,OAAyB,OADd5G,MACDiK,GAAsC,OADrCjK,MACyBmK,CACvC,CAEGuB,eACN,MAAO,CAAC,SAAU,QAAQnC,QAAQiE,SAASC,WAAa,CACxD,CAEa9H,yBACP,QAAO2E,OAAOE,MACjB,CAMD4B,WAAWH,GAEP,IAAKpC,cAAclE,YAEf,OAIJ,MAAM5E,EAAKf,WAELe,GAAG2M,EAAYzB,GAErB,MAAMhC,QAAkBlJ,GAAGwL,EAAYN,GACvClL,GAAGoJ,QAAgBpJ,GAAGyL,EAAWzL,GAAGmJ,EAASyD,WAAY1D,GACzDlJ,GAAGmJ,EAAW,IAIjB,CAODkC,cAAczM,GACV,MAAMoB,EAAKf,KACX,IAAKe,EAAG6F,QAAS,OAAOjH,EACxB,IAAKA,aAAgBY,WAAY,OAAOZ,EACxC,MAAMsN,EAAKpD,cAAc+D,UAAU,IAC7BC,QAAU9M,EAAG+M,gBAAgB/M,GAAGoJ,EAAS8C,EAAItN,GAE7CmG,EAAM,IAAIvF,WAAW0M,EAAGpL,OAASgM,EAAEhM,QAGzC,OAFAiE,EAAIQ,IAAI2G,EAAI,GACZnH,EAAIQ,IAAIuH,EAAGZ,EAAGpL,QACPiE,CACV,CASDsG,cAAczM,EAAMsN,GAShB,OALKA,IACDA,EAAKtN,EAAK4C,MAAM,EAAG,IACnB5C,EAAOA,EAAK4C,MAAM,WAJXvC,KAOK+N,gBAPL/N,MAOwBmK,EAAS8C,EAAItN,EACnD,CAEDyM,UACI,MAAMrL,EAAKf,KACXe,GAAGmJ,QAAiBL,cAAcmE,cAClCjN,GAAGkJ,QAAmBJ,cAAcsB,UAAUpK,GAAGmJ,EAASD,UAC7D,CAED/J,oBAAoB+L,GAChB,MAAM1F,EAAW,IAAIsD,cAGrB,aAFMtD,GAAS0H,IACXhC,SAAW1F,EAASyB,KAAKiE,GACtB1F,CACV,EC1RU,MAAM2H,mBAAmBC,IAEvCC,GAAM,EACNC,GAAQ,EACRC,GAAO,EAOPC,cAAcC,GACb,MAAMzN,EAAKf,KACXe,GAAGuN,IACHvN,GAAGqN,IACHI,EAAIF,IAAMvN,GAAGuN,EAAKhM,WAClBvB,EAAGuF,IAAIkI,EAAIF,IAAKE,EAChB,CAKDC,QACC,MAAM1N,EAAKf,KACPe,GAAGqN,EAAM,IAAMrN,GAAGsN,GAAStN,GAAGqN,IACjCrN,GAAGqN,EAAM,EACTrN,GAAGsN,EAAQ,EACXtN,EAAGqD,QAEJ,CAODsK,QAAQC,GAEP,MAAM5N,EAAKf,KACL4O,EAAU,GAEhB,GAAItO,MAAMuO,QAAQF,GACjBA,EAAI1K,SAASL,IACZ,MAAMkL,EAAM/N,EAAGgO,QAAQnL,GACnBkL,GAAKE,OAAOlN,KAAKgN,EAAI,QAEpB,CACN,MAAMlL,EAAI7C,EAAGgO,QAAQJ,GACjB/K,GAAGgL,EAAQ9M,KAAK8B,EACpB,CAED,OAAOgL,CACP,CAQDG,QAAQJ,GAEP,MAAM5N,EAAKf,KACLsO,EAAMK,EAAIL,IAChB,IAAIM,EAAU,KAId,GAFA7N,GAAGsN,IAECtN,EAAGkO,IAAIX,GAAM,CAChB,MAAME,EAAMzN,EAAGmO,IAAIZ,GACnB,IACCE,EAAIW,OAAOR,EAMX,CALC,MAAOnK,GAERgK,EAAIW,OAAO3K,EACf,CAAa,QACTzD,EAAGmD,OAAOoK,EACV,CACJ,MACGM,EAAUD,EAKX,OAFA5N,EAAG0N,QAEIG,CACP,ECrFa,MAAMQ,aAEjBC,GAAM,EACNC,GAAW,EACXC,GAEA7P,YAAY4P,EAASC,GACjB,MAAMxO,EAAKf,KACXe,GAAGwO,EAAYA,EACfxO,GAAGuO,EAAWA,EACdvO,GAAGiH,GACN,CAEDkH,IAAIM,EAAQC,GACR,MAAM1O,EAAKf,KACX,MAAiB,YAAbyP,EAA+B1O,EAAGuO,QACrB,WAAbG,EAA8B1O,EAAGwO,SAASG,KAAK3O,GAC5CyO,EAAOC,EACjB,CAEDF,SAAS3L,GACL,MAAM7C,EAAKf,KACX,IAAIe,EAAGuO,QAEP,OADAvO,GAAGqD,IACIrD,GAAGwO,EAAU3L,EACvB,CAEG0L,cACA,OAAyB,IAAlBtP,MAAKsP,CACf,CAEDlL,KAEmB,IADJpE,MACJqP,GACPM,aAFW3P,MAEKqP,EACnB,CAEDrH,KACI,MAAMjH,EAAKf,KACS,IAAhBe,GAAGuO,IACPvO,GAAGsO,EAAMO,YAAW,KAChB7O,GAAGuO,GAAW,EACdvO,GAAGwO,EAAU,IAAI9P,MAAM,mBAAmB,GAC3CsB,GAAGuO,GACT,CAEDpP,YAAYP,EAAM2P,EAASC,GACvB,OAAO,IAAIM,MAAMlQ,EAAM,IAAIyP,aAAaE,EAASC,GACpD,EC1CU,MAAMO,uBAAuB5M,WAE3C6M,GAAS,CAAA,EACTV,GAAM,KACNW,GAAO,EACPV,GAAW,EAEX5P,YAAY2P,EAAK,EAAGC,EAAU,GAC7B1P,QACAI,MAAKqP,EAAMA,EACXrP,MAAKsP,EAAWA,CAChB,CAKG9H,UACH,OAAOxH,MAAK+P,CACZ,CAKDE,OAEC,MAAMlP,EAAKf,KACXe,EAAG0D,IAAI,QACP1D,EAAG0D,IAAI,OACP1D,EAAG0D,IAAI,OACP1D,EAAG0D,IAAI,SACP1D,GAAGmP,GACH,CAEDC,GAASxB,EAAKU,GACb,IAAK,IAAIe,KAAKzB,EAAK,CAClB,IAAI0B,EAAK1B,EAAIyB,GACK,iBAAPC,EACNrQ,MAAKmQ,EAASE,EAAIhB,KAAKV,EAAIyB,GAAK,MAC1BC,EAAGC,OAASjB,IACtBV,EAAIyB,GAAK,KAEV,CACD,OAA4D,IAArD5K,OAAO+K,OAAO5B,GAAKhL,QAAOC,GAAU,MAALA,IAAW/B,MACjD,CAEDqO,KACC,MAAMnP,EAAKf,KACXe,GAAGoP,EAASpP,GAAGgP,EAAQhP,GAAGsO,GAC1BtO,GAAGgP,EAAS,EACZ,CASDS,MAAM5M,GAEL,MACMjE,EAAOiE,EAAIA,EAAE4D,KAAO5D,EAAI,KAI9B,OAFIjE,GAHOK,MAGEyQ,EAAU9Q,GAEhBA,CACP,CASD8Q,GAAUxE,GAET,MAAMlL,EAAKf,KAEPM,MAAMuO,QAAQ5C,GACjBA,EAAIhI,SAAQyM,GAAK3P,GAAG4P,EAAeD,KAEnC3P,GAAG4P,EAAe1E,EAGnB,CAQD0E,GAAenJ,GAEd,MAAMzG,EAAKf,KACX,IAAI4Q,EAAO,KACPC,EAAS,KAEbD,EAAO7P,GAAG+P,EAAgBtJ,EAAIuJ,WAEzBH,EAAKpJ,EAAIqJ,UACbD,EAAKpJ,EAAIqJ,QAAU,IAEpBA,EAASD,EAAKpJ,EAAIqJ,QAElB9P,GAAGiC,EAAQwE,EAAIwJ,UAAU/M,SAAQyM,GAAK3P,GAAGkQ,EAAaJ,EAAQH,EAAG3P,GAAGsO,IAEpE,CAODrM,GAAQM,GACP,OAAOA,EAAKN,QAAO,CAACkO,EAAGR,EAAG9O,EAAGuP,KAE5B,GAA8C,GAA1CD,EAAEvN,QAAOyB,GAAKA,EAAE0E,MAAQ4G,EAAE5G,OAAMjI,OAAa,OAAOqP,EAExD,MAAME,EAAOD,EAAGxN,QAAOyB,GAAKA,EAAE0E,MAAQ4G,EAAE5G,OACxC,GAAoB,IAAhBsH,EAAKvP,OAER,OADAqP,EAAEpP,KAAK4O,GACAQ,EAGR,MAAMvC,EAAMyC,EAAKzN,QAAOyB,GAAKA,EAAE0E,OAAS4G,EAAE5G,OAAM9G,QAAO,CAACkO,EAAGR,KAC1DQ,EAAEG,IAAIvP,KAAK4O,EAAEW,KACbH,EAAEjK,IAAInF,KAAK4O,EAAEzJ,KACbiK,EAAE9E,MAAMsE,EAAEzJ,KAAOyJ,EAAEtE,MACZ8E,IACL,CAAEpH,KAAM4G,EAAE5G,KAAMuH,IAAK,GAAIpK,IAAK,GAAImF,MAAO,CAAA,IAG5C,OADA8E,EAAEpP,KAAK6M,GACAuC,IACL,GACH,CAWDJ,GAAgBC,GAIf,IAAIO,EAAMC,WACNC,EAHOxR,MAGG+P,EAad,OAXAgB,EAAU/F,MAAM,KAAKyG,OAAMf,IAErBY,EAAIZ,KAAIY,EAAIZ,GAAK,IACtBY,EAAMA,EAAIZ,GAELc,EAAKd,KAAIc,EAAKd,GAAKY,GACxBE,EAAOF,GAEA,KAGDA,CACP,CASDL,GAAaS,EAAUlK,EAAK6H,GAE3B,MAAMsC,GAAsB,IAAhBnK,EAAId,QACVuF,EAAM,CACX2F,EAAGpK,EAAIP,IACPiK,EAAG1J,EAAI4E,QAAS,EAChB/J,EAAGmF,EAAI6J,IACP7M,EAAGmN,EACH/P,EAAGyN,GAGJqC,EAASlK,EAAIsC,MAAQ9J,MAAK6R,EAAO5F,GACjCyF,EAASlK,EAAIsC,MAAMwG,KAAOjB,CAE1B,CAODwC,GAAOC,GAEN,MAAM/Q,EAAKf,KACL+R,EAAOD,EAuCb,OArCW,WAEV,MAAME,EAAO1R,MAAM4B,UAAUK,MAAMH,KAAK6P,WAGlCC,EAAa5R,MAAMuO,QAAQkD,EAAKH,GAEhC3K,EAAMiL,EAAaH,EAAKH,EAAEjO,QAAO+M,GAAKA,IAAMsB,EAAKnQ,SAAQsQ,MAAQJ,EAAKH,EAC5E,GAAII,EAAKnQ,QAAUoF,EAAK,MAAM,IAAIxH,MAAM,uCAAuCsS,EAAKH,MAEpF,MAAMQ,EAAS9R,MAAMuO,QAAQkD,EAAK1P,GAAK0P,EAAK1P,EAAE4E,EAAM,GAAK8K,EAAK1P,EACxDgQ,EAAUH,EAAaH,EAAKb,EAAEc,EAAKnQ,QAAUkQ,EAAKb,EAClD5B,EAAU+C,EAAU,EAAItR,GAAGuO,EAE3Bd,EAAM,CACX4D,OAAUA,EACV/C,GAAM0C,EAAKnQ,EACX+P,IAAOI,EAAKvN,EACZ7E,KAAQqS,EACRpH,MAAS7J,GAAGiP,EACZ1B,IAAO,EACPgE,GAAMC,KAAKC,OAIZ,OAFAhN,OAAOiN,KAAKjE,GAEL,IAAIrJ,SAAQ,CAACuN,EAASC,KAC5B,IACC,MAAMC,EAAQC,aAAQtO,KAAKiK,EAAKc,GAAUX,IACzC5N,GAAG+R,EAAYnE,EAAK+D,EAASC,EAAO,IAErC5R,EAAG2D,KAAK,OAAQkO,EAIhB,CAHC,MAAOpO,GAERmO,EAAOnO,EACP,IAEF,CAED,CAKDsO,GAAYnE,EAAK+D,EAASC,GAEzB,GAAIhE,aAAelP,MAAO,OAAOkT,EAAOhE,GAExC,MAAMtB,EAASsB,EAAItB,QAAUsB,EAEzBtB,EAAO0F,QACVL,EAAQrF,GAERsF,EAAO,IAAInT,WAAW6N,GAGvB,CAQDnN,aAAa+L,EAAKoD,EAAIC,GACrB,MAAM0D,EAAY,IAAIlD,eAAeT,EAAIC,GAEzC,OADA0D,EAAUxC,MAAMvE,GACT+G,CACP,EC5Qa,MAAMC,2BAA2B/P,WAE/C2D,GAAa0L,KAAKC,MAClBU,GAAS,IAAIhF,WACbiF,GAAa,KACbC,GAAU,KACVC,GAAO,EAKPjH,WAAWgH,GAEV,MAAMrS,EAAKf,KAIX,OAHAe,EAAGkP,OACHlP,GAAGqS,EAAUA,EAEN,IAAIjO,SAAQ,CAACuN,EAASC,KAC5B5R,GAAGuS,EAAaZ,EAASC,GAClB,OAGR,CAEGY,aACH,MAAMxS,EAAKf,KACX,OAAqB,MAAjBe,GAAGoS,GACApS,GAAGoS,EAAWK,aAAezS,GAAGoS,EAAWM,IAClD,CAKDxD,OACC,MAAMlP,EAAKf,KACX,OAAqB,MAAjBe,GAAGoS,IACPpS,GAAGoS,EAAWpK,QACdhI,GAAGoS,EAAa,KAChBpS,GAAGqS,EAAU,MACN,EACP,CAQD7O,GAAMmP,EAAKlF,GACV,MAAM7O,EAAO,CACZ4D,KAAM,KACNmQ,IAAKA,EACL/T,KAAM6O,EAAM,CAACA,GAAO,MAErB,OAAOnG,KAAKe,UAAUzJ,EACtB,CAEGgU,QACH,OAAO3T,MAAKuE,EAAM,OAClB,CAQD6H,QAAcoC,GAIb,MAAMzN,EAAKf,KAEX,IAJAwO,EAAMA,EAAI3J,QAIFwK,KAAOtO,GAAGqS,EAAQ/D,GAAI,OAE9BtO,GAAGmS,EAAO3E,cAAcC,GAExB,MAAM1O,EAAMiB,GAAGwD,EAAM,OAAQiK,GACvB1I,QAAYJ,aAAanB,KAAKzE,EAAKiB,GAAGqS,EAAQ1I,UACpD3J,GAAGoS,EAAWpO,KAAKe,EACnB,CAEDsG,QAAmBsG,EAASC,GAE3B,MAAM5R,EAAKf,KACLoT,EAASrS,GAAGqS,EACZJ,EAAYI,EAAOQ,UAEnBC,EAAM,IAAIC,IAAIV,EAAOW,YAGrBC,EAASxO,OAAO0H,OAAO,CAAE,EAAEkG,EAAOY,QAAU,CAAA,GAClDA,EAAOC,EAAIlT,GAAG8F,EACdmN,EAAOE,EAAIxO,aAAaC,YAExBH,OAAO2O,QAAQH,GAAU,CAAE,GAAE/P,SAASyM,IACjCA,EAAE,IAAImD,EAAIO,aAAaC,OAAO3D,EAAE,GAAI4D,mBAAmB5D,EAAE,IAAI,IAGlE0C,EAAO1I,SAASqB,eAEhBhL,GAAGoS,EAAa,IAAIoB,UAAUV,EAAIvR,WAAY,CAAC,UAC/CvB,GAAGoS,EAAWqB,WAAa,cAE3B,MAAMC,EAAS1T,GAAG0T,EAAQ/E,KAAK3O,GAE/BA,GAAGoS,EAAWuB,OAAUC,IAMvB,GAJA5T,EAAG2D,KAAK,SAAUiQ,GAClB3B,EAAU3O,GAAG,OAAQoQ,GACrB1T,GAAG6T,MAEExB,EAAOyB,QACX,OAAOnC,GAAQ,GAGhBM,EAAU1O,KAAK,OAAO8H,MAAO5H,IAE5B,IACC,MAAM7E,EAAO6E,EAAEK,OACflF,EAAKkH,UAAY9F,GAAG8F,QACduM,EAAO0B,YAAYnV,GACzB+S,GAAQ,EAGR,CAFC,MAAOlO,GACRmO,EAAOnO,EACP,IAEA,EAIHzD,GAAGoS,EAAW4B,QAAWJ,IACxB3B,EAAUvO,IAAI,OAAQgQ,GACtBO,cAAcjU,GAAGsS,GACjBtS,EAAGkP,OACHlP,EAAG2D,KAAK,UAAWiQ,EAAM,EAG1B5T,GAAGoS,EAAW8B,QAAWN,IACxB3B,EAAUvO,IAAI,OAAQgQ,GACtB9B,EAAOgC,GACP5T,EAAGkP,OACHlP,EAAG2D,KAAK,QAASiQ,EAAM,EAGxB5T,GAAGoS,EAAW+B,UAAY9I,MAAOuI,IAChC,IACKA,EAAMhV,gBAAgBa,kBACnBO,GAAGoU,GAAsBR,EAAMhV,YAE/BoB,GAAGqU,GAAoBT,EAAMhV,KAKpC,CAHC,MAAO6E,GACRA,EAAE7E,KAAOgV,EACT3B,EAAUtO,KAAK,QAASF,EACxB,EAGF,CAEDoQ,MACC,MAAM7T,EAAKf,KACXe,GAAGsS,EAAOgC,aAAY,KACrBtU,EAAGgE,KAAKhE,GAAG4S,EAAM,GACf,KACH,CAEDvH,SAA4BvM,GAE3B,MAAMkB,EAAKf,KAELuG,EADSxF,GAAGqS,EACM1I,SAExB7K,QAAgB6F,aAAa4P,OAAOzV,EAAS0G,EAAUxF,GAAG8F,GAG1D,IADenB,aAAa0C,OAAOvI,GACtB,OAAOmT,UAAUtO,KAAK,MAAO7E,GAEtCS,MAAMuO,QAAQhP,GACjBA,EAAQoE,SAAQsR,GAAKxU,GAAGyU,GAAWD,KAEnCxU,GAAGyU,GAAW3V,EAEf,CAQDuM,SAA0BvM,GAEzB,MAAMkB,EAAKf,KAELgT,EADSjS,GAAGqS,EACOQ,UAEzB,IAGC,IAFelO,aAAa0C,OAAOvI,GAEtB,OAAOmT,EAAUtO,KAAK,MAAO7E,GAE1CA,EAAUwI,KAAKC,MAAMzI,GACjBS,MAAMuO,QAAQhP,GACjBA,EAAQoE,SAAQsR,GAAKxU,GAAGyU,GAAWD,KAEnCxU,GAAGyU,GAAW3V,EAKf,CAFC,MAAO2E,GACRwO,EAAUtO,KAAK,QAASF,EACxB,CAED,CAQD4H,SAAiBuC,GAEhB,MAAM5N,EAAKf,KACX,IAAIL,EAAO,KAEX,MACMqT,EADSjS,GAAGqS,EACOQ,UAEzB,GAAgB,QAAZjF,EAAI+E,IACP,OAAOV,EAAUtO,KAAK,MAAOiK,EAAIhP,MAGlC,GAAgB,QAAZgP,EAAI+E,IACP,OAAOV,EAAUtO,KAAK,QAASiK,EAAItB,QAOpC,GAJgB,SAAZsB,EAAI+E,MACP/T,EAAOgP,EAAIhP,MAGRA,EAAM,CACOoB,GAAGmS,EAAOxE,QAAQ/O,GAC1BsE,SAAS0K,GAAQ5N,EAAG2D,KAAK,UAAWiK,IAC/C,MACG5N,EAAG2D,KAAK,UAAW/E,EAGpB,EC3Pa,MAAM8V,gBAEpBvV,UAAsB,2BACtBA,UAAoB,mBAEpBkT,GAAU,KAKVhH,WAAWgH,GAEV,MAAMrS,EAAKf,KAEPe,GAAGqS,GAASrS,EAAGkP,OAEnBlP,GAAGqS,EAAUA,EACb,MAAMJ,EAAYI,EAAOQ,UAEnBjU,QAAaoB,GAAG2U,GAAQtC,EAAOuC,cAC/BvC,EAAO0B,YAAYnV,GAErByT,EAAOwC,iBAEX5C,EAAU3O,GAAG,OAAQtD,GAAG8U,GAAWnG,KAAK3O,GAExC,CAKDkP,OAEC,MACMmD,EADKpT,MACOoT,EAIlB,GALWpT,MAERoT,EAAU,KAEbA,EAAOQ,UAAUnP,IAAI,SACjB2O,EAAOwC,gBACX,IACCE,MAAM1C,EAAOW,WAAY,CACxBgC,OAAQ,UAIT,CAFC,MAAOvR,GAER,CACD,CAMD4H,SAAiBoC,GAGhB,MAAMzN,EAAKf,KACX,IAAI4D,EAAI,KAER,IAJA4K,EAAMA,EAAI3J,QAIFwK,KAAOtO,GAAGqS,EAAQ/D,GAE1B,IACCzL,QAAU7C,GAAG0T,EAAQ1T,GAAGqS,EAAS5E,GACjCA,EAAIW,OAAOvL,EAGX,CAFC,MAAOoS,GACRxH,EAAIW,OAAO6G,EACX,CAED,CAQD5J,SAAcyH,GAEb,MAAM9S,EAAKf,KACLoT,EAASrS,GAAGqS,EACZ7M,EAAW6M,EAAO1I,SAClB2E,EAAKkD,KAAKC,MAEVyD,EAAUzQ,OAAO0H,OAAO,GAAIkG,EAAO6C,SAAW,GAAI,CAAE,eAAgB5G,IAEtE9I,EAAS0D,YACZgM,EAAQ,iBAAmB1P,EAAS0D,WAGrC,MAAM6E,QAAY/N,GAAGmV,GAAWrC,EAAK,KAAMoC,GAAS,EAAO,OACrDtW,QAAaoB,GAAG+R,EAAYhE,EAAKO,GAKvC,OAFA1P,EAAKkH,UAAYwI,EAAG/M,WAEb3C,CAEP,CAEGwW,SACH,MAAO,GAAGV,iBAAgBW,OAAiBX,iBAAgBY,IAC3D,CAEDC,IAAM3W,GAEL,MADiC,iBAATA,EACN8V,iBAAgBW,GAAeX,iBAAgBY,EACjE,CAKDjK,SAAiByH,EAAKlU,EAAM4W,EAAMnP,EAAY2O,EAAS,QAEtD,MAAMhV,EAAKf,KACLoT,EAASrS,GAAGqS,EACZoD,EAAezV,GAAGuV,GAAM3W,GAExB8W,EAAW,CAChBC,OAAU3V,GAAGoV,GACb,eAAgBK,EAChB,kBAAmB,mBAGhBpP,GAAc1B,aAAaC,cAC9BhG,EAAO+F,aAAac,SAAS7G,GAC7BA,QAAa+F,aAAae,kBAAkB9G,GAC5C8W,EAAS,oBAAsB,QAGhC,MAAME,EAAU,IAAI7C,IAAID,GAClBoC,EAAUzQ,OAAO0H,OAAO,GAAIkG,EAAO6C,SAAW,GAAIQ,EAAUF,GAAQ,CAAE,GACtEvC,EAASxO,OAAO0H,OAAO,CAAE,EAAEkG,EAAOY,QAAU,CAAA,GAE5CxF,EAAM,CACXuH,OAAQA,EACRE,QAASA,GASV,OANItW,IAAM6O,EAAIoI,KAAOjX,GAErB6F,OAAO2O,QAAQH,GAAU,CAAE,GAAE/P,SAASyM,IACrCiG,EAAQvC,aAAaC,OAAO3D,EAAE,GAAI4D,mBAAmB5D,EAAE,IAAI,UAG/CoF,MAAMa,EAAQrU,WAAYkM,EAEvC,CAEDpC,QAAkB0C,EAAKO,GAEtB,IAAIV,QAAY8G,gBAAgBoB,aAAa/H,GAK7C,OAJIH,aAAepO,aAClBoO,QAAYjJ,aAAa4P,OAAO3G,EAAK3O,MAAKoT,EAAQ1I,SAAU2E,IAGzDV,GAAmB,MAAZA,EAAIpL,MAA4B,SAAZoL,EAAI+E,IAC3B/E,EAAIhP,KAELgP,CACP,CAWDvC,QAAcgH,EAAQ5E,GAErB,MAAMzN,EAAKf,KACLuG,EAAW6M,EAAO1I,SAClBmJ,EAAMT,EAAOW,WAEbzM,EAAYf,GAAUK,QAC5B,IAAIQ,GAAa,EACbtB,EAAM,KAEN0I,IACClH,EACHxB,QAAYJ,aAAanB,KAAKiK,EAAKzN,GAAGqS,EAAQ1I,WAE9C5E,EAAMuC,KAAKe,UAAUtD,GACrBsB,GAAa,IAIf,MAAMmP,EAAO,CAAA,EAETjP,IACHiP,EAAK,iBAAmBhQ,EAAS0D,WAIlC,MAAM6E,QAAY/N,GAAGmV,GAAWrC,EAAK/N,EAAKyQ,EAAMnP,GAC1CzH,QAAaoB,GAAG+R,EAAYhE,GAGlC,GAAgB,OAAZnP,EAAK+T,IACR,MAAM,IAAIjU,MAAME,EAAK0N,OAAOvN,KAI7B,OAAOH,CAEP,CAEDO,0BAA0B4O,GAEzB,IAAKA,EAAIgI,GACR,MAAM,IAAIrX,MAAM,GAAGqP,EAAIiI,YAAYjI,EAAIkI,cAGxC,MAAMV,EAAOxH,EAAImH,QAAQ/G,IAAI,iBAAmB,GAC1C+H,EAAQX,EAAKY,SAASzB,iBAAgBW,IACtChO,EAASkO,EAAKY,SAASzB,iBAAgBY,IACvCc,GAAWF,IAAU7O,EAE3B,GAAIA,EAAQ,aAAa0G,EAAIsI,OAC7B,GAAID,EAAS,aAAarI,EAAIuI,OAE9B,MAAMvR,QAAYgJ,EAAI3G,cACtB,OAAO,IAAI5H,WAAWuF,EACtB,ECtNa,MAAMwR,YAEpBrL,IAAO,KACP4I,KAAW,EACX0C,KAAgB,EAChB3B,KAAmB,EAEnBlL,IAAY,KACZkJ,IAAa,KACb4D,IAAc,KACdC,IAAiB,KAEjBxB,IAAW,KACXjC,IAAU,KAEV3E,GAAM,KAEN3P,YAAYuM,GAIX,KAFAA,EAAMA,GAAO,IAEJzE,IACR,MAAM,IAAI/H,MA5Be,wBA+B1B,IAAKwM,EAAI0K,QACR,MAAM,IAAIlX,MA/Be,4BAkC1B,MAAMsB,EAAKf,KAuBX,GArBAe,GAAGkL,GAAO,KACVlL,GAAG8T,IAAW,EACd9T,GAAGwW,IAAgB,EACnBxW,GAAG6U,IAAmB,EAEtB7U,GAAG2J,GAAY,KACf3J,GAAG6S,GAAa,KAChB7S,GAAGyW,GAAc,KACjBzW,GAAG0W,GAAiB,KACpB1W,GAAGsO,EAAMkD,KAAKC,MAEdzR,GAAGkL,GAAOA,EACVlL,GAAG8T,GAAW5I,EAAIzE,MAAQyE,EAAI0K,SAAoC,GAAzB1K,EAAIzE,IAAI+B,QAAQ,MAEzDxI,GAAGkV,GAAWhK,EAAIgK,SAAW,CAAA,EAC7BlV,GAAGiT,GAAU/H,EAAI+H,QAAU,CAAA,EAE3BjT,GAAG2J,GAAYuB,EAAI1F,oBAAoBsD,cAAgBoC,EAAI1F,SAAW,KACtExF,GAAGwW,GAAgD,IAAhCtL,EAAI0K,QAAQpN,QAAQ,QACvCxI,GAAG6U,GAAiD,IAA9B3J,EAAI0K,QAAQpN,QAAQ,OAEM,KAA3CxI,EAAGwW,cAAgBxW,EAAG6U,iBAC1B,MAAM,IAAInW,MA5DS,+CA+DpB,CAKD2M,aAEC,MAAMrL,EAAKf,KACX,IAAIe,EAAG2W,SAeP,OAbK3W,GAAG2J,KAAW3J,GAAG2J,SAAkBb,cAAc8N,UACtD5W,GAAG6S,GAAa,IAAI9D,eAAe/O,EAAGsO,KAElCtO,EAAGwW,cAA8B,GAAdxW,EAAG8T,WACzB9T,GAAGyW,GAAc,IAAI/B,sBACf1U,EAAGyW,WAAWxP,KAAKjH,IAGtBA,EAAG6U,kBACN7U,GAAG0W,GAAiB,IAAIxE,yBAClBlS,EAAG0W,cAAczP,KAAKjH,IAGtBA,CACP,CAMDqL,kBAAkBzM,GAEjB,MAAMoB,EAAKf,KAGPL,EAAKoI,YAAchH,EAAG2J,UAAU9D,eAC7B7F,EAAG2J,UAAU1C,KAAKrI,IAGzBoB,EAAG6S,WAAWpD,MAAM7Q,EAAK6H,IACzB,CAMDyI,OAEC,MAAMlP,EAAKf,KAEXe,EAAGyW,YAAYvH,OACflP,EAAG0W,eAAexH,OAClBlP,EAAG6S,WAAW3D,OAEdlP,GAAGyW,GAAc,KACjBzW,GAAG0W,GAAiB,KACpB1W,GAAG6S,GAAa,KAChB7S,GAAG2J,GAAY,KACf3J,GAAGkL,GAAO,IACV,CAKGzE,UACH,OAAOxH,KAAK4T,WAAWpM,KAAO,IAC9B,CAKGkQ,eACH,MAAM3W,EAAKf,KACX,QAAIe,EAAG0W,gBAAkB1W,EAAG0W,cAAclE,YACnCxS,EAAGyG,MAAOzG,EAAG2J,SACpB,CAKGiL,aACH,OAAO3V,KAAKiM,KAAKzE,KAAO,IACxB,CAKGuM,iBACH,OAAO/T,KAAKiM,KAAK0K,SAAW,IAC5B,CAEG1K,UAAQ,OAAOjM,MAAKiM,EAAM,CAC1B4I,cAAY,OAAO7U,MAAK6U,EAAU,CAClC0C,mBAAiB,OAAOvX,MAAKuX,EAAe,CAC5C3B,sBAAoB,OAAO5V,MAAK4V,EAAkB,CAElDlL,eAAa,OAAO1K,MAAK0K,EAAY,CACrCkJ,gBAAc,OAAO5T,MAAK4T,EAAa,CACvC4D,iBAAe,OAAOxX,MAAKwX,EAAc,CACzCC,oBAAkB,OAAOzX,MAAKyX,EAAiB,CAE/CxB,cAAY,OAAOjW,MAAKiW,EAAW,CACnCjC,aAAW,OAAOhU,MAAKgU,EAAU,CACjC3E,SAAO,OAAOrP,MAAKqP,CAAM,CAK7BnP,kBAAkB+L,GAEjB,OADe,IAAIqL,YAAYrL,GACjBjE,MACd"}