{"version":3,"file":"io.greenscreens.quark.esm.min.js","sources":["../modules/core/Buffer.mjs","../modules/core/Event.mjs","../modules/core/Streams.mjs","../modules/core/Security.mjs","../modules/core/Queue.mjs","../modules/core/Request.mjs","../modules/core/Generator.mjs","../modules/core/SocketChannel.mjs","../modules/core/WebChannel.mjs","../modules/core/QuarkEngine.mjs"],"sourcesContent":["/*\r\n * Copyright (C) 2015, 2023 Green Screens Ltd.\r\n */\r\n\r\nexport default class QuarkBuffer {\r\n\r\n\tstatic #encoder = new TextEncoder();\r\n\tstatic #decoder = new TextDecoder();\r\n\r\n\t/**\r\n\t * Detect data and convert to Uint8Array\r\n\t * \r\n\t * @param {variant}\r\n\t * @returns {variant}\r\n\t */\r\n\tstatic validateData(src) {\r\n\t\tlet data = null;\r\n\t\tif (src instanceof Array) {\r\n\t\t\tdata = new Uint8Array(src);\r\n\t\t} else if (src instanceof ArrayBuffer) {\r\n\t\t\tdata = new Uint8Array(src);\r\n\t\t} else if (src instanceof Uint8Array) {\r\n\t\t\tdata = src;\r\n\t\t} else if (src instanceof String || typeof src === 'string') {\r\n\t\t\tdata = QuarkBuffer.fromText(src);\r\n\t\t} else if (src.toArrayBuffer) {\r\n\t\t\tdata = new Uint8Array(src.toArrayBuffer());\r\n\t\t} else {\r\n\t\t\tthrow \"Invalid input, must be String or ArrayBuffer or Uint8Array\";\r\n\t\t}\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * Verify if data is string\r\n\t * @param {*} data \r\n\t * @returns \r\n\t */\r\n\tstatic isString(data) {\r\n\t\treturn typeof data === 'string';\r\n\t}\r\n\r\n\t/**\r\n\t * Check if string is hex string\r\n\t * @param {*} data \r\n\t * @returns \r\n\t */\r\n\tstatic isHexString(data) {\r\n\t\treturn QuarkBuffer.isString(data) ? (/^[0-9A-Fa-f]+$/g).test(data) : false;\r\n\t}\r\n\r\n\tstatic toBuffer(data, b64 = false) {\r\n\t\tconst me = QuarkBuffer;\r\n\t\tif (me.isString(data)) {\r\n\t\t\tif (b64) {\r\n\t\t\t\tdata = me.fromBase64(data);\r\n\t\t\t} else if (me.isHexString(data)) {\r\n\t\t\t\tdata = me.fromHex(data);\r\n\t\t\t} else {\r\n\t\t\t\tdata = me.fromText(data);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn me.validateData(data);\r\n\t}\r\n\r\n\tstatic toText(val) {\r\n\t\treturn QuarkBuffer.isText(val) ? val : QuarkBuffer.#decoder.decode(val);\r\n\t}\r\n\r\n\tstatic fromText(val) {\r\n\t\treturn QuarkBuffer.isText(val) ? QuarkBuffer.#encoder.encode(val) : val;\r\n\t}\r\n\r\n\tstatic isText(val) {\r\n\t\treturn typeof val === 'string';\r\n\t}\r\n\r\n\tstatic fromHex(value) {\r\n\r\n\t\tconst arry = [];\r\n\r\n\t\tfor (let i = 0; i < value.length; i += 2) {\r\n\t\t\tarry.push(parseInt(\"0x\" + value.substr(i, 2), 16));\r\n\t\t}\r\n\r\n\t\treturn new Uint8Array(arry);\r\n\t}\r\n\r\n\tstatic toHex(buffer) {\r\n\t\treturn Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('');\r\n\t}\r\n\r\n\tstatic fromBase64(value) {\r\n\r\n\t\tconst strbin = atob(value);\r\n\t\tconst buffer = new ArrayBuffer(strbin.length);\r\n\t\tconst bufView = new Uint8Array(buffer);\r\n\r\n\t\tfor (let i = 0, strLen = strbin.length; i < strLen; i++) {\r\n\t\t\tbufView[i] = strbin.charCodeAt(i);\r\n\t\t}\r\n\r\n\t\treturn bufView;\r\n\t}\r\n\r\n\tstatic toBase64(buffer) {\r\n\t\tbuffer = QuarkBuffer.toBuffer(buffer);\r\n\t\treturn btoa(buffer.reduce((data, val) => {\r\n\t\t\treturn data + String.fromCharCode(val);\r\n\t\t}, ''));\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * A module loading Event class\r\n * @module Events\r\n */\r\n\r\n/**\r\n * Extends native event by adding helper functions\r\n */\r\nexport default class QuarkEvent extends EventTarget {\r\n\r\n    #listeners = new Set();\r\n\r\n    #list(type = '', listener) {\r\n        const me = this;\r\n        const list = Array.from(me.#listeners);\r\n        return QuarkEvent.#isFunction(listener) ?\r\n            list.filter(o => o.type === type && o.listener === listener)\r\n            :\r\n            list.filter(o => o.type === type);\r\n    }\r\n\r\n    addEventListener(type, listener, opt) {\r\n        const me = this;\r\n        if (!QuarkEvent.#isFunction(listener)) return false;\r\n        me.#listeners.add({ type: type, listener: listener });\r\n        return super.addEventListener(type, listener, opt);\r\n    }\r\n\r\n    removeEventListener(type, listener) {\r\n        const me = this;\r\n        const list = me.#list(type, listener);\r\n        list.forEach(o => super.removeEventListener(o.type, o.listener))\r\n        list.forEach(o => me.#listeners.delete(o));\r\n    }\r\n\r\n    /**\r\n     * Remove all listeners\r\n     */\r\n    unbind() {\r\n        const me = this;\r\n        Array.from(me.#listeners).forEach(o => {\r\n            super.removeEventListener(o.type, o.listener);\r\n        });\r\n        me.#listeners.clear();\r\n    }\r\n\r\n    /**\r\n     * Listen for events\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    on(type = '', listener) {\r\n        return this.addEventListener(type, listener);\r\n    }\r\n\r\n    /**\r\n     * Listen for events only once\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    once(type, listener) {\r\n        const me = this;\r\n        let wrap = (e) => {\r\n            listener(e);\r\n            wrap = null;\r\n        }\r\n        wrap.type = type;\r\n        wrap.listener = listener;\r\n        return me.addEventListener(type, wrap, { once: true });\r\n    }\r\n\r\n    /**\r\n     * Stop listening for events\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    off(type = '', listener) {\r\n        return this.removeEventListener(type, listener);\r\n    }\r\n\r\n    /**\r\n     * Send event to listeners\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {object} data  Data to send \r\n     */\r\n    emit(type, data) {\r\n        if (!type) return false;\r\n        const evt = new CustomEvent(type, { detail: data });\r\n        return this.dispatchEvent(evt);\r\n    }\r\n\r\n    send(type, data) { this.emit(type, data); }\r\n    listen(type, listener) { this.on(type, listener); }\r\n    unlisten(type, listener) { this.off(type, listener); }\r\n\r\n    /**\r\n     * Wait for an event \r\n     * @param {string} type Event name to be listened\r\n     * @returns {Event}\r\n     */\r\n    wait(type = '') {\r\n        if (!type) return e('Event undefined!');\r\n        const me = this;\r\n        return new Promise((r, e) => {\r\n            me.once(type, (e) => r(e));\r\n        });\r\n    }\r\n\r\n    static #isFunction(fn) {\r\n        return typeof fn === 'function';\r\n    }\r\n\r\n    /**\r\n     * Generic prevent event bubling\r\n     * \r\n     * @param {Event} e \r\n     */\r\n    static prevent(e) {\r\n        if (QuarkEvent.#isFunction(e, 'preventDefault')) e.preventDefault();\r\n        if (QuarkEvent.#isFunction(e, 'stopPropagation')) e.stopPropagation();\r\n    }\r\n\r\n    static {\r\n        Object.freeze(QuarkEvent);\r\n    }\r\n\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport QuarkBuffer from './Buffer.mjs';\r\n\r\n/**\r\n * Browser native compression\r\n */\r\nexport default class QuarkStreams {\r\n\r\n\tstatic get isAvailable() {\r\n\t\treturn typeof CompressionStream !== 'undefined' &&\r\n\t\t\ttypeof DecompressionStream !== 'undefined';\r\n\t}\r\n\r\n\t/**\r\n\t * Stream header GS[version(5)][type(0|1|2|3)][len]\r\n\t * type: 0 - utf8 binary string, 1 - compressed, 2 - encrypted, 3 - 1 & 2\r\n\t * new Uint8Array([71, 83, 5, type, 0, 0, 0, 0]);\r\n\t * @param {Uint8Array} data\r\n\t * @returns {Uint8Array}\r\n\t */\r\n\tstatic #toGS(raw, encrypted = false, compressed = false) {\r\n\t\tif (!raw instanceof Uint8Array) return raw;\r\n\t\tconst type = QuarkStreams.#dataType(encrypted, compressed);\r\n\r\n\t\tconst data = new Uint8Array(8 + raw.length);\r\n\t\tconst dv = new DataView(data.buffer);\r\n\t\tdv.setUint8(0, 71);\r\n\t\tdv.setUint8(1, 83);\r\n\t\tdv.setUint8(2, 5);\r\n\t\tdv.setUint8(3, type);\r\n\t\tdv.setUint32(4, raw.length);\r\n\t\tdata.set(raw, 8);\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * Encode binary message to GS binary format\r\n\t * @param {*} raw \r\n\t * @param {*} security \r\n\t */\r\n\tstatic async wrap(raw, security) {\r\n\t\traw = QuarkStreams.toBinary(raw);\r\n\t\traw = await QuarkStreams.compressOrDefault(raw);\r\n\t\traw = await security.encrypt(raw);\r\n\t\traw = QuarkStreams.#toGS(raw, security.isValid, QuarkStreams.isAvailable);\r\n\t\t/*\r\n\t\tif (globalThis.QUARK_DEBUG) {\r\n\t\t\tconsole.log('DEBUG: Output :', QuarkBuffer.toHex(raw));\r\n\t\t}\r\n\t\t*/\r\n\t\treturn raw;\r\n\t}\r\n\r\n\t/**\r\n\t * Decode binary message from GS binary format\r\n\t * @param {*} raw \r\n\t * @param {*} security \r\n\t */\r\n\tstatic async unwrap(raw, security, challenge) {\r\n\r\n\t\tif (raw instanceof Uint8Array) raw = raw.buffer;\r\n\r\n\t\t/*\r\n\t\tif (globalThis.QUARK_DEBUG) {\r\n\t\t\tconsole.log('DEBUG: Input :', QuarkBuffer.toHex(raw));\r\n\t\t}\r\n\t\t*/\r\n\t\tconst dv = new DataView(raw);\r\n\t\tconst isGS = QuarkStreams.#isGS(dv);\r\n\r\n\t\traw = Streams.toBinary(raw);\r\n\t\tif (!isGS) return raw;\r\n\r\n\t\tconst type = dv.getUint8(3);\r\n\t\tconst len = dv.getUint32(4);\r\n\r\n\t\tif (dv.byteLength !== len + 8) return raw;\r\n\r\n\t\traw = raw.slice(8);\r\n\r\n\t\tconst isCompress = QuarkStreams.isCompressFlag(type);\r\n\t\tconst isEncrypt = QuarkStreams.isEncryptFlag(type);\r\n\t\tconst isApi = QuarkStreams.isApiFlag(type);\r\n\r\n\t\tlet api = null;\r\n\t\tif (isApi) {\r\n\t\t\tconst encLen = dv.getUint32(8);\r\n\t\t\tconst verLen = dv.getUint32(8 + 4 + encLen);\r\n\t\t\tconst sgnLen = dv.getUint32(8 + 4 + encLen + 4 + verLen);\r\n\r\n\t\t\tapi = {\r\n\t\t\t\tchallenge: challenge,\r\n\t\t\t\tkeyEnc: (raw.slice(4, 4 + encLen)),\r\n\t\t\t\tkeyVer: (raw.slice(4 + encLen + 4, 4 + encLen + 4 + verLen)),\r\n\t\t\t\tsignature: (raw.slice(4 + encLen + 4 + verLen + 4, 4 + encLen + 4 + verLen + 4 + sgnLen))\r\n\t\t\t};\r\n\r\n\t\t\tawait security.init(api);\r\n\t\t\traw = raw.slice((4 * 3) + encLen + verLen + sgnLen);\r\n\t\t}\r\n\r\n\r\n\t\tif (isEncrypt) {\r\n\t\t\traw = await security?.decrypt(raw);\r\n\t\t}\r\n\r\n\t\tif (isCompress) {\r\n\t\t\traw = await QuarkStreams.decompress(raw).arrayBuffer();\r\n\t\t}\r\n\r\n\t\traw = QuarkStreams.toBinary(raw);\r\n\t\tif (!QuarkStreams.isJson(raw)) throw new Error('Invalid response');\r\n\r\n\t\treturn JSON.parse(QuarkBuffer.toText(raw));\r\n\t}\r\n\r\n\t/**\r\n\t * Check if DataView id GS data format\r\n\t * @param {*} dv \r\n\t * @returns \r\n\t */\r\n\tstatic #isGS(dv) {\r\n\t\treturn dv.byteLength > 8 && dv.getUint16(0) === 18259 && dv.getUint8(2) === 5;\r\n\t}\r\n\r\n\tstatic isCompressFlag(type) {\r\n\t\treturn (type & 1) === 1;\r\n\t}\r\n\r\n\tstatic isEncryptFlag(type) {\r\n\t\treturn (type & 2) === 2;\r\n\t}\r\n\r\n\tstatic isApiFlag(type) {\r\n\t\treturn (type & 4) === 4;\r\n\t}\r\n\r\n\tstatic #dataType(isEncrypt, isCompress) {\r\n\t\tconst type = isCompress ? 1 : 0;\r\n\t\treturn type | (isEncrypt ? 2 : 0);\r\n\t}\r\n\r\n\tstatic #stream(data, stream) {\r\n\t\tconst me = this;\r\n\t\tconst byteArray = me.toBinary(data);\r\n\t\tconst writer = stream.writable.getWriter();\r\n\t\twriter.write(byteArray);\r\n\t\twriter.close();\r\n\t\treturn new Response(stream.readable);\r\n\t}\r\n\r\n\t/**\r\n\t * If compression available, compress, \r\n\t * else return original value\r\n\t * @param {*} data \r\n\t * @param {*} encoding \r\n\t */\r\n\tstatic async compressOrDefault(data, encoding = 'gzip') {\r\n\t\tif (!QuarkStreams.isAvailable) return data;\r\n\t\tconst raw = await QuarkStreams.compress(data, encoding).arrayBuffer();\r\n\t\treturn Streams.toBinary(raw);\r\n\t}\r\n\r\n\t/**\r\n\t * If decompression available, decompress, \r\n\t * else return original value\r\n\t * @param {*} data \r\n\t * @param {*} encoding \r\n\t */\r\n\tstatic async decompressOrDefault(data, encoding = 'gzip') {\r\n\t\tif (!QuarkStreams.isAvailable) return data;\r\n\t\tconst raw = await QuarkStreams.decompress(data, encoding).arrayBuffer();\r\n\t\treturn QuarkStreams.toBinary(raw);\r\n\t}\r\n\r\n\t/**\r\n\t * Compress to gzip format\r\n\t * @param {*} data \r\n\t * @param {*} encoding gzip | deflate (zlib)\r\n\t * @returns {Response} \r\n\t */\r\n\tstatic compress(data, encoding = 'gzip') {\r\n\t\tconst stream = new CompressionStream(encoding);\r\n\t\treturn this.#stream(data, stream);\r\n\t}\r\n\r\n\t/**\r\n\t * Decompress from gzip format\r\n\t * @param {*} data \r\n\t * @param {*} encoding gzip | deflate (zlib)\r\n\t * @returns {Response} \r\n\t */\r\n\tstatic decompress(data, encoding = 'gzip') {\r\n\t\tconst stream = new DecompressionStream(encoding);\r\n\t\treturn this.#stream(data, stream);\r\n\t}\r\n\r\n\tstatic toBinary(data) {\r\n\t\tif (data instanceof Uint8Array) return data;\r\n\t\tif (data instanceof ArrayBuffer) return new Uint8Array(data);\r\n\t\tif (typeof data === 'string') return QuarkBuffer.fromText(data);\r\n\t\treturn this.toBinary(JSON.stringify(data));\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 2 bytes mathes gzip/deflate header signature\r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\r\n\tstatic isCompressed(data) {\r\n\t\tconst me = this;\r\n\t\tdata = me.toBinary(data);\r\n\t\treturn me.isGzip(data); // || me.isZlib(data);\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 3 bytes matches gzip header signature\r\n\t * \r\n\t * zlib\r\n\t * 1F 8B 08\r\n\t * 31 139 8\r\n\t * \r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\r\n\tstatic isGzip(data) {\r\n\t\treturn data.at(0) === 31 && data.at(1) === 139 && data.at(2) === 8;\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 2 bytes matches deflate (zlib) header signature\r\n\t * \r\n\t * deflate\r\n\t * 78  (01, 5e,9c, da) \r\n\t * 120 (1, 94, 156, 218)\r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\r\n\tstatic isZlib(data) {\r\n\t\treturn data.at(0) === 120 && [1, 94, 156, 218].indexOf(data.at(1)) > -1;\r\n\t}\r\n\r\n\tstatic isJson(data) {\r\n\t\tconst me = this;\r\n\t\tdata = typeof data === 'string' ? data.trim() : me.toBinary(data);\r\n\t\tconst first = data.at(0);\r\n\t\tconst last = data.at(data.length - 1);\r\n\t\treturn me.#isJsonArray(first, last) || me.#isJsonObj(first, last);\r\n\t}\r\n\r\n\tstatic #isJsonObj(first, last) {\r\n\t\treturn (first === '{' || first === 123) && (last === '}' || last === 125);\r\n\t}\r\n\r\n\tstatic #isJsonArray(first, last) {\r\n\t\treturn (first === '[' || first === 91) && (last === ']' || last === 93);\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2023 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Security engine using Web Crypto API to encrypt / decrypt\r\n * messages between browser and server.\r\n *\r\n */\r\n\r\nimport QuarkBuffer from \"./Buffer.mjs\";\r\n\r\nexport default class QuarkSecurity {\r\n\r\n    static #ECDH_TYPE = { name: 'ECDH', namedCurve: \"P-256\" };\r\n    static #ECDSA_TYPE = { name: 'ECDSA', namedCurve: \"P-384\" };\r\n    static #VERIFY = { name: 'ECDSA', hash: \"SHA-384\" };\r\n    static #AES_TYPE = { name: \"AES-CTR\", length: 256 };\r\n\r\n    #publicKey = null;\r\n    #keyPair = null;\r\n    #aesKey = null;\r\n\r\n    /**\r\n     * Create random bytes\r\n     *\r\n     * @param {int} size\r\n     *     length of data (required)\r\n     */\r\n    static getRandom(size) {\r\n        const array = new Uint8Array(size);\r\n        crypto.getRandomValues(array);\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * Initialize browser ECDH key pair \r\n     */\r\n    static initKeyPair() {\r\n        const use = ['deriveKey', 'deriveBits'];\r\n        return crypto.subtle.generateKey(Security.#ECDH_TYPE, true, use);\r\n    }\r\n\r\n    /**\r\n     * Import Async key received from server\r\n     * Key is publicKey used to send encrypted AES key\r\n     *\r\n     * @param {String} key PEM encoded key\r\n     * @param {Object} type Crypto API key definition format\r\n     * @param {String} mode Comma separted list of key usages \r\n     */\r\n    static async importKey(key, type, mode) {\r\n        const der = QuarkBuffer.toBuffer(key, true);\r\n        const use = mode ? mode.split(',') : [];\r\n        return crypto.subtle.importKey('spki', der, type, true, use);\r\n    }\r\n\r\n    /**\r\n     * Export key in hex form\r\n     * @param {CryptoKey} key\r\n     * @returns {string}\r\n     */\r\n    static async exportKey(key) {\r\n        const ab = await crypto.subtle.exportKey('raw', key);\r\n        return QuarkBuffer.toHex(ab);\r\n    }\r\n\r\n    /**\r\n     * Verify signature\r\n     *\r\n     * @param {CryptoKey} Public key used for verification\r\n     * @param {ArrayBuffer} signature Signature of received data\r\n     * @param {ArrayBuffer} challenge Challenge to verify with signature (ts + pemENCDEC + pemVERSGN)\r\n     */\r\n    static async verify(key, signature, challenge) {\r\n        signature = QuarkBuffer.toBuffer(signature, true);\r\n        challenge = QuarkBuffer.toBuffer(challenge);\r\n        const type = QuarkSecurity.#VERIFY;\r\n        return crypto.subtle.verify(type, key, signature, challenge);\r\n    }\r\n\r\n    /**\r\n     * Sign data with HMAC\r\n     * @param {CryptoKey} Private key used for verification\r\n     * @param {ArrayBuffer} data Data to sign\r\n     */\r\n    static async sign(key, data) {\r\n        data = QuarkBuffer.toBuffer(data);\r\n        return crypto.subtle.sign('ECDSA', key, data);\r\n    }\r\n\r\n    get publicKey() { return this.#publicKey; }\r\n\r\n    cookie(path = \"/\") {\r\n        return `gs-public-key=${this.#publicKey || ''};path=${path}`;\r\n    }\r\n\r\n    updateCookie(path = \"/\") {\r\n        document.cookie = this.cookie(path);\r\n    }\r\n\r\n    /**\r\n     *  Use local challenge, to verify received data signature\r\n     *\r\n     *  @param {Object} cfg Data received from server contins public key and signature\r\n     */\r\n    #getChallenge(cfg) {\r\n        const me = this;\r\n        return [cfg.challenge || '', me.#toChallenge(cfg.keyEnc) || '', me.#toChallenge(cfg.keyVer) || ''].join('');\r\n    }\r\n\r\n    #toChallenge(val) {\r\n        return QuarkBuffer.isText(val) ? val : QuarkBuffer.toBase64(val);\r\n    }\r\n\r\n    async #initVerify(cfg) {\r\n        const me = this;\r\n        const type = QuarkSecurity.#ECDSA_TYPE;\r\n        const verKey = await QuarkSecurity.importKey(cfg.keyVer, type, 'verify');\r\n        const status = await QuarkSecurity.verify(verKey, cfg.signature, me.#getChallenge(cfg));\r\n        if (!status) throw new Error('Signature invalid');\r\n    }\r\n\r\n    /**\r\n     * Initialize server public key\r\n     * @param {object} cfg \r\n     */\r\n    #initPublic(cfg) {\r\n        return QuarkSecurity.importKey(cfg.keyEnc, QuarkSecurity.#ECDH_TYPE, '');\r\n    }\r\n\r\n    /**\r\n     * Derive shared secret from server public ECDH and browser keypair.private ECDH\r\n     * @returns {CryptoKey}\r\n     */\r\n    #deriveAES(priv, pub) {\r\n        const pubDef = { name: \"ECDH\", public: pub };\r\n        const use = ['encrypt', 'decrypt'];\r\n        const derivedKey = QuarkSecurity.#AES_TYPE;\r\n        const dbg = false; // globalThis.QUARK_DEBUG === true;\r\n        return crypto.subtle.deriveKey(pubDef, priv, derivedKey, dbg, use);\r\n    }\r\n\r\n    #toAlgo(iv) {\r\n        iv = QuarkBuffer.toBuffer(iv);\r\n        const type = Object.assign({ counter: iv }, QuarkSecurity.#AES_TYPE);\r\n        type.length = 128;\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Encrypt message with AES\r\n     * @param {CryptoKey} key \r\n     * @param {ArrayBuffer} iv IV as Hex string \r\n     * @param {ArrayBuffer} data as Hex string \r\n     */\r\n    async encryptRaw(key, iv, data) {\r\n        const databin = QuarkBuffer.toBuffer(data);\r\n        const type = this.#toAlgo(iv);\r\n        return crypto.subtle.encrypt(type, key, databin);\r\n    }\r\n\r\n    /**\r\n     * Decrypt AES encrypted message\r\n     * @param {CryptoKey} key \r\n     * @param {ArrayBuffer} iv IV as Hex string \r\n     * @param {ArrayBuffer} data as Hex string \r\n     */\r\n    async decryptRaw(key, iv, data) {\r\n        const databin = QuarkBuffer.toBuffer(data);\r\n        const type = this.#toAlgo(iv);\r\n        return crypto.subtle.decrypt(type, key, databin);\r\n    }\r\n\r\n    async decryptAsBuffer(key, iv, data) {\r\n        const result = await this.decryptRaw(key, iv, data);\r\n        return QuarkBuffer.toBuffer(result);\r\n    }\r\n\r\n    async encryptAsBuffer(key, iv, data) {\r\n        const result = await this.encryptRaw(key, iv, data);\r\n        return QuarkBuffer.toBuffer(result);\r\n    }\r\n\r\n    async decryptAsString(key, iv, data) {\r\n        const result = await this.decryptRaw(key, iv, data);\r\n        return QuarkBuffer.toText(result);\r\n    }\r\n\r\n    async encryptAsHex(key, iv, data) {\r\n        const result = await this.encryptRaw(key, iv, data);\r\n        return QuarkBuffer.toHex(result);\r\n    }\r\n\r\n    get isValid() {\r\n        const me = this;\r\n        return me.#publicKey !== null && me.#aesKey !== null;\r\n    }\r\n\r\n    static get isAvailable() {\r\n        return crypto.subtle ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Initialize encryption and verification keys\r\n     * Verifies data signatures to prevent tampering\r\n     */\r\n    async init(cfg) {\r\n\r\n        if (!QuarkSecurity.isAvailable) {\r\n            console.log('Security mode not available, TLS protocol required.');\r\n            return;\r\n        }\r\n\r\n        console.log('Security Initializing...');\r\n        const me = this;\r\n\r\n        await me.#initVerify(cfg);\r\n\r\n        const publicKey = await me.#initPublic(cfg);\r\n        me.#aesKey = await me.#deriveAES(me.#keyPair.privateKey, publicKey);\r\n        me.#keyPair = null;\r\n\r\n        console.log('Security Initialized!');\r\n\r\n    }\r\n\r\n    /**\r\n     * Encrypt provided data\r\n     * @param {Uint8Array} data Data to encrypt\r\n     * @returns {Uint8Array} [head+iv+data]\r\n     */\r\n    async encrypt(data) {\r\n        const me = this;\r\n        if (!me.isValid) return data;\r\n        if (!data instanceof Uint8Array) return data;\r\n        const iv = QuarkSecurity.getRandom(16);\r\n        const d = await me.encryptAsBuffer(me.#aesKey, iv, data);\r\n\r\n        const raw = new Uint8Array(iv.length + d.length);\r\n        raw.set(iv, 0);\r\n        raw.set(d, iv.length);\r\n        return raw;\r\n    }\r\n\r\n    /**\r\n     * Decrypt received data in format {d:.., k:...}\r\n     *\r\n     * @param {ArrayBuffer|Uint8Array} data\r\n     * @param {ArrayBuffer|Uint8Array} iv\r\n     * @return \r\n     */\r\n    async decrypt(data, iv) {\r\n\r\n        const me = this;\r\n\r\n        if (!iv) {\r\n            iv = data.slice(0, 16);\r\n            data = data.slice(16);\r\n        }\r\n\r\n        return await me.decryptAsBuffer(me.#aesKey, iv, data);\r\n    }\r\n\r\n    async #preInit() {\r\n        const me = this;\r\n        me.#keyPair = await QuarkSecurity.initKeyPair();\r\n        me.#publicKey = await QuarkSecurity.exportKey(me.#keyPair.publicKey);\r\n    }\r\n\r\n    static async create(cfg) {\r\n        const security = new QuarkSecurity();\r\n        await security.#preInit();\r\n        if (cfg) await security.init(cfg);\r\n        return security;\r\n    }\r\n\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Queue to handle requests\r\n */\r\nexport default class QuarkQueue extends Map {\r\n\r\n\t#up = 0;\r\n\t#down = 0;\r\n\t#tid = 0;\r\n\r\n\t/**\r\n\t * Update counters and queue to link resposnes to requests\r\n\t * @param {Object} req\r\n\t *      Request data\r\n\t */\r\n\tupdateRequest(req) {\r\n\t\tconst me = this;\r\n\t\tme.#tid++;\r\n\t\tme.#up++;\r\n\t\treq.tid = me.#tid.toString();\r\n\t\tme.set(req.tid, req);\r\n\t}\r\n\r\n\t/**\r\n\t * Reset queue to remove old stalled elements\r\n\t */\r\n\treset() {\r\n\t\tconst me = this;\r\n\t\tif (me.#up > 50 && me.#down >= me.#up) {\r\n\t\t\tme.#up = 0;\r\n\t\t\tme.#down = 0;\r\n\t\t\tme.clear();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Process array of response records\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\tprocess(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst unknown = [];\r\n\r\n\t\tif (Array.isArray(obj)) {\r\n\t\t\tobj.forEach((o) => {\r\n\t\t\t\tconst res = me.execute(o);\r\n\t\t\t\tif (res) unkown.push(res);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconst o = me.execute(obj);\r\n\t\t\tif (o) unknown.push(o);\r\n\t\t}\r\n\r\n\t\treturn unknown;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Process single response record\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\texecute(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst tid = obj.tid;\r\n\t\tlet unknown = null;\r\n\r\n\t\tme.#down++;\r\n\r\n\t\tif (me.has(tid)) {\r\n\t\t\tconst req = me.get(tid);\r\n\t\t\ttry {\r\n\t\t\t\treq.finish(obj);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log(e);\r\n\t\t\t\treq.finish(e);\r\n\t\t\t} finally {\r\n\t\t\t\tme.delete(tid);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tunknown = obj;\r\n\t\t}\r\n\r\n\t\tme.reset();\r\n\r\n\t\treturn unknown;\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * API engine asynchronous request\r\n */\r\nexport default class QuarkRequest {\r\n\r\n    #id = 0;\r\n    #timeout = 0;\r\n    #callback;\r\n\r\n    constructor(timeout, callback) {\r\n        const me = this;\r\n        me.#callback = callback;\r\n        me.#timeout = timeout;\r\n        me.#init();\r\n    }\r\n\r\n    get(object, property) {\r\n        const me = this;\r\n        if (property === 'timeout') return me.timeout;\r\n        if (property === 'finish') return me.callback.bind(me);\r\n        return object[property];\r\n    }\r\n\r\n    callback(o) {\r\n        const me = this;\r\n        if (me.timeout) return;\r\n        me.#clear();\r\n        return me.#callback(o);\r\n    }\r\n\r\n    get timeout() {\r\n        return this.#timeout === true;\r\n    }\r\n\r\n    #clear() {\r\n        const me = this;\r\n        if (me.#id === 0) return;\r\n        clearTimeout(me.#id);\r\n    }\r\n\r\n    #init() {\r\n        const me = this;\r\n        if (me.#timeout === 0) return;\r\n        me.#id = setTimeout(() => {\r\n            me.#timeout = true;\r\n            me.#callback(new Error('Call timeouted!'));\r\n        }, me.#timeout);\r\n    }\r\n\r\n    static wrap(data, timeout, callback) {\r\n        return new Proxy(data, new QuarkRequest(timeout, callback));\r\n    }\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport QuarkEvent from \"./Event.mjs\";\r\nimport Request from \"./Request.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to call remote services.\r\n * All Direct functions linked to defiend namespace\r\n */\r\nexport default class QuarkGenerator extends QuarkEvent {\r\n\r\n\t#model = {};\r\n\t#id = null;\r\n\t#cnt = 0;\r\n\t#timeout = 0;\r\n\r\n\tconstructor(id = 0, timeout = 0) {\r\n\t\tsuper();\r\n\t\tthis.#id = id;\r\n\t\tthis.#timeout = timeout;\r\n\t}\r\n\r\n\t/**\r\n\t * Return generted API structure and callers\r\n\t */\r\n\tget api() {\r\n\t\treturn this.#model;\r\n\t}\r\n\r\n\t/**\r\n\t * Disconnect generator from API callers\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\t\tme.off('call');\r\n\t\tme.off('api');\r\n\t\tme.off('raw');\r\n\t\tme.off('error');\r\n\t\tme.#detach();\r\n\t}\r\n\r\n\t#cleanup(obj, id) {\r\n\t\tfor (let k in obj) {\r\n\t\t\tlet el = obj[k];\r\n\t\t\tif (typeof el === 'object') {\r\n\t\t\t\tif (this.#cleanup(el, id)) obj[k] = null;\r\n\t\t\t} else if (el._id_ === id) {\r\n\t\t\t\tobj[k] = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Object.values(obj).filter(o => o != null).length === 0;\r\n\t}\r\n\r\n\t#detach() {\r\n\t\tconst me = this;\r\n\t\tme.#cleanup(me.#model, me.#id);\r\n\t\tme.#model = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Build JS object with callable functions that maps to Java side methods\r\n\t * Data is retrieved from API service\r\n\t *\r\n\t * @param {String} url || api object\r\n\t * \t\t  URL Address for API service definitions\r\n\t */\r\n\tbuild(o) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst data = o ? o.api || o : null;\r\n\r\n\t\tif (data) me.#buildAPI(data);\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * From API tree generate namespace tree and\r\n\t * links generated functions to WebScoket api calls\r\n\t *\r\n\t * @param {Object} cfg\r\n\t * \t\tAlternative definition to API\r\n\t */\r\n\t#buildAPI(cfg) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (Array.isArray(cfg)) {\r\n\t\t\tcfg.forEach(v => me.#buildInstance(v));\r\n\t\t} else {\r\n\t\t\tme.#buildInstance(cfg);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Build from single definition\r\n\t *\r\n\t * @param {Object} api\r\n\t * \t\t  Java Class/Method definition\r\n\t */\r\n\t#buildInstance(api) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet tree = null;\r\n\t\tlet action = null;\r\n\r\n\t\ttree = me.#buildNamespace(api.namespace);\r\n\r\n\t\tif (!tree[api.action]) {\r\n\t\t\ttree[api.action] = {};\r\n\t\t}\r\n\t\taction = tree[api.action];\r\n\r\n\t\tme.#reduce(api.methods)?.forEach(v => me.#buildMethod(action, v, me.#id));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Reduce duplicate methods with parameters overrides\r\n\t * @param {Array<Object>} list \r\n\t * @returns \r\n\t */\r\n\t#reduce(list) {\r\n\t\treturn list.reduce((a, v, i, ar) => {\r\n\r\n\t\t\tif (a.filter(r => r.name == v.name).length == 1) return a;\r\n\r\n\t\t\tconst objs = ar.filter(r => r.name == v.name);\r\n\t\t\tif (objs.length === 1) {\r\n\t\t\t\ta.push(v);\r\n\t\t\t\treturn a;\r\n\t\t\t}\r\n\r\n\t\t\tconst obj = objs.filter(r => r.name === v.name).reduce((a, v) => {\r\n\t\t\t\ta.mid.push(v.mid);\r\n\t\t\t\ta.len.push(v.len);\r\n\t\t\t\ta.async[v.len] = v.async;\r\n\t\t\t\treturn a;\r\n\t\t\t}, { name: v.name, mid: [], len: [], async: {} });\r\n\r\n\t\t\ta.push(obj);\r\n\t\t\treturn a\r\n\t\t}, []);\r\n\t}\r\n\r\n\t/**\r\n\t * Generate namespace object structure from string version\r\n\t *\r\n\t * @param  {String} namespace\r\n\t * \t\t\tTree structure delimited with dots\r\n\t *\r\n\t * @return {Object}\r\n\t * \t\t\tObject tree structure\r\n\t */\r\n\t#buildNamespace(namespace) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tlet tmp = globalThis;\r\n\t\tlet tmp2 = me.#model;\r\n\r\n\t\tnamespace.split('.').every(v => {\r\n\r\n\t\t\tif (!tmp[v]) tmp[v] = {};\r\n\t\t\ttmp = tmp[v];\r\n\r\n\t\t\tif (!tmp2[v]) tmp2[v] = tmp;\r\n\t\t\ttmp2 = tmp;\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn tmp;\r\n\t}\r\n\r\n\t/**\r\n\t * Build instance methods\r\n\t *\r\n\t * @param {String} instance\r\n\t * @param {Array} api\r\n\t * @param {String} id\r\n\t */\r\n\t#buildMethod(instance, api, id) {\r\n\r\n\t\tconst enc = api.encrypt === false ? false : true;\r\n\t\tconst cfg = {\r\n\t\t\tl: api.len,\r\n\t\t\ta: api.async || false,\r\n\t\t\tx: api.mid,\r\n\t\t\te: enc,\r\n\t\t\ti: id\r\n\t\t};\r\n\r\n\t\tinstance[api.name] = this.#apiFn(cfg);\r\n\t\tinstance[api.name]._id_ = id;\r\n\t\t// Object.freeze(instance[api.name]);\r\n\t}\r\n\r\n\t/**\r\n\t * Generic function used to attach for generated API\r\n\t *\r\n\t * @param {Array} params List of arguments from caller\r\n\t */\r\n\t#apiFn(params) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst prop = params;\r\n\r\n\t\tconst fn = function () {\r\n\r\n\t\t\tconst args = Array.prototype.slice.call(arguments);\r\n\r\n\t\t\t// overriden function with multiple param lengths\r\n\t\t\tconst isOverride = Array.isArray(prop.l);\r\n\r\n\t\t\tconst len = isOverride ? prop.l.filter(v => v === args.length).pop() : prop.l;\r\n\t\t\tif (args.length != len) throw new Error(`Invalid arguments length. Required (${prop.l})`);\r\n\r\n\t\t\tconst handle = Array.isArray(prop.x) ? prop.x[len - 1] : prop.x;\r\n\t\t\tconst isAsync = isOverride ? prop.a[args.length] : prop.a;\r\n\t\t\tconst timeout = isAsync ? 0 : me.#timeout;\r\n\r\n\t\t\tconst req = {\r\n\t\t\t\t\"handle\": handle,\r\n\t\t\t\t\"id\": prop.i,\r\n\t\t\t\t\"enc\": prop.e,\r\n\t\t\t\t\"data\": args,\r\n\t\t\t\t\"key\": ++me.#cnt,\r\n\t\t\t\t\"tid\": 0,\r\n\t\t\t\t\"ts\": Date.now()\r\n\t\t\t};\r\n\t\t\tObject.seal(req);\r\n\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst proxy = Request.wrap(req, timeout, (obj) => {\r\n\t\t\t\t\t\tme.#onResponse(obj, resolve, reject);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tme.emit('call', proxy);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.log(e);\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn fn;\r\n\t}\r\n\r\n\t/**\r\n\t * Process remote response\r\n\t */\r\n\t#onResponse(obj, resolve, reject) {\r\n\r\n\t\tif (obj instanceof Error) return reject(obj);\r\n\r\n\t\tconst result = obj.result || obj;\r\n\r\n\t\tif (result.success) {\r\n\t\t\tresolve(result);\r\n\t\t} else {\r\n\t\t\treject(result);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Static instance builder\r\n\t * @param {object} cfg Api list from server side Quark engine\r\n\t * @param {number} id Unique Quark Engine ID - to link functions to the engine instance\r\n\t * @returns \r\n\t */\r\n\tstatic build(cfg, id, timeout) {\r\n\t\tconst generator = new QuarkGenerator(id, timeout);\r\n\t\tgenerator.build(cfg);\r\n\t\treturn generator;\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport QuarkEvent from \"./Event.mjs\";\r\nimport QuarkQueue from \"./Queue.mjs\";\r\nimport QuarkStreams from \"./Streams.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to call remote services.\r\n * All Direct functions linked to io.greenscreens namespace\r\n */\r\nexport default class QuarkSocketChannel extends QuarkEvent {\r\n\r\n\t#challenge = Date.now();\r\n\t#queue = new QuarkQueue();\r\n\t#webSocket = null;\r\n\t#engine = null;\r\n\t#iid = 0;\r\n\r\n\t/**\r\n\t * Initialize Socket channel\r\n\t */\r\n\tasync init(engine) {\r\n\r\n\t\tconst me = this;\r\n\t\tme.stop();\r\n\t\tme.#engine = engine;\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tme.#startSocket(resolve, reject);\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tget isOpen() {\r\n\t\tconst me = this;\r\n\t\tif (me.#webSocket == null) return false;\r\n\t\treturn me.#webSocket.readyState === me.#webSocket.OPEN;\r\n\t}\r\n\r\n\t/**\r\n\t * Close WebSocket channel if available\r\n\t */\r\n\tstop() {\r\n\t\tconst me = this;\r\n\t\tif (me.#webSocket == null) return false;\r\n\t\tme.#webSocket.close();\r\n\t\tme.#webSocket = null;\r\n\t\tme.#engine = null;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Must be here, if encryption and compression is not available, \r\n\t * for server to regoznize Quark data format.\r\n\t * @param {*} req \r\n\t * @returns \r\n\t */\r\n\t#wrap(cmd, req) {\r\n\t\tconst data = {\r\n\t\t\ttype: 'GS',\r\n\t\t\tcmd: cmd,\r\n\t\t\tdata: req ? [req] : null\r\n\t\t};\r\n\t\treturn JSON.stringify(data);\r\n\t}\r\n\r\n\tget #ping() {\r\n\t\treturn this.#wrap('ping');\r\n\t}\r\n\r\n\t/**\r\n\t * Prepare remote call, encrypt if available\r\n\t *\r\n\t * @param {Object} req\r\n\t *         Data to send (optionaly encrypt)\r\n\t */\r\n\tasync #onCall(req) {\r\n\r\n\t\treq = req.detail;\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (req.id !== me.#engine.id) return;\r\n\r\n\t\tme.#queue.updateRequest(req);\r\n\r\n\t\tconst msg = me.#wrap('data', req);\r\n\t\tconst raw = await QuarkStreams.wrap(msg, me.#engine.Security);\r\n\t\tme.#webSocket.send(raw);\r\n\t}\r\n\r\n\tasync #startSocket(resolve, reject) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tconst url = new URL(engine.serviceURL);\r\n\r\n\t\t// const headers = Object.assign({}, engine.headers || {});\r\n\t\tconst querys = Object.assign({}, engine.querys || {});\r\n\t\tquerys.q = me.#challenge;\r\n\t\tquerys.c = QuarkStreams.isAvailable;\r\n\r\n\t\tObject.entries(querys || {}).forEach((v) => {\r\n\t\t\tif (v[1]) url.searchParams.append(v[0], encodeURIComponent(v[1]));\r\n\t\t});\r\n\r\n\t\tengine.Security.updateCookie();\r\n\r\n\t\tme.#webSocket = new WebSocket(url.toString(), ['quark']);\r\n\t\tme.#webSocket.binaryType = \"arraybuffer\";\r\n\r\n\t\tconst onCall = me.#onCall.bind(me);\r\n\r\n\t\tme.#webSocket.onopen = (event) => {\r\n\r\n\t\t\tme.emit('online', event);\r\n\t\t\tgenerator.on('call', onCall);\r\n\t\t\tme.#initPing();\r\n\r\n\t\t\tif (!engine.isWSAPI) {\r\n\t\t\t\treturn resolve(true);\r\n\t\t\t}\r\n\r\n\t\t\tgenerator.once('api', async (e) => {\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst data = e.detail;\r\n\t\t\t\t\tdata.challenge = me.#challenge;\r\n\t\t\t\t\tawait engine.registerAPI(data);\r\n\t\t\t\t\tresolve(true);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\r\n\t\t};\r\n\r\n\t\tme.#webSocket.onclose = (event) => {\r\n\t\t\tgenerator.off('call', onCall);\r\n\t\t\tclearInterval(me.#iid);\r\n\t\t\tme.stop();\r\n\t\t\tme.emit('offline', event);\r\n\t\t}\r\n\r\n\t\tme.#webSocket.onerror = (event) => {\r\n\t\t\tgenerator.off('call', onCall);\r\n\t\t\treject(event);\r\n\t\t\tme.stop();\r\n\t\t\tme.emit('error', event);\r\n\t\t};\r\n\r\n\t\tme.#webSocket.onmessage = async (event) => {\r\n\t\t\ttry {\r\n\t\t\t\tif (event.data instanceof ArrayBuffer) {\r\n\t\t\t\t\tawait me.#prepareBinaryMessage(event.data);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tawait me.#prepareTextMessage(event.data);\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\te.data = event;\r\n\t\t\t\tgenerator.emit('error', e);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t#initPing() {\r\n\t\tconst me = this;\r\n\t\tme.#iid = setInterval(() => {\r\n\t\t\tme.send(me.#ping);\r\n\t\t}, 15 * 1000);\r\n\t}\r\n\r\n\tasync #prepareBinaryMessage(message) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst security = engine.Security;\r\n\r\n\t\tmessage = await QuarkStreams.unwrap(message, security, me.#challenge);\r\n\r\n\t\tconst isJSON = QuarkStreams.isJson(message);\r\n\t\tif (!isJSON) return generator.emit('raw', message);\r\n\r\n\t\tif (Array.isArray(message)) {\r\n\t\t\tmessage.forEach(m => me.#onMessage(m));\r\n\t\t} else {\r\n\t\t\tme.#onMessage(message);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Parse and prepare received message for processing\r\n\t *\r\n\t * @param {String} mesasge\r\n\t *\r\n\t */\r\n\tasync #prepareTextMessage(message) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\ttry {\r\n\t\t\tconst isJSON = QuarkStreams.isJson(message);\r\n\r\n\t\t\tif (!isJSON) return generator.emit('raw', message);\r\n\r\n\t\t\tmessage = JSON.parse(message);\r\n\t\t\tif (Array.isArray(message)) {\r\n\t\t\t\tmessage.forEach(m => me.#onMessage(m));\r\n\t\t\t} else {\r\n\t\t\t\tme.#onMessage(message);\r\n\t\t\t}\r\n\r\n\t\t} catch (e) {\r\n\t\t\tgenerator.emit('error', e);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Process received message\r\n\t *\r\n\t * @param {*} msg\r\n\t *\r\n\t */\r\n\tasync #onMessage(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet data = null;\r\n\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tif (obj.cmd === 'api') {\r\n\t\t\treturn generator.emit('api', obj.data);\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'err') {\r\n\t\t\treturn generator.emit('error', obj.result);\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'data') {\r\n\t\t\tdata = obj.data;\r\n\t\t}\r\n\r\n\t\tif (data) {\r\n\t\t\tconst unknown = me.#queue.process(data);\r\n\t\t\tunknown.forEach((obj) => me.emit('message', obj));\r\n\t\t} else {\r\n\t\t\tme.emit('message', data);\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport QuarkStreams from \"./Streams.mjs\";\r\n\r\n/**\r\n * Web Requester Engine\r\n * Used to call remote services through HTTP/S\r\n */\r\nexport default class QuarkWebChannel {\r\n\r\n\tstatic #MIME_BINARY = 'application/octet-stream';\r\n\tstatic #MIME_JSON = 'application/json';\r\n\r\n\t#engine = null;\r\n\r\n\t/**\r\n\t * If http/s used in url, make standard fetch call to the defined service\r\n\t */\r\n\tasync init(engine) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (me.#engine) me.stop();\r\n\r\n\t\tme.#engine = engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tconst data = await me.#getAPI(engine.apiURL);\r\n\t\tawait engine.registerAPI(data);\r\n\r\n\t\tif (engine.isSocketChannel) return;\r\n\r\n\t\tgenerator.on('call', me.#onRequest.bind(me));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Disengage listeners and links\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tme.#engine = null;\r\n\r\n\t\tengine.Generator.off('call');\r\n\t\tif (engine.isSocketChannel) return;\r\n\t\ttry {\r\n\t\t\tfetch(engine.serviceURL, {\r\n\t\t\t\tmethod: 'delete'\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Callback for API call request,\r\n\t * here we make remote API call\r\n\t */\r\n\tasync #onRequest(req) {\r\n\r\n\t\treq = req.detail;\r\n\t\tconst me = this;\r\n\t\tlet o = null;\r\n\r\n\t\tif (req.id !== me.#engine.id) return;\r\n\r\n\t\ttry {\r\n\t\t\to = await me.#onCall(me.#engine, req);\r\n\t\t\treq.finish(o);\r\n\t\t} catch (err) {\r\n\t\t\treq.finish(err);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Get API definition through HTTP/s channel\r\n\t *\r\n\t * @param {String} url\r\n\t * \t\t  URL Address for API service definitions\r\n\t */\r\n\tasync #getAPI(url) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst security = engine.Security;\r\n\t\tconst id = Date.now();\r\n\r\n\t\tconst headers = Object.assign({}, engine.headers || {}, { 'gs-challenge': id });\r\n\r\n\t\tif (security.publicKey) {\r\n\t\t\theaders['gs-public-key'] = security.publicKey;\r\n\t\t}\r\n\r\n\t\tconst res = await me.#fetchCall(url, null, headers, false, 'get');\r\n\t\tconst data = await me.#onResponse(res, id);\r\n\r\n\t\t// update local challenge for signature verificator\r\n\t\tdata.challenge = id.toString();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tget #accept() {\r\n\t\treturn `${QuarkWebChannel.#MIME_BINARY}, ${QuarkWebChannel.#MIME_JSON}`;\r\n\t}\r\n\r\n\t#mime(data) {\r\n\t\tconst isBinary = typeof data === 'string' ? false : true;\r\n\t\treturn isBinary ? QuarkWebChannel.#MIME_BINARY : QuarkWebChannel.#MIME_JSON;\r\n\t}\r\n\r\n\t/**\r\n\t * Send data to server with http/s channel\r\n\t */\r\n\tasync #fetchCall(url, data, head, isCompress, method = 'post') {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst CONTENT_TYPE = me.#mime(data);\r\n\r\n\t\tconst HEADERS_ = {\r\n\t\t\t'Accept': me.#accept,\r\n\t\t\t'Content-Type': CONTENT_TYPE,\r\n\t\t\t'Accept-Encoding': 'gzip,deflate,br'\r\n\t\t};\r\n\r\n\t\tif (isCompress && QuarkStreams.isAvailable) {\r\n\t\t\tdata = QuarkStreams.toBinary(data);\r\n\t\t\tdata = await QuarkStreams.compressOrDefault(data);\r\n\t\t\tHEADERS_['Content-Encoding'] = 'gzip';\r\n\t\t}\r\n\r\n\t\tconst service = new URL(url);\r\n\t\tconst headers = Object.assign({}, engine.headers || {}, HEADERS_, head || {});\r\n\t\tconst querys = Object.assign({}, engine.querys || {});\r\n\r\n\t\tconst req = {\r\n\t\t\tmethod: method,\r\n\t\t\theaders: headers\r\n\t\t};\r\n\r\n\t\tif (data) req.body = data;\r\n\r\n\t\tObject.entries(querys || {}).forEach((v) => {\r\n\t\t\tservice.searchParams.append(v[0], encodeURIComponent(v[1]));\r\n\t\t});\r\n\r\n\t\treturn await fetch(service.toString(), req);\r\n\r\n\t}\r\n\r\n\tasync #onResponse(res, id) {\r\n\r\n\t\tlet obj = await QuarkWebChannel.fromResponse(res);\r\n\t\tif (obj instanceof Uint8Array) {\r\n\t\t\tobj = await QuarkStreams.unwrap(obj, this.#engine.Security, id);\r\n\t\t}\r\n\r\n\t\tif (obj && obj.type == 'ws' && obj.cmd === 'data') {\r\n\t\t\treturn obj.data;\r\n\t\t}\r\n\t\treturn obj;\r\n\t}\r\n\r\n\t/**\r\n\t * Prepare remote call, encrypt if available\r\n\t *\r\n\t * @param {String} url\r\n\t *        Service URL to receive data\r\n\t *\r\n\t * @param {Object} req\r\n\t *         Data to send (optionally encrypt)\r\n\t */\r\n\tasync #onCall(engine, req) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst security = engine.Security;\r\n\t\tconst url = engine.serviceURL;\r\n\r\n\t\tconst isEncrypt = security?.isValid;\r\n\t\tlet isCompress = false;\r\n\t\tlet raw = null;\r\n\r\n\t\tif (req) {\r\n\t\t\tif (isEncrypt) {\r\n\t\t\t\traw = await QuarkStreams.wrap(req, me.#engine.Security);\r\n\t\t\t} else {\r\n\t\t\t\traw = JSON.stringify(raw);\r\n\t\t\t\tisCompress = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst head = {};\r\n\r\n\t\tif (isEncrypt) {\r\n\t\t\thead['gs-public-key'] = security.publicKey;\r\n\t\t}\r\n\r\n\t\t// send and wait for response\r\n\t\tconst res = await me.#fetchCall(url, raw, head, isCompress);\r\n\t\tconst data = await me.#onResponse(res);\r\n\r\n\t\t// if error throw\r\n\t\tif (data.cmd == 'err') {\r\n\t\t\tthrow new Error(data.result.msg);\r\n\t\t}\r\n\r\n\t\t// return server response\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tstatic async fromResponse(res) {\r\n\r\n\t\tif (!res.ok) {\r\n\t\t\tthrow new Error(`${res.status} : ${res.statusText}`);\r\n\t\t}\r\n\r\n\t\tconst mime = res.headers.get('content-type') || '';\r\n\t\tconst isBin = mime.includes(QuarkWebChannel.#MIME_BINARY);\r\n\t\tconst isJson = mime.includes(QuarkWebChannel.#MIME_JSON);\r\n\t\tconst isPlain = !isBin && !isJson;\r\n\r\n\t\tif (isJson) return await res.json();\r\n\t\tif (isPlain) return await res.text();\r\n\r\n\t\tconst raw = await res.arrayBuffer();\r\n\t\treturn new Uint8Array(raw);\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport QuarkGenerator from \"./Generator.mjs\";\r\nimport QuarkSecurity from \"./Security.mjs\";\r\nimport QuarkSocketChannel from \"./SocketChannel.mjs\";\r\nimport QuarkWebChannel from \"./WebChannel.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to initialize remote API and remote services.\r\n */\r\nconst ERROR_MESSAGE = 'Invalid definition for Engine Remote Service';\r\nconst ERROR_API_UNDEFINED = 'API Url not defined!';\r\nconst ERROR_SVC_UNDEFINED = 'Service Url not defined!';\r\n\r\n/**\r\n * Main class for Quark Engine Client\r\n */\r\nexport default class QuarkEngine {\r\n\r\n\t#cfg = null;\r\n\t#isWSAPI = false;\r\n\t#isWebChannel = false;\r\n\t#isSocketChannel = false;\r\n\r\n\t#Security = null;\r\n\t#Generator = null;\r\n\t#WebChannel = null;\r\n\t#SocketChannel = null;\r\n\r\n\t#headers = null;\r\n\t#querys = null;\r\n\r\n\t#id = null;\r\n\r\n\tconstructor(cfg) {\r\n\r\n\t\tcfg = cfg || {};\r\n\r\n\t\tif (!cfg.api) {\r\n\t\t\tthrow new Error(ERROR_API_UNDEFINED);\r\n\t\t}\r\n\r\n\t\tif (!cfg.service) {\r\n\t\t\tthrow new Error(ERROR_SVC_UNDEFINED);\r\n\t\t}\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tme.#cfg = null;\r\n\t\tme.#isWSAPI = false;\r\n\t\tme.#isWebChannel = false;\r\n\t\tme.#isSocketChannel = false;\r\n\r\n\t\tme.#Security = null;\r\n\t\tme.#Generator = null;\r\n\t\tme.#WebChannel = null;\r\n\t\tme.#SocketChannel = null;\r\n\t\tme.#id = Date.now();\r\n\r\n\t\tme.#cfg = cfg;\r\n\t\tme.#isWSAPI = cfg.api === cfg.service && cfg.api.indexOf('ws') == 0;\r\n\r\n\t\tme.#headers = cfg.headers || {};\r\n\t\tme.#querys = cfg.querys || {};\r\n\r\n\t\tme.#Security = cfg.security instanceof QuarkSecurity ? cfg.security : null;\r\n\t\tme.#isWebChannel = cfg.service.indexOf('http') === 0;\r\n\t\tme.#isSocketChannel = cfg.service.indexOf('ws') === 0;\r\n\r\n\t\tif ((me.isWebChannel || me.isSocketChannel) === false) {\r\n\t\t\tthrow new Error(ERROR_MESSAGE);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/*\r\n\t * Initialize engine, throws error,\r\n\t */\r\n\tasync init() {\r\n\r\n\t\tconst me = this;\r\n\t\tif (me.isActive) return;\r\n\r\n\t\tif (!me.#Security) me.#Security = await QuarkSecurity.create();\r\n\t\tme.#Generator = new QuarkGenerator(me.id);\r\n\r\n\t\tif (me.isWebChannel || me.isWSAPI == false) {\r\n\t\t\tme.#WebChannel = new QuarkWebChannel();\r\n\t\t\tawait me.WebChannel.init(me);\r\n\t\t}\r\n\r\n\t\tif (me.isSocketChannel) {\r\n\t\t\tme.#SocketChannel = new QuarkSocketChannel();\r\n\t\t\tawait me.SocketChannel.init(me);\r\n\t\t}\r\n\r\n\t\treturn me;\r\n\t}\r\n\r\n\t/**\r\n\t * Use internaly from channel to register received\r\n\t * API definitions and security data\r\n\t */\r\n\tasync registerAPI(data) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\t// initialize encryption if provided\r\n\t\tif (data.signature && !me.Security?.isValid) {\r\n\t\t\tawait me.Security?.init(data);\r\n\t\t}\r\n\r\n\t\tme.Generator?.build(data.api);\r\n\t}\r\n\r\n\t/**\r\n\t * Stop engine instance by clearing all references\r\n\t * stoping listeners, stoping socket is avaialble\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tme.WebChannel?.stop();\r\n\t\tme.SocketChannel?.stop();\r\n\t\tme.Generator?.stop();\r\n\r\n\t\tme.#WebChannel = null;\r\n\t\tme.#SocketChannel = null;\r\n\t\tme.#Generator = null;\r\n\t\tme.#Security = null;\r\n\t\tme.#cfg = null;\r\n\t}\r\n\r\n\t/*\r\n\t * Return generated API\r\n\t */\r\n\tget api() {\r\n\t\treturn this.Generator?.api || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Check if engine is active\r\n\t */\r\n\tget isActive() {\r\n\t\tconst me = this;\r\n\t\tif (me.SocketChannel && !me.SocketChannel.isOpen) return false;\r\n\t\treturn me.api && me.Security ? true : false;\r\n\t}\r\n\r\n\t/*\r\n\t * Return API URL address\r\n\t */\r\n\tget apiURL() {\r\n\t\treturn this.cfg?.api || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Return Service URL address\r\n\t */\r\n\tget serviceURL() {\r\n\t\treturn this.cfg?.service || null;\r\n\t}\r\n\r\n\tget cfg() { return this.#cfg };\r\n\tget isWSAPI() { return this.#isWSAPI };\r\n\tget isWebChannel() { return this.#isWebChannel };\r\n\tget isSocketChannel() { return this.#isSocketChannel };\r\n\r\n\tget Security() { return this.#Security; }\r\n\tget Generator() { return this.#Generator; }\r\n\tget WebChannel() { return this.#WebChannel; }\r\n\tget SocketChannel() { return this.#SocketChannel; }\r\n\r\n\tget headers() { return this.#headers; }\r\n\tget querys() { return this.#querys; }\r\n\tget id() { return this.#id; }\r\n\r\n\t/*\r\n\t * Static instance builder\r\n\t */\r\n\tstatic async init(cfg) {\r\n\t\tconst engine = new QuarkEngine(cfg);\r\n\t\treturn engine.init();\r\n\t}\r\n}\r\n"],"names":["QuarkBuffer","static","TextEncoder","TextDecoder","src","data","Array","Uint8Array","ArrayBuffer","String","fromText","toArrayBuffer","isString","test","b64","me","fromBase64","isHexString","fromHex","validateData","val","isText","decoder","decode","encoder","encode","value","arry","i","length","push","parseInt","substr","buffer","prototype","map","call","x","toString","slice","join","strbin","atob","bufView","strLen","charCodeAt","toBuffer","btoa","reduce","fromCharCode","QuarkEvent","EventTarget","listeners","Set","list","type","listener","from","this","isFunction","filter","o","addEventListener","opt","add","super","removeEventListener","forEach","delete","unbind","clear","on","once","wrap","e","off","emit","evt","CustomEvent","detail","dispatchEvent","send","listen","unlisten","wait","Promise","r","fn","preventDefault","stopPropagation","Object","freeze","QuarkStreams","isAvailable","CompressionStream","DecompressionStream","raw","encrypted","compressed","dataType","dv","DataView","setUint8","setUint32","set","security","toBinary","compressOrDefault","encrypt","toGS","isValid","challenge","isGS","Streams","getUint8","len","getUint32","byteLength","isCompress","isCompressFlag","isEncrypt","isEncryptFlag","api","isApiFlag","encLen","verLen","sgnLen","keyEnc","keyVer","signature","init","decrypt","decompress","arrayBuffer","isJson","Error","JSON","parse","toText","getUint16","stream","byteArray","writer","writable","getWriter","write","close","Response","readable","encoding","compress","stringify","isGzip","at","indexOf","first","trim","last","isJsonArray","isJsonObj","QuarkSecurity","name","namedCurve","hash","publicKey","keyPair","aesKey","size","array","crypto","getRandomValues","subtle","generateKey","Security","ECDH_TYPE","key","mode","der","use","split","importKey","ab","exportKey","toHex","VERIFY","verify","sign","cookie","path","updateCookie","document","getChallenge","cfg","toChallenge","toBase64","async","ECDSA_TYPE","verKey","initPublic","deriveAES","priv","pub","pubDef","public","derivedKey","AES_TYPE","deriveKey","toAlgo","iv","assign","counter","databin","result","decryptRaw","encryptRaw","initVerify","privateKey","getRandom","d","encryptAsBuffer","decryptAsBuffer","initKeyPair","preInit","QuarkQueue","Map","up","down","tid","updateRequest","req","reset","process","obj","unknown","isArray","res","execute","unkown","has","get","finish","QuarkRequest","id","timeout","callback","constructor","object","property","bind","clearTimeout","setTimeout","Proxy","QuarkGenerator","model","cnt","stop","detach","cleanup","k","el","_id_","values","build","buildAPI","v","buildInstance","tree","action","buildNamespace","namespace","methods","buildMethod","a","ar","objs","mid","tmp","globalThis","tmp2","every","instance","enc","l","apiFn","params","prop","args","arguments","isOverride","pop","handle","isAsync","ts","Date","now","seal","resolve","reject","proxy","Request","onResponse","success","generator","QuarkSocketChannel","queue","webSocket","engine","iid","startSocket","isOpen","readyState","OPEN","cmd","ping","msg","Generator","url","URL","serviceURL","querys","q","c","entries","searchParams","append","encodeURIComponent","WebSocket","binaryType","onCall","onopen","event","initPing","isWSAPI","registerAPI","onclose","clearInterval","onerror","onmessage","prepareBinaryMessage","prepareTextMessage","setInterval","message","unwrap","m","onMessage","QuarkWebChannel","getAPI","apiURL","isSocketChannel","onRequest","fetch","method","err","headers","fetchCall","accept","MIME_BINARY","MIME_JSON","mime","head","CONTENT_TYPE","HEADERS_","Accept","service","body","fromResponse","ok","status","statusText","isBin","includes","isPlain","json","text","QuarkEngine","isWebChannel","WebChannel","SocketChannel","isActive","create"],"mappings":"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"}