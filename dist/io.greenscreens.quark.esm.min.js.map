{"version":3,"file":"io.greenscreens.quark.esm.min.js","sources":["../src/core/Buffer.mjs","../src/core/Event.mjs","../src/core/Streams.mjs","../src/core/Security.mjs","../src/core/Queue.mjs","../src/core/Request.mjs","../src/core/Generator.mjs","../src/core/Socket.mjs","../src/core/Web.mjs","../src/core/Engine.mjs"],"sourcesContent":["/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/*\r\n * Simulate NoedJS Buffer, simple\r\n */\r\nexport default class Buffer {\r\n\r\n\tstatic from(value, type) {\r\n\t\tswitch (type) {\r\n\t\t\tcase 'base64':\r\n\t\t\t\treturn Buffer.fromBase64(value);\r\n\t\t\tcase 'hex':\r\n\t\t\t\treturn Buffer.fromHex(value);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\tstatic to(value, type) {\r\n\t\tswitch (type) {\r\n\t\t\tcase 'base64':\r\n\t\t\t\treturn Buffer.toBase64(value);\r\n\t\t\tcase 'hex':\r\n\t\t\t\treturn Buffer.toHex(value);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\tstatic fromHex(value) {\r\n\r\n\t\tconst arry = [];\r\n\r\n\t\tfor (let i = 0; i < value.length; i += 2) {\r\n\t\t\tarry.push(parseInt(\"0x\" + value.substr(i, 2), 16));\r\n\t\t}\r\n\r\n\t\treturn new Uint8Array(arry);\r\n\t}\r\n\r\n\tstatic fromBase64(value) {\r\n\r\n\t\tconst strbin = atob(value);\r\n\t\tconst buffer = new ArrayBuffer(strbin.length);\r\n\t\tconst bufView = new Uint8Array(buffer);\r\n\r\n\t\tfor (let i = 0, strLen = strbin.length; i < strLen; i++) {\r\n\t\t\tbufView[i] = strbin.charCodeAt(i);\r\n\t\t}\r\n\r\n\t\treturn bufView;\r\n\t}\r\n\r\n\tstatic toHex(buffer) {\r\n\t\treturn Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('');\r\n\t}\r\n\r\n\tstatic toBase64(buffer) {\r\n\t\treturn btoa(new Uint8Array(buffer));\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * A module loading Event class\r\n * @module Events\r\n */\r\n\r\n/**\r\n * Extends native event by adding helper functions\r\n */\r\nexport default class Event extends EventTarget {\r\n\r\n    #listeners = new Set();\r\n\r\n    #list(type = '', listener) {\r\n        const me = this;\r\n        const list = Array.from(me.#listeners);\r\n        return me.#isFunction(listener) ? \r\n            list.filter(o => o.type === type && o.listener === listener)\r\n            :\r\n            list.filter(o => o.type === type);\r\n    }\r\n\r\n    #isFunction(fn) {\r\n        return typeof fn === 'function';\r\n    }\r\n\r\n    addEventListener(type, listener, opt) {\r\n        const me = this;\r\n        if (!me.#isFunction(listener)) return false;\r\n        me.#listeners.add({ type: type, listener: listener });        \r\n        return super.addEventListener(type, listener, opt);\r\n    }\r\n\r\n    removeEventListener(type, listener) {\r\n        const me = this;\r\n        const list = me.#list(type, listener);\r\n        list.forEach(o => super.removeEventListener(o.type, o.listener))\r\n        list.forEach(o => me.#listeners.delete(o)); \r\n    }\r\n\r\n    /**\r\n     * Remove all listeners\r\n     */\r\n    unbind() {\r\n        const me = this;\r\n        Array.from(me.#listeners).forEach(o => {\r\n            super.removeEventListener(o.type, o.listener);\r\n        });\r\n        me.#listeners.clear();\r\n    }\r\n\r\n    /**\r\n     * Listen for events\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    on(type = '', listener) {\r\n        return this.addEventListener(type, listener);\r\n    }\r\n\r\n    /**\r\n     * Listen for events only once\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    once(type, listener) {\r\n        const me = this;\r\n        let wrap = (e) => {\r\n            listener(e);\r\n            wrap = null;\r\n        }\r\n        wrap.type = type;\r\n        wrap.listener = listener;\r\n        return me.addEventListener(type, wrap, { once: true });\r\n    }\r\n\r\n    /**\r\n     * Stop listening for events\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    off(type = '', listener) {\r\n        return this.removeEventListener(type, listener);\r\n    }\r\n\r\n    /**\r\n     * Send event to listeners\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {object} data  Data to send \r\n     */\r\n    emit(type, data) {\r\n        if (!type) return false;\r\n        const evt = new CustomEvent(type, { detail: data });\r\n        return this.dispatchEvent(evt);\r\n    }\r\n\r\n    send(type, data) {this.emit(type, data);}\r\n    listen(type, listener) {this.on(type, listener);}\r\n    unlisten(type, listener) {this.off(type, listener);}\r\n\r\n    /**\r\n     * Wait for an event \r\n     * @param {string} type Event name to be listened\r\n     * @returns {Event}\r\n     */\r\n\twait(type = '') {\r\n        if (!type) return e('Event undefined!');\r\n\t\tconst me = this;\r\n\t\treturn new Promise((r, e) => {\r\n\t\t\tme.once(type, (e) => r(e));\r\n\t\t});\r\n\t}\r\n \r\n\t/**\r\n\t * Generic prevent event bubling\r\n\t * \r\n\t * @param {Event} e \r\n\t */\r\n\tstatic prevent(e) {\r\n\t\tif (Event.#isFunction(e, 'preventDefault')) e.preventDefault();\r\n\t\tif (Event.#isFunction(e, 'stopPropagation')) e.stopPropagation();\r\n\t}\r\n\r\n    static {\r\n        Object.freeze(Event);\r\n    }\r\n\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Browser native compression\r\n */\r\nexport default class Streams {\r\n\r\n\tstatic get isAvailable() {\r\n\t\treturn typeof CompressionStream !== 'undefined' &&\r\n\t\t\ttypeof DecompressionStream !== 'undefined';\r\n\t}\r\n\r\n\tstatic async compress(text, encoding = 'gzip') {\r\n\t\tconst byteArray = new TextEncoder().encode(text);\r\n\t\tconst cs = new CompressionStream(encoding);\r\n\t\tconst writer = cs.writable.getWriter();\r\n\t\twriter.write(byteArray);\r\n\t\twriter.close();\r\n\t\treturn new Response(cs.readable).arrayBuffer();\r\n\t}\r\n\r\n\tstatic async decompress(byteArray, encoding = 'gzip') {\r\n\t\tconst cs = new DecompressionStream(encoding);\r\n\t\tconst writer = cs.writable.getWriter();\r\n\t\twriter.write(byteArray);\r\n\t\twriter.close();\r\n\t\tconst arrayBuffer = await new Response(cs.readable).arrayBuffer();\r\n\t\treturn new TextDecoder().decode(arrayBuffer);\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Security engine using Web Crypto API to encrypt / decrypt\r\n * messages between browser and server.\r\n *\r\n * Received RSA public key is signed and verified at the\r\n * browser side to prevent tampering\r\n */\r\n\r\nexport default class Security {\r\n\r\n\t#VERSION = 0;\r\n\t#encKEY = null;\r\n\t#aesKEY = null;\r\n\t#exportedAES = null;\r\n\r\n\t#encoder = new TextEncoder();\r\n\t#decoder = new TextDecoder();\r\n\r\n\t/**\r\n\t *  Use local challenge, to verify received data signature\r\n\t *\r\n\t *  @param {Object} cfg\r\n\t *      Data received from server contins public key and signature\r\n\t */\r\n\tgetChallenge(cfg) {\r\n\t\treturn [cfg.challenge || '', cfg.keyEnc || '', cfg.keyVer || ''].join('');\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Create random bytes\r\n\t *\r\n\t * @param {int} size\r\n\t *     length of data (required)\r\n\t */\r\n\tgetRandom(size) {\r\n\t\tconst array = new Uint8Array(size);\r\n\t\tcrypto.getRandomValues(array);\r\n\t\treturn array;\r\n\t}\r\n\r\n\t/**\r\n\t * Create AES key for data encryption\r\n\t * @returns CryptoKey\r\n\t */\r\n\tasync generateAesKey() {\r\n\t\tconst type = {\r\n\t\t\tname: \"AES-CTR\",\r\n\t\t\tlength: 128\r\n\t\t};\r\n\t\tconst mode = [\"encrypt\", \"decrypt\"];\r\n\t\treturn crypto.subtle.generateKey(type, true, mode);\r\n\t}\r\n\r\n\t/**\r\n\t * Extract CryptoKey into RAW bytes\r\n\t * @param {CryptoKey} key\r\n\t * @returns Uin8Array\r\n\t */\r\n\tasync exportAesKey(key) {\r\n\t\tconst buffer = await crypto.subtle.exportKey(\"raw\", key);\r\n\t\treturn new Uint8Array(buffer);\r\n\t}\r\n\r\n\t/**\r\n\t * Import RSA key received from server\r\n\t * Key is publicKey used to send encrypted AES key\r\n\t *\r\n\t * @param {String} key\r\n\t *          PEM encoded key without headers,\r\n\t *          flattened in a single line\r\n\t *\r\n\t * @param {Object} type\r\n\t *          Crypto API key definition format\r\n\t *\r\n\t * @param {String} mode\r\n\t *          Key usage 'encrypt' or 'decrypt'\r\n\t */\r\n\tasync importRsaKey(key, type, mode) {\r\n\r\n\t\tconst binaryDer = Buffer.from(key, 'base64');\r\n\r\n\t\treturn crypto.subtle.importKey(\r\n\t\t\t\"spki\",\r\n\t\t\tbinaryDer,\r\n\t\t\ttype,\r\n\t\t\ttrue,\r\n\t\t\t[mode]\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Verify signature\r\n\t *\r\n\t * @param {CryptoKey}\r\n\t *      Public key used for verification\r\n\t *\r\n\t * @param {ArrayBuffer} signature\r\n\t *        Signature of received data\r\n\t *\r\n\t * @param {ArrayBuffer} challenge\r\n\t *        Challenge to verify with signature (ts + pemENCDEC + pemVERSGN)\r\n\t */\r\n\tasync verify(key, signature, challenge) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst binSignature = Buffer.from(signature, 'base64');\r\n\t\tconst binChallenge = me.#encoder.encode(challenge);\r\n\r\n\t\tconst type = {\r\n\t\t\tname: \"ECDSA\",\r\n\t\t\thash: {\r\n\t\t\t\tname: \"SHA-384\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\treturn crypto.subtle.verify(\r\n\t\t\ttype,\r\n\t\t\tkey,\r\n\t\t\tbinSignature,\r\n\t\t\tbinChallenge\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Encrypt message with RSA key\r\n\t *\r\n\t * @param {String || ArrayBuffer} data\r\n\t *        String or AraryBuffer to encrypt\r\n\t */\r\n\tasync encryptRSA(data) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet encoded = data;\r\n\r\n\t\tif (typeof data === 'string') {\r\n\t\t\tencoded = me.#encoder.encode(data);\r\n\t\t}\r\n\r\n\t\treturn crypto.subtle.encrypt(\r\n\t\t\t\"RSA-OAEP\",\r\n\t\t\tme.#encKEY,\r\n\t\t\tencoded\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Encrypt message with AES\r\n\t */\r\n\tasync encryptAesMessage(key, iv, data) {\r\n\r\n\t\tconst encoded = this.#encoder.encode(data);\r\n\t\tconst type = {\r\n\t\t\tname: \"AES-CTR\",\r\n\t\t\tcounter: iv,\r\n\t\t\tlength: 128\r\n\t\t};\r\n\r\n\t\treturn crypto.subtle.encrypt(type, key, encoded);\r\n\t}\r\n\r\n\t/**\r\n\t * Decrypt AES encrypted message\r\n\t */\r\n\tasync decryptAesMessage(key, iv, data) {\r\n\r\n\t\tconst databin = Buffer.from(data, \"hex\");\r\n\t\tconst counter = Buffer.from(iv, \"hex\");\r\n\r\n\t\tconst type = {\r\n\t\t\tname: \"AES-CTR\",\r\n\t\t\tcounter: counter,\r\n\t\t\tlength: 128\r\n\t\t};\r\n\r\n\t\treturn crypto.subtle.decrypt(type, key, databin);\r\n\t}\r\n\r\n\tget isValid() {\r\n\t\tconst me = this;\r\n\t\treturn me.#encKEY !== null && me.#aesKEY !== null;\r\n\t}\r\n\r\n\tstatic get isAvailable() {\r\n\t\treturn crypto.subtle != null;\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize encryption and verification keys\r\n\t * Verifies data signatures to prevent tampering\r\n\t */\r\n\tasync init(cfg) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (!Security.isAvailable) {\r\n\t\t\tconsole.log('Security mode not available, TLS protocol required.');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconsole.log('Security Initializing...');\r\n\r\n\t\tme.#VERSION++;\r\n\r\n\t\tme.#encKEY = await me.importRsaKey(cfg.keyEnc, {\r\n\t\t\tname: 'RSA-OAEP',\r\n\t\t\thash: 'SHA-256'\r\n\t\t}, 'encrypt');\r\n\r\n\t\tme.#aesKEY = await me.generateAesKey();\r\n\t\tme.#exportedAES = await me.exportAesKey(me.#aesKEY);\r\n\r\n\t\tconst verKey = await me.importRsaKey(cfg.keyVer, {\r\n\t\t\tname: 'ECDSA',\r\n\t\t\tnamedCurve: \"P-384\"\r\n\t\t}, 'verify');\r\n\r\n\t\tconst status = await me.verify(verKey, cfg.signature, me.getChallenge(cfg || {}));\r\n\r\n\t\tif (!status) {\r\n\t\t\tme.#encKEY = null;\r\n\t\t\tme.#aesKEY = null;\r\n\t\t\tme.#exportedAES = null;\r\n\t\t\tthrow new Error('Signature invalid');\r\n\t\t}\r\n\r\n\t\tconsole.log('Security Initialized!');\r\n\r\n\t}\r\n\r\n\t/**\r\n\t *  Ecnrypt received data in format {d:.., k:...}\r\n\t * @param\r\n\t * \t\tdata  - string to encrypt\r\n\t */\r\n\tasync encrypt(data, bin) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst iv = me.getRandom(16);\r\n\t\tconst key = new Uint8Array(iv.length + me.#exportedAES.length);\r\n\r\n\t\tkey.set(iv);\r\n\t\tkey.set(me.#exportedAES, iv.length);\r\n\r\n\t\tconst str = (typeof data === 'string') ? data : JSON.stringify(data);\r\n\t\tconst encryptedKey = await me.encryptRSA(key);\r\n\t\tconst encryptedData = await me.encryptAesMessage(me.#aesKEY, iv, str);\r\n\r\n\t\tif (bin === true) {\r\n\t\t\treturn {\r\n\t\t\t\tt: '1',\r\n\t\t\t\td: encryptedData,\r\n\t\t\t\tk: encryptedKey\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tt: '1',\r\n\t\t\td: Buffer.to(encryptedData, 'hex'),\r\n\t\t\tk: Buffer.to(encryptedKey, 'hex')\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decrypt received data in format {d:.., k:...}\r\n\t *\r\n\t * @param\r\n\t * \t\tcfg  - data elements to decrypt\r\n\t * \t\tcfg.d - aes encrypted server resposne\r\n\t * \t\tcfg.k - aes IV used for masking\r\n\t *\r\n\t */\r\n\tasync decrypt(cfg) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst iv = cfg.iv;\r\n\t\tconst data = cfg.d;\r\n\r\n\t\tconst message = await me.decryptAesMessage(me.#aesKEY, iv, data);\r\n\r\n\t\tconst str = me.#decoder.decode(message);\r\n\t\tconst obj = JSON.parse(str);\r\n\r\n\t\tif (obj && obj.type == 'ws' && obj.cmd === 'data') {\r\n\t\t\treturn obj.data;\r\n\t\t}\r\n\r\n\t\treturn obj;\r\n\t}\r\n\r\n\tstatic async init(cfg) {\r\n\t\tconst security = new Security();\r\n\t\tawait security.init(cfg);\r\n\t\treturn security;\r\n\t}\r\n\r\n};\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Queue to handle requests\r\n */\r\nexport default class Queue extends Map {\r\n\r\n\t#up = 0;\r\n\t#down = 0;\r\n\t#tid = 0;\r\n\r\n\t/**\r\n\t * Update counters and queue to link resposnes to requests\r\n\t * @param {Object} req\r\n\t *      Request data\r\n\t */\r\n\tupdateRequest(req, callback) {\r\n\t\tconst me = this;\r\n\t\tme.#tid++;\r\n\t\tme.#up++;\r\n\t\treq.tid = me.#tid.toString();\r\n\t\tme.set(req.tid, callback);\r\n\t}\r\n\r\n\t/**\r\n\t * Reset queue to remove old stalled elements\r\n\t */\r\n\treset() {\r\n\t\tconst me = this;\r\n\t\tif (me.#up > 50 && me.#down >= me.#up) {\r\n\t\t\tme.#up = 0;\r\n\t\t\tme.#down = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Process array of response records\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\tprocess(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst unknown = [];\r\n\r\n\t\tif (Array.isArray(obj)) {\r\n\t\t\tobj.forEach((o) => {\r\n\t\t\t\tconst res = me.execute(o);\r\n\t\t\t\tif (res) unkown.push(res);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconst o = me.execute(obj);\r\n\t\t\tif (o) unknown.push(o);\r\n\t\t}\r\n\r\n\t\treturn unknown;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Process single response record\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\texecute(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst tid = obj.tid;\r\n\t\tlet unknown = null;\r\n\r\n\t\tme.#down++;\r\n\r\n\t\tif (me.has(tid)) {\r\n\t\t\ttry {\r\n\t\t\t\tme.get(tid)(null, obj);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log(e);\r\n\t\t\t\tme.get(tid)(e, null);\r\n\t\t\t} finally {\r\n\t\t\t\tme.delete(tid);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tunknown = obj;\r\n\t\t}\r\n\r\n\t\tme.reset();\r\n\r\n\t\treturn unknown;\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * API engine asynchronous request\r\n */\r\nexport default class Request {\r\n\r\n    #id = 0;\r\n    #timeout = 0;\r\n    #callback;\r\n    \r\n    constructor(timeout , callback) {\r\n        const me = this;\r\n        me.#callback = callback;\r\n        me.#timeout = timeout;\r\n        me.#init();\r\n    }\r\n\r\n    get(object, property, receiver) {\r\n        const me = this;\r\n        if (property === 'timeout') return me.timeout;\r\n        if (property === 'finish') return me.callback.bind(me);\r\n        return object[property];\r\n    }\r\n\r\n    callback(o) {\r\n        const me = this;\r\n        if (me.timeout) return;\r\n        me.#clear();\r\n        return me.#callback(o);\r\n    }\r\n\r\n    get timeout() {\r\n        return this.#timeout === true;\r\n    }\r\n\r\n    #clear() {\r\n        const me = this;\r\n        if (me.#id === 0) return;\r\n        clearTimeout(me.#id);\r\n    }\r\n\r\n    #init() {\r\n        const me = this;\r\n        if (me.#timeout === 0) return;\r\n        me.#id = setTimeout(() => {\r\n            me.#timeout = true;\r\n            me.#callback(new Error('Call timeouted!'));\r\n        }, me.#timeout);\r\n    }\r\n\r\n    static wrap(data, timeout , callback) {\r\n        return new Proxy(data, new Request(timeout , callback));\r\n    }\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport Event from \"./Event.mjs\";\r\nimport Request from \"./Request.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to call remote services.\r\n * All Direct functions linked to defiend namespace\r\n */\r\nexport default class Generator extends Event {\r\n\r\n\t#model = {};\r\n\t#id = null;\r\n\t#cnt = 0;\r\n\t#timeout = 0;\r\n\r\n\tconstructor(id = 0, timeout = 0) {\r\n\t\tsuper();\r\n\t\tthis.#id = id;\r\n\t\tthis.#timeout = timeout;\r\n\t}\r\n\r\n\t/**\r\n\t * Return generted API structure and callers\r\n\t */\r\n\tget api() {\r\n\t\treturn this.#model;\r\n\t}\r\n\r\n\t/**\r\n\t * Disconnect generator from API callers\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\t\tme.off('call');\r\n\t\tme.off('api');\r\n\t\tme.off('raw');\r\n\t\tme.off('error');\r\n\t\tme.#detach();\r\n\t}\r\n\r\n\t#cleanup(obj, id) {\r\n\t\tfor (let k in obj) {\r\n\t\t\tlet el = obj[k];\r\n\t\t\tif (typeof el === 'object') {\r\n\t\t\t\tif (this.#cleanup(el, id)) obj[k] = null;\r\n\t\t\t} else if (el._id_ === id) {\r\n\t\t\t\tobj[k] = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Object.values(obj).filter(o => o != null).length === 0;\r\n\t}\r\n\r\n\t#detach() {\r\n\t\tconst me = this;\r\n\t\tme.#cleanup(me.#model, me.#id);\r\n\t\tme.#model = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Build JS object with callable functions that maps to Java side methods\r\n\t * Data is retrieved from API service\r\n\t *\r\n\t * @param {String} url || api object\r\n\t * \t\t  URL Address for API service definitions\r\n\t */\r\n\tbuild(o) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst data = o ? o.api || o : null;\r\n\r\n\t\tif (data) me.#buildAPI(data);\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * From API tree generate namespace tree and\r\n\t * links generated functions to WebScoket api calls\r\n\t *\r\n\t * @param {Object} cfg\r\n\t * \t\tAlternative definition to API\r\n\t */\r\n\t#buildAPI(cfg) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (Array.isArray(cfg)) {\r\n\t\t\tcfg.forEach(v => me.#buildInstance(v));\r\n\t\t} else {\r\n\t\t\tme.#buildInstance(cfg);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Build from single definition\r\n\t *\r\n\t * @param {Object} api\r\n\t * \t\t  Java Class/Method definition\r\n\t */\r\n\t#buildInstance(api) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet tree = null;\r\n\t\tlet action = null;\r\n\r\n\t\ttree = me.#buildNamespace(api.namespace);\r\n\r\n\t\tif (!tree[api.action]) {\r\n\t\t\ttree[api.action] = {};\r\n\t\t}\r\n\t\taction = tree[api.action];\r\n\r\n\t\tapi.methods?.forEach(v => me.#buildMethod(api.namespace, api.action, action, v, me.#id));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generate namespace object structure from string version\r\n\t *\r\n\t * @param  {String} namespace\r\n\t * \t\t\tTree structure delimited with dots\r\n\t *\r\n\t * @return {Object}\r\n\t * \t\t\tObject tree structure\r\n\t */\r\n\t#buildNamespace(namespace) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tlet tmp = globalThis;\r\n\t\tlet tmp2 = me.#model;\r\n\r\n\t\tnamespace.split('.').every(v => {\r\n\r\n\t\t\tif (!tmp[v]) tmp[v] = {};\r\n\t\t\ttmp = tmp[v];\r\n\r\n\t\t\tif (!tmp2[v]) tmp2[v] = tmp;\r\n\t\t\ttmp2 = tmp;\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn tmp;\r\n\t}\r\n\r\n\t/**\r\n\t * Build instance methods\r\n\t *\r\n\t * @param {String} namespace\r\n\t * @param {String} action\r\n\t * @param {String} instance\r\n\t * @param {Array} api\r\n\t */\r\n\t#buildMethod(namespace, action, instance, api, id) {\r\n\r\n\t\tconst enc = api.encrypt === false ? false : true;\r\n\t\tconst cfg = {\r\n\t\t\tn: namespace,\r\n\t\t\tc: action,\r\n\t\t\tm: api.name,\r\n\t\t\tl: api.len,\r\n\t\t\te: enc,\r\n\t\t\ti: id\r\n\t\t};\r\n\r\n\t\tinstance[api.name] = this.#apiFn(cfg);\r\n\t\tinstance[api.name]._id_ = id;\r\n\t\t// Object.freeze(instance[api.name]);\r\n\t}\r\n\r\n\t/**\r\n\t * Generic function used to attach for generated API\r\n\t *\r\n\t * @param {Array} params List of arguments from caller\r\n\t */\r\n\t#apiFn(params) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst prop = params;\r\n\r\n\t\tconst fn = function () {\r\n\r\n\t\t\tconst args = Array.prototype.slice.call(arguments);\r\n\r\n\t\t\tif (args.length != prop.l) throw new Error(`Invalid arguments length. Required (${prop.l})`);\r\n\r\n\t\t\tconst req = {\r\n\t\t\t\t\"namespace\": prop.n,\r\n\t\t\t\t\"action\": prop.c,\r\n\t\t\t\t\"method\": prop.m,\r\n\t\t\t\t\"id\": prop.i,\r\n\t\t\t\t\"e\": prop.e,\r\n\t\t\t\t\"data\": args,\r\n\t\t\t\t\"key\" : ++me.#cnt,\r\n\t\t\t\t\"ts\": Date.now()\r\n\t\t\t};\r\n\t\t\tObject.seal(req);\r\n\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst proxy = Request.wrap(req, me.#timeout, (obj) => {\r\n\t\t\t\t\t\tme.#onResponse(obj, resolve, reject);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tme.emit('call', proxy);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.log(e);\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn fn;\r\n\t}\r\n\r\n\t/**\r\n\t * Process remote response\r\n\t */\r\n\t#onResponse(obj, resolve, reject) {\r\n\r\n\t\tif (obj instanceof Error) return reject(obj);\r\n\r\n\t\tconst result = obj.result || obj;\r\n\r\n\t\tif (result.success) {\r\n\t\t\tresolve(result.data);\r\n\t\t} else {\r\n\t\t\treject(result);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Static instance builder\r\n\t * @param {object} cfg Api list from server side Quark engine\r\n\t * @param {number} id Unique Quark Engien ID - to link functions to the engine instance\r\n\t * @returns \r\n\t */\r\n\tstatic async build(cfg, id, timeout) {\r\n\t\tconst generator = new Generator(id, timeout);\r\n\t\tgenerator.build(cfg);\r\n\t\treturn generator;\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport Event from \"./Event.mjs\";\r\nimport Queue from \"./Queue.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to call remote services.\r\n * All Direct functions linked to io.greenscreens namespace\r\n */\r\nexport default class SocketChannel extends Event {\r\n\r\n\t#queue = new Queue();\r\n\t#webSocket = null;\r\n\t#engine = null;\r\n\r\n\t/**\r\n\t * Initialize Socket channel\r\n\t */\r\n\tasync init(engine) {\r\n\r\n\t\tconst me = this;\r\n\t\tme.stop();\r\n\t\tme.#engine = engine;\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tme.#startSocket(resolve, reject);\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tget isOpen() {\r\n\t\tconst me = this;\r\n\t\tif (me.#webSocket == null) return false;\r\n\t\treturn me.#webSocket.readyState === me.#webSocket.OPEN;\r\n\t}\r\n\r\n\t/**\r\n\t * Close WebSocket channel if available\r\n\t */\r\n\tstop() {\r\n\t\tconst me = this;\r\n\t\tif (me.#webSocket == null) return false;\r\n\t\tme.#webSocket.close();\r\n\t\tme.#webSocket = null;\r\n\t\tme.#engine = null;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Check if data can be encrypted\r\n\t *\r\n\t * @param {Object} req\r\n\t */\r\n\t#canEncrypt(req) {\r\n\t\tconst hasArgs = Array.isArray(req.data) && req.data.length > 0 && req.e !== false;\r\n\t\treturn this.#engine.Security.isValid && hasArgs;\r\n\t}\r\n\r\n\t/**\r\n\t * Prepare remote call, encrypt if avaialble\r\n\t *\r\n\t * @param {Object} req\r\n\t *         Data to send (optionaly encrypt)\r\n\t */\r\n\tasync #onCall(req, callback) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet msg = null;\r\n\r\n\t\tif (req.id !== me.#engine.id) return;\r\n\r\n\t\tconst isEncrypt = me.#canEncrypt(req);\r\n\r\n\t\tme.#queue.updateRequest(req, callback);\r\n\r\n\t\t// encrypt if supported\r\n\t\tif (isEncrypt) {\r\n\t\t\tconst enc = await me.#engine.Security.encrypt(req.data);\r\n\t\t\tconst payload = Object.assign({}, me.#engine.querys || {}, enc || {});\r\n\t\t\treq.data = [payload];\r\n\t\t}\r\n\r\n\t\tconst data = {\r\n\t\t\tcmd: isEncrypt ? 'enc' : 'data',\r\n\t\t\ttype: 'ws',\r\n\t\t\tdata: [req]\r\n\t\t};\r\n\r\n\t\tmsg = JSON.stringify(data);\r\n\r\n\t\tif (!Streams.isAvailable) {\r\n\t\t\treturn me.#webSocket.send(msg);\r\n\t\t}\r\n\r\n\t\tmsg = await Streams.compress(msg);\r\n\t\tme.#webSocket.send(msg);\r\n\t}\r\n\r\n\tasync #startSocket(resolve, reject) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tconst challenge = Date.now();\r\n\t\tconst url = new URL(engine.serviceURL);\r\n\r\n\t\tconst headers = Object.assign({}, engine.headers || {});\r\n\t\tconst querys = Object.assign({}, engine.querys || {});\r\n\t\tquerys.q = challenge;\r\n\t\tquerys.c = Streams.isAvailable;\r\n\r\n\t\tObject.entries(querys || {}).forEach((v) => {\r\n\t\t\turl.searchParams.append(v[0], encodeURIComponent(v[1]));\r\n\t\t});\r\n\r\n\t\tme.#webSocket = new WebSocket(url.toString(), ['ws4is']);\r\n\t\tme.#webSocket.binaryType = \"arraybuffer\";\r\n\r\n\t\tconst onCall = me.#onCall.bind(me);\r\n\r\n\t\tme.#webSocket.onopen = (event) => {\r\n\r\n\t\t\tme.emit('online', event);\r\n\t\t\tgenerator.on('call', onCall);\r\n\r\n\t\t\tif (!engine.isWSAPI) {\r\n\t\t\t\treturn resolve(true);\r\n\t\t\t}\r\n\r\n\t\t\tgenerator.once('api', async (data) => {\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tdata.challenge = challenge;\r\n\t\t\t\t\tawait engine.registerAPI(data);\r\n\t\t\t\t\tresolve(true);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\r\n\t\t};\r\n\r\n\t\tme.#webSocket.onclose = (event) => {\r\n\t\t\tgenerator.off('call', onCall);\r\n\t\t\tme.stop();\r\n\t\t\tme.emit('offline', event);\r\n\t\t}\r\n\r\n\t\tme.#webSocket.onerror = (event) => {\r\n\t\t\tgenerator.off('call', onCall);\r\n\t\t\treject(event);\r\n\t\t\tme.stop();\r\n\t\t\tme.emit('error', event);\r\n\t\t};\r\n\r\n\t\tme.#webSocket.onmessage = (event) => {\r\n\t\t\tme.#prepareMessage(event.data);\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t#isJsonObj(msg) {\r\n\t\treturn msg.startsWith('{') && msg.endsWith('}');\r\n\t}\r\n\r\n\t#isJsonArray(msg) {\r\n\t\treturn msg.startsWith('[') && msg.endsWith(']');\r\n\t}\r\n\r\n\t/**\r\n\t * Parse and prepare received message for processing\r\n\t *\r\n\t * @param {String} mesasge\r\n\t *\r\n\t */\r\n\tasync #prepareMessage(message) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tlet obj = null;\r\n\t\tlet text = message;\r\n\r\n\t\ttry {\r\n\r\n\t\t\tif (message instanceof ArrayBuffer) {\r\n\t\t\t\ttext = await Streams.decompress(message);\r\n\t\t\t}\r\n\r\n\t\t\tconst msg = text.trim();\r\n\t\t\tconst isJSON = me.#isJsonObj(msg) || me.#isJsonArray(msg);\r\n\r\n\t\t\tif (isJSON) {\r\n\t\t\t\tobj = JSON.parse(text);\r\n\t\t\t\tme.#onMessage(obj);\r\n\t\t\t} else {\r\n\t\t\t\tgenerator.emit('raw', text);\r\n\t\t\t}\r\n\r\n\t\t} catch (e) {\r\n\t\t\tgenerator.emit('error', e);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Process received message\r\n\t *\r\n\t * @param {*} msg\r\n\t *\r\n\t */\r\n\tasync #onMessage(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet data = null;\r\n\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\t\tconst security = engine.Security;\r\n\r\n\t\tif (obj.cmd === 'api') {\r\n\t\t\treturn generator.emit('api', obj.data);\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'err') {\r\n\t\t\treturn generator.emit('error', obj.result);\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'enc') {\r\n\t\t\tif (security.isAvailable) {\r\n\t\t\t\tdata = await security.decrypt(obj);\r\n\t\t\t} else {\r\n\t\t\t\treturn generator.emit('error', new Error('Security available on https/wss only'));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'data') {\r\n\t\t\tdata = obj.data;\r\n\t\t}\r\n\r\n\t\tif (data) {\r\n\t\t\tconst unknown = me.#queue.process(data);\r\n\t\t\tunknown.forEach((obj) => me.emit('message', obj));\r\n\t\t} else {\r\n\t\t\tme.emit('message', data);\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Web Requester Engine\r\n * Used to call remote services through HTTP/S\r\n */\r\nexport default class WebChannel {\r\n\r\n\t#engine = null;\r\n\r\n\t/**\r\n\t * If http/s used in url, make standard fetch call to the defined service\r\n\t */\r\n\tasync init(engine) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (me.#engine) me.stop();\r\n\r\n\t\tme.#engine = engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tconst data = await me.#getAPI(engine.apiURL);\r\n\t\tawait engine.registerAPI(data);\r\n\r\n\t\tif (engine.isSockChannel) return;\r\n\r\n\t\tgenerator.on('call', me.#onRequest.bind(me));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Disengage listeners and links\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tme.#engine = null;\r\n\r\n\t\tengine.Generator.off('call');\r\n\t\tif (engine.isSockChannel) return;\r\n\t\ttry {\r\n\t\t\tfetch(engine.serviceURL, {\r\n\t\t\t\tmethod: 'delete'\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Callback for API call request,\r\n\t * here we make remote API call\r\n\t */\r\n\tasync #onRequest(req, callback) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet o = null;\r\n\t\tlet e = null;\r\n\r\n\t\tif (req.id !== me.#engine.id) return;\r\n\r\n\t\ttry {\r\n\t\t\to = await me.#onCall(me.#engine, req);\r\n\t\t} catch (err) {\r\n\t\t\te = err;\r\n\t\t}\r\n\r\n\t\tcallback(e, o);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Get API definition through HTTP/s channel\r\n\t *\r\n\t * @param {String} url\r\n\t * \t\t  URL Address for API service definitions\r\n\t */\r\n\tasync #getAPI(url) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst service = url;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst id = Date.now();\r\n\r\n\t\tconst headers = Object.assign({}, engine.headers || {}, { 'x-time': id });\r\n\r\n\t\tconst resp = await fetch(service, {\r\n\t\t\tmethod: 'get',\r\n\t\t\theaders: headers,\r\n\t\t\tcredentials: 'same-origin'\r\n\t\t});\r\n\r\n\t\tconst data = await resp.json();\r\n\r\n\t\t// update local challenge for signature verificator\r\n\t\tdata.challenge = id.toString();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Send data to server with http/s channel\r\n\t */\r\n\tasync #fetchCall(url, data) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst MIME = 'application/json';\r\n\t\tconst HEADERS_ = {\r\n\t\t\t'Accept': MIME,\r\n\t\t\t'Content-Type': MIME\r\n\t\t};\r\n\r\n\t\tconst service = new URL(url);\r\n\t\tconst headers = Object.assign({}, engine.headers || {}, HEADERS_);\r\n\t\tconst querys = Object.assign({}, engine.querys || {});\r\n\t\tconst payload = Object.assign({}, engine.querys || {}, data || {});\r\n\t\tconst body = JSON.stringify(payload);\r\n\t\tconst req = {\r\n\t\t\tmethod: 'post',\r\n\t\t\theaders: headers,\r\n\t\t\tbody: body\r\n\t\t};\r\n\t\tObject.entries(querys || {}).forEach((v) => {\r\n\t\t\tservice.searchParams.append(v[0], encodeURIComponent(v[1]));\r\n\t\t});\r\n\t\tconst res = await fetch(service.toString(), req);\r\n\t\tconst json = await res.json();\r\n\r\n\t\treturn json;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Prepare remote call, encrypt if available\r\n\t *\r\n\t * @param {String} url\r\n\t *        Service URL to receive data\r\n\t *\r\n\t * @param {Object} req\r\n\t *         Data to send (optionally encrypt)\r\n\t */\r\n\tasync #onCall(engine, req) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst security = engine.Security;\r\n\t\tconst url = engine.serviceURL;\r\n\r\n\t\tconst hasArgs = Array.isArray(req.data) && req.data.length > 0;\r\n\t\tconst shouldEncrypt = security.isValid && hasArgs;\r\n\t\tlet data = req;\r\n\r\n\t\t// encrypt if supported\r\n\t\tif (shouldEncrypt) {\r\n\t\t\tdata = await security.encrypt(req);\r\n\t\t}\r\n\r\n\t\t// send and wait for response\r\n\t\tdata = await me.#fetchCall(url, data);\r\n\r\n\t\t// if error throw\r\n\t\tif (data.cmd == 'err') {\r\n\t\t\tthrow new Error(data.result.msg);\r\n\t\t}\r\n\r\n\t\t// if encrypted, decrypt\r\n\t\tif (data.cmd === 'enc') {\r\n\t\t\tif (security.isValid) {\r\n\t\t\t\tdata = await security.decrypt(data);\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error('Security available on https/wss only');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// return server response\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport Generator from \"./Generator.mjs\";\r\nimport Security from \"./Security.mjs\";\r\nimport SocketChannel from \"./Socket.mjs\";\r\nimport WebChannel from \"./Web.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to initialize remote API and remote services.\r\n */\r\nconst ERROR_MESSAGE = 'Invalid definition for Engine Remote Service';\r\nconst ERROR_API_UNDEFINED = 'API Url not defined!';\r\nconst ERROR_SVC_UNDEFINED = 'Service Url not defined!';\r\n\r\n/**\r\n * Main class for Quark Engine Client\r\n */\r\nexport default class Engine {\r\n\r\n\tconstructor(cfg) {\r\n\r\n\t\tcfg = cfg || {};\r\n\r\n\t\tif (!cfg.api) {\r\n\t\t\tthrow new Error(ERROR_API_UNDEFINED);\r\n\t\t}\r\n\r\n\t\tif (!cfg.service) {\r\n\t\t\tthrow new Error(ERROR_SVC_UNDEFINED);\r\n\t\t}\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tme.cfg = null;\r\n\t\tme.isWSAPI = false;\r\n\t\tme.isWebChannel = false;\r\n\t\tme.isSockChannel = false;\r\n\r\n\t\tme.Security = null;\r\n\t\tme.Generator = null;\r\n\t\tme.WebChannel = null;\r\n\t\tme.SocketChannel = null;\r\n\t\tme.id = Date.now();\r\n\r\n\t\tme.cfg = cfg;\r\n\t\tme.isWSAPI = cfg.api === cfg.service && cfg.api.indexOf('ws') == 0;\r\n\r\n\t\tme.headers = cfg.headers || {};\r\n\t\tme.querys = cfg.querys || {};\r\n\r\n\t\tme.isWebChannel = cfg.service.indexOf('http') === 0;\r\n\t\tme.isSockChannel = cfg.service.indexOf('ws') === 0;\r\n\r\n\t\tif ((me.isWebChannel || me.isSockChannel) === false) {\r\n\t\t\tthrow new Error(ERROR_MESSAGE);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/*\r\n\t * Initialize engine, throws error,\r\n\t */\r\n\tasync init() {\r\n\r\n\t\tconst me = this;\r\n\t\tif (me.isActive) return;\r\n\r\n\t\tme.Security = new Security();\r\n\t\tme.Generator = new Generator(me.id);\r\n\r\n\t\tif (me.isWebChannel || me.isWSAPI == false) {\r\n\t\t\tme.WebChannel = new WebChannel();\r\n\t\t\tawait me.WebChannel.init(me);\r\n\t\t}\r\n\r\n\t\tif (me.isSockChannel) {\r\n\t\t\tme.SocketChannel = new SocketChannel();\r\n\t\t\tawait me.SocketChannel.init(me);\r\n\t\t}\r\n\r\n\t\treturn me;\r\n\t}\r\n\r\n\t/**\r\n\t * Use internaly from channel to register received\r\n\t * API definitiona and security data\r\n\t */\r\n\tasync registerAPI(data) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\t// initialize encryption if provided\r\n\t\tif (data.signature) {\r\n\t\t\tif (!me.Security?.isActive) {\r\n\t\t\t\tawait me.Security.init(data);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tme.Generator?.build(data.api);\r\n\t}\r\n\r\n\t/**\r\n\t * Stop engine instance by clearing all references\r\n\t * stoping listeners, stoping socket is avaialble\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tme.WebChannel?.stop();\r\n\t\tme.SocketChannel?.stop();\r\n\t\tme.Generator?.stop();\r\n\r\n\t\tme.WebChannel = null;\r\n\t\tme.SocketChannel = null;\r\n\t\tme.Generator = null;\r\n\t\tme.Security = null;\r\n\t\tme.cfg = null;\r\n\t}\r\n\r\n\t/*\r\n\t * Return generated API\r\n\t */\r\n\tget api() {\r\n\t\treturn this.Generator?.api || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Check if engine is active\r\n\t */\r\n\tget isActive() {\r\n\t\tconst me = this;\r\n\t\tif (me.SocketChannel && !me.SocketChannel.isOpen) return false;\r\n\t\treturn me.api && me.Security ? true : false;\r\n\t}\r\n\r\n\t/*\r\n\t * Return API URL address\r\n\t */\r\n\tget apiURL() {\r\n\t\treturn this.cfg?.api || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Return Service URL address\r\n\t */\r\n\tget serviceURL() {\r\n\t\treturn this.cfg?.service || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Static instance builder\r\n\t */\r\n\tstatic async init(cfg) {\r\n\t\tconst engine = new Engine(cfg);\r\n\t\treturn engine.init();\r\n\t}\r\n}\r\n"],"names":["Buffer","static","value","type","fromBase64","fromHex","toBase64","toHex","arry","i","length","push","parseInt","substr","Uint8Array","strbin","atob","buffer","ArrayBuffer","bufView","strLen","charCodeAt","Array","prototype","map","call","x","toString","slice","join","btoa","Event","EventTarget","listeners","Set","list","listener","from","this","isFunction","filter","o","fn","addEventListener","opt","add","super","removeEventListener","me","forEach","delete","unbind","clear","on","once","wrap","e","off","emit","data","evt","CustomEvent","detail","dispatchEvent","send","listen","unlisten","wait","Promise","r","preventDefault","stopPropagation","Object","freeze","Streams","isAvailable","CompressionStream","DecompressionStream","text","encoding","byteArray","TextEncoder","encode","cs","writer","writable","getWriter","write","close","Response","readable","arrayBuffer","TextDecoder","decode","Security","VERSION","encKEY","aesKEY","exportedAES","encoder","decoder","getChallenge","cfg","challenge","keyEnc","keyVer","getRandom","size","array","crypto","getRandomValues","async","subtle","generateKey","name","key","exportKey","mode","binaryDer","importKey","signature","binSignature","binChallenge","verify","hash","encoded","encrypt","iv","counter","databin","decrypt","isValid","importRsaKey","generateAesKey","exportAesKey","verKey","namedCurve","Error","bin","set","str","JSON","stringify","encryptedKey","encryptRSA","encryptedData","encryptAesMessage","t","d","k","to","message","decryptAesMessage","obj","parse","cmd","security","init","Queue","Map","up","down","tid","updateRequest","req","callback","reset","process","unknown","isArray","res","execute","unkown","has","get","Request","id","timeout","constructor","object","property","receiver","bind","clearTimeout","setTimeout","Proxy","Generator","model","cnt","api","stop","detach","cleanup","el","_id_","values","build","buildAPI","v","buildInstance","tree","action","buildNamespace","namespace","methods","buildMethod","tmp","globalThis","tmp2","split","every","instance","enc","n","c","m","l","len","apiFn","params","prop","args","arguments","method","ts","Date","now","seal","resolve","reject","proxy","onResponse","result","success","generator","SocketChannel","queue","webSocket","engine","startSocket","isOpen","readyState","OPEN","canEncrypt","hasArgs","msg","isEncrypt","payload","assign","querys","compress","url","URL","serviceURL","headers","q","entries","searchParams","append","encodeURIComponent","WebSocket","binaryType","onCall","onopen","event","isWSAPI","registerAPI","onclose","onerror","onmessage","prepareMessage","isJsonObj","startsWith","endsWith","isJsonArray","decompress","trim","onMessage","WebChannel","getAPI","apiURL","isSockChannel","onRequest","fetch","err","service","resp","credentials","json","MIME","HEADERS_","Accept","body","fetchCall","Engine","isWebChannel","indexOf","isActive"],"mappings":"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"}