{"version":3,"file":"io.greenscreens.quark.esm.min.js","sources":["../modules/core/Buffer.mjs","../modules/core/EventExt.mjs","../modules/core/Streams.mjs","../modules/core/Security.mjs","../modules/core/Queue.mjs","../modules/core/Request.mjs","../modules/core/Generator.mjs","../modules/core/SocketChannel.mjs","../modules/core/WebChannel.mjs","../modules/core/QuarkEngine.mjs"],"sourcesContent":["/*\r\n * Copyright (C) 2015, 2023 Green Screens Ltd.\r\n */\r\n\r\nexport default class Buffer {\r\n\r\n\tstatic #encoder = new TextEncoder();\r\n\tstatic #decoder = new TextDecoder(); \r\n\r\n    /**\r\n     * Detect data and convert to Uint8Array\r\n     * \r\n     * @param {variant}\r\n     * @returns {variant}\r\n     */\r\n    static validateData(src) {\r\n        let data = null;\r\n        if (src instanceof Array) {\r\n            data = new Uint8Array(src);\r\n        } else if (src instanceof ArrayBuffer) {\r\n            data = new Uint8Array(src);\r\n        } else if (src instanceof Uint8Array) {\r\n            data = src;\r\n        } else if (src instanceof String || typeof src === 'string') {\r\n            data = Buffer.fromText(src);\r\n        } else if (src.toArrayBuffer) {\r\n            data = new Uint8Array(src.toArrayBuffer());\r\n        } else {\r\n            throw \"Invalid input, must be String or ArrayBuffer or Uint8Array\";\r\n        }\r\n        return data;\r\n    }\r\n    \r\n    /**\r\n     * Verify if data is string\r\n     * @param {*} data \r\n     * @returns \r\n     */\r\n     static isString(data) {\r\n        return typeof data === 'string';\r\n    }\r\n\r\n    /**\r\n     * Check if string is hex string\r\n     * @param {*} data \r\n     * @returns \r\n     */\r\n    static isHexString(data) {\r\n        return Buffer.isString(data) ? (/^[0-9A-Fa-f]+$/g).test(data) : false;\r\n    }\r\n    \r\n    static toBuffer(data, b64 = false) {\r\n        const me = Buffer;\r\n        if (me.isString(data)) {\r\n            if (b64) {\r\n                data = me.fromBase64(data);\r\n            } else  if (me.isHexString(data)) {\r\n                data = me.fromHex(data);\r\n            } else {\r\n                data = me.fromText(data);\r\n            }   \r\n        }  \r\n        return me.validateData(data);\r\n    }\r\n    \r\n\tstatic toText(val) {\t\t\r\n\t\treturn Buffer.isText(val) ? val : Buffer.#decoder.decode(val);\r\n\t}\r\n\r\n\tstatic fromText(val) {\t\t\r\n\t\treturn Buffer.isText(val) ? Buffer.#encoder.encode(val) : val;\r\n\t}\r\n\r\n\tstatic isText(val) {\r\n\t\treturn typeof val === 'string';\r\n\t}\r\n\t\r\n\tstatic fromHex(value) {\r\n\r\n\t\tconst arry = [];\r\n\r\n\t\tfor (let i = 0; i < value.length; i += 2) {\r\n\t\t\tarry.push(parseInt(\"0x\" + value.substr(i, 2), 16));\r\n\t\t}\r\n\r\n\t\treturn new Uint8Array(arry);\r\n\t}\r\n\r\n\tstatic toHex(buffer) {\r\n\t\treturn Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('');\r\n\t}\r\n\t\r\n\tstatic fromBase64(value) {\r\n\r\n\t\tconst strbin = atob(value);\r\n\t\tconst buffer = new ArrayBuffer(strbin.length);\r\n\t\tconst bufView = new Uint8Array(buffer);\r\n\r\n\t\tfor (let i = 0, strLen = strbin.length; i < strLen; i++) {\r\n\t\t\tbufView[i] = strbin.charCodeAt(i);\r\n\t\t}\r\n\r\n\t\treturn bufView;\r\n\t}\r\n\r\n\tstatic toBase64(buffer) {\r\n\t\treturn globalThis.btoa(new Uint8Array(buffer));\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * A module loading Event class\r\n * @module Events\r\n */\r\n\r\n/**\r\n * Extends native event by adding helper functions\r\n */\r\nexport default class EventExt extends EventTarget {\r\n\r\n    #listeners = new Set();\r\n\r\n    #list(type = '', listener) {\r\n        const me = this;\r\n        const list = Array.from(me.#listeners);\r\n        return EventExt.#isFunction(listener) ? \r\n            list.filter(o => o.type === type && o.listener === listener)\r\n            :\r\n            list.filter(o => o.type === type);\r\n    }\r\n\r\n    addEventListener(type, listener, opt) {\r\n        const me = this;\r\n        if (!EventExt.#isFunction(listener)) return false;\r\n        me.#listeners.add({ type: type, listener: listener });        \r\n        return super.addEventListener(type, listener, opt);\r\n    }\r\n\r\n    removeEventListener(type, listener) {\r\n        const me = this;\r\n        const list = me.#list(type, listener);\r\n        list.forEach(o => super.removeEventListener(o.type, o.listener))\r\n        list.forEach(o => me.#listeners.delete(o)); \r\n    }\r\n\r\n    /**\r\n     * Remove all listeners\r\n     */\r\n    unbind() {\r\n        const me = this;\r\n        Array.from(me.#listeners).forEach(o => {\r\n            super.removeEventListener(o.type, o.listener);\r\n        });\r\n        me.#listeners.clear();\r\n    }\r\n\r\n    /**\r\n     * Listen for events\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    on(type = '', listener) {\r\n        return this.addEventListener(type, listener);\r\n    }\r\n\r\n    /**\r\n     * Listen for events only once\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    once(type, listener) {\r\n        const me = this;\r\n        let wrap = (e) => {\r\n            listener(e);\r\n            wrap = null;\r\n        }\r\n        wrap.type = type;\r\n        wrap.listener = listener;\r\n        return me.addEventListener(type, wrap, { once: true });\r\n    }\r\n\r\n    /**\r\n     * Stop listening for events\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    off(type = '', listener) {\r\n        return this.removeEventListener(type, listener);\r\n    }\r\n\r\n    /**\r\n     * Send event to listeners\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {object} data  Data to send \r\n     */\r\n    emit(type, data) {\r\n        if (!type) return false;\r\n        const evt = new CustomEvent(type, { detail: data });\r\n        return this.dispatchEvent(evt);\r\n    }\r\n\r\n    send(type, data) {this.emit(type, data);}\r\n    listen(type, listener) {this.on(type, listener);}\r\n    unlisten(type, listener) {this.off(type, listener);}\r\n\r\n    /**\r\n     * Wait for an event \r\n     * @param {string} type Event name to be listened\r\n     * @returns {Event}\r\n     */\r\n\twait(type = '') {\r\n        if (!type) return e('Event undefined!');\r\n\t\tconst me = this;\r\n\t\treturn new Promise((r, e) => {\r\n\t\t\tme.once(type, (e) => r(e));\r\n\t\t});\r\n\t}\r\n \r\n    static #isFunction(fn) {\r\n        return typeof fn === 'function';\r\n    }\r\n\r\n\t/**\r\n\t * Generic prevent event bubling\r\n\t * \r\n\t * @param {Event} e \r\n\t */\r\n\tstatic prevent(e) {\r\n\t\tif (EventExt.#isFunction(e, 'preventDefault')) e.preventDefault();\r\n\t\tif (EventExt.#isFunction(e, 'stopPropagation')) e.stopPropagation();\r\n\t}\r\n\r\n    static {\r\n        Object.freeze(Event);\r\n    }\r\n\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport Buffer from './Buffer.mjs';\r\n\r\n/**\r\n * Browser native compression\r\n */\r\nexport default class Streams {\r\n\r\n\tstatic get isAvailable() {\r\n\t\treturn typeof CompressionStream !== 'undefined' &&\r\n\t\t\ttypeof DecompressionStream !== 'undefined';\r\n\t}\r\n\r\n\t/**\r\n\t * Stream header GS[version(5)][type(0|1|2|3)][len]\r\n\t * type: 0 - utf8 binary string, 1 - compressed, 2 - encrypted, 3 - 1 & 2\r\n\t * new Uint8Array([71, 83, 5, type, 0, 0, 0, 0]);\r\n\t * @param {Uint8Array} data\r\n\t * @returns {Uint8Array}\r\n\t */\r\n\tstatic #toGS(raw, encrypted = false, compressed = false) {\r\n\t\tif (!raw instanceof Uint8Array) return raw;\r\n\t\tconst type = Streams.#dataType(encrypted, compressed);\r\n\t\t\r\n\t\tconst data = new Uint8Array(8 + raw.length);      \r\n\t\tconst dv = new DataView(data.buffer);\r\n\t\tdv.setUint8(0, 71);\r\n\t\tdv.setUint8(1, 83);\r\n\t\tdv.setUint8(2, 5);\r\n\t\tdv.setUint8(3, type);\r\n\t\tdv.setUint32(4, raw.length);\r\n\t\tdata.set(raw, 8);\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * Encode binary message to GS binary format\r\n\t * @param {*} raw \r\n\t * @param {*} security \r\n\t */\r\n\tstatic async wrap(raw, security) {\r\n\t\traw = Streams.toBinary(raw);\r\n\t\traw = await Streams.compressOrDefault(raw);\r\n\t\traw = await security.encrypt(raw);\r\n\t\traw = Streams.#toGS(raw, security.isValid, Streams.isAvailable);\r\n\t\t/*\r\n\t\tif (globalThis.QUARK_DEBUG) {\r\n\t\t\tconsole.log('DEBUG: Output :', Buffer.toHex(raw));\r\n\t\t}\r\n\t\t*/\r\n\t\treturn raw;\r\n\t}\r\n\t\t\r\n\t/**\r\n\t * Decode binary message from GS binary format\r\n\t * @param {*} raw \r\n\t * @param {*} security \r\n\t */\r\n\tstatic async unwrap(raw, security) {\r\n\r\n\t\tif (raw instanceof Uint8Array) raw = raw.buffer;\r\n\r\n\t\t/*\r\n\t\tif (globalThis.QUARK_DEBUG) {\r\n\t\t\tconsole.log('DEBUG: Input :', Buffer.toHex(raw));\r\n\t\t}\r\n\t\t*/\r\n\t\t\r\n\t\tconst dv = new DataView(raw);\r\n\t\tconst isGS = Streams.#isGS(dv);\r\n\t\t\r\n\t\traw = Streams.toBinary(raw);\r\n\t\tif (!isGS) return raw;\r\n\r\n\t\tconst type = dv.getUint8(3);\r\n\t\tconst len = dv.getUint32(4);\r\n\t\t\r\n\t\tif (dv.byteLength !== len + 8) return raw;\r\n\r\n\t\traw = raw.slice(8);\r\n\r\n\t\tconst isCompress = Streams.isCompressFlag(type);\r\n\t\tconst isEncrypt = Streams.isEncryptFlag(type);\r\n\r\n\t\tif (isEncrypt) {\r\n\t\t\traw = await security?.decrypt(raw);\r\n\t\t}\r\n\r\n\t\tif (isCompress) {\r\n\t\t\traw = await Streams.decompress(raw).arrayBuffer();\r\n\t\t}\r\n\r\n\t\traw = Streams.toBinary(raw);\r\n\t\tif(!Streams.isJson(raw)) throw new Error('Invalid response');\r\n\t\t\r\n\t\treturn JSON.parse(Buffer.toText(raw));\t\t\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Check if DataView id GS data format\r\n\t * @param {*} dv \r\n\t * @returns \r\n\t */\r\n\tstatic #isGS(dv) {\r\n\t\treturn dv.byteLength > 8 && dv.getUint16(0) === 18259 && dv.getUint8(2) === 5;\r\n\t}\r\n\r\n\tstatic isCompressFlag(type) {\r\n\t\treturn (type & 1) === 1;\r\n\t}\r\n\r\n\tstatic isEncryptFlag(type) {\r\n\t\treturn (type & 2) === 2;\r\n\t}\r\n\r\n\tstatic #dataType(isEncrypt, isCompress) {\r\n\t\tconst type = isCompress ? 1 : 0;\r\n\t\treturn type | (isEncrypt ? 2 : 0);\r\n\t}\r\n\r\n\tstatic #stream(data, stream) {\r\n\t\tconst me = this;\r\n\t\tconst byteArray = me.toBinary(data);\r\n\t\tconst writer = stream.writable.getWriter();\r\n\t\twriter.write(byteArray);\r\n\t\twriter.close();\r\n\t\treturn new Response(stream.readable);\r\n\t}\r\n\r\n\t/**\r\n\t * If compression available, compress, \r\n\t * else return original value\r\n\t * @param {*} data \r\n\t * @param {*} encoding \r\n\t */\r\n\tstatic async compressOrDefault(data, encoding = 'gzip') {\r\n\t\tif (!Streams.isAvailable) return data;\r\n\t\tconst raw = await Streams.compress(data, encoding).arrayBuffer();\r\n\t\treturn Streams.toBinary(raw);\r\n\t}\r\n\r\n\t/**\r\n\t * If decompression available, decompress, \r\n\t * else return original value\r\n\t * @param {*} data \r\n\t * @param {*} encoding \r\n\t */\r\n\tstatic async decompressOrDefault(data, encoding = 'gzip') {\r\n\t\tif (!Streams.isAvailable) return data;\r\n\t\tconst raw = await Streams.decompress(data, encoding).arrayBuffer();\r\n\t\treturn Streams.toBinary(raw);\r\n\t}\r\n\r\n\t/**\r\n\t * Compress to gzip format\r\n\t * @param {*} data \r\n\t * @param {*} encoding gzip | deflate (zlib)\r\n\t * @returns {Response} \r\n\t */\t\r\n\tstatic compress(data, encoding = 'gzip') {\r\n\t\tconst stream = new CompressionStream(encoding);\r\n\t\treturn this.#stream(data, stream);\r\n\t}\r\n\r\n\t/**\r\n\t * Decompress from gzip format\r\n\t * @param {*} data \r\n\t * @param {*} encoding gzip | deflate (zlib)\r\n\t * @returns {Response} \r\n\t */\r\n\tstatic decompress(data, encoding = 'gzip') {\r\n\t\tconst stream = new DecompressionStream(encoding);\r\n\t\treturn this.#stream(data, stream);\r\n\t}\r\n\r\n\tstatic toBinary(data) {\r\n\t\tif (data instanceof Uint8Array) return data;\r\n\t\tif (data instanceof ArrayBuffer) return new Uint8Array(data);\r\n\t\tif (typeof data === 'string' ) return Buffer.fromText(data);\r\n\t\treturn this.toBinary(JSON.stringify(data));\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 2 bytes mathes gzip/deflate header signature\r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\r\n\tstatic isCompressed(data) {\r\n\t\tconst me = this;\r\n\t\tdata = me.toBinary(data);\r\n\t\treturn me.isGzip(data) || me.isZlib(data);\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 3 bytes matches gzip header signature\r\n\t * \r\n\t * zlib\r\n\t * 1F 8B 08\r\n\t * 31 139 8\r\n\t * \r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\t\r\n\tstatic isGzip(data) {\r\n\t\treturn data.at(0) === 31 && data.at(1) === 139 && data.at(2) === 8;\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 2 bytes matches deflate (zlib) header signature\r\n\t * \r\n\t * deflate\r\n\t * 78  (01, 5e,9c, da) \r\n\t * 120 (1, 94, 156, 218)\r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\t\r\n\tstatic isZlib(data) {\r\n\t\treturn data.at(0) === 120 && [1, 94, 156, 218].indexOf(data.at(1)) > -1;\r\n\t}\r\n\r\n\tstatic isJson(data) {\r\n\t\tconst me = this;\r\n\t\tdata = typeof data === 'string' ? data.trim() : me.toBinary(data);\r\n\t\tconst first = data.at(0);\r\n\t\tconst last = data.at(data.length - 1);\t\t\r\n\t\treturn me.#isJsonArray(first, last) || me.#isJsonObj(first, last);\r\n\t}\r\n\r\n\tstatic #isJsonObj(first, last) {\r\n\t\treturn (first === '{' || first === 123)  && (last === '}' || last === 125);\r\n\t}\r\n\r\n\tstatic #isJsonArray(first, last) {\r\n\t\treturn (first === '[' || first === 91)  && (last === ']' || last === 93);\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Security engine using Web Crypto API to encrypt / decrypt\r\n * messages between browser and server.\r\n *\r\n */\r\n\r\nimport Buffer from \"./Buffer.mjs\";\r\n\r\nexport default class Security {\r\n\r\n    static #ECDH_TYPE = { name: 'ECDH', namedCurve: \"P-256\" };\r\n    static #AES_TYPE= { name: \"AES-CTR\", length: 256 };\r\n    \r\n    #publicKey = null;\r\n    #aesKey = null;\r\n\r\n    get publicKey() { return this.#publicKey;}\r\n\r\n    cookie(path = \"/\") {\r\n        return `gs-public-key=${this.#publicKey||''};path=${path}`;\r\n    }\r\n\r\n    updateCookie(path = \"/\") {\r\n        document.cookie = this.cookie(path);\r\n    }\r\n\r\n    /**\r\n     *  Use local challenge, to verify received data signature\r\n     *\r\n     *  @param {Object} cfg Data received from server contins public key and signature\r\n     */\r\n    #getChallenge(cfg) {\r\n        return [cfg.challenge || '', cfg.keyEnc || '', cfg.keyVer || ''].join('');\r\n    }\r\n    \r\n    /**\r\n     * Import Async key received from server\r\n     * Key is publicKey used to send encrypted AES key\r\n     *\r\n     * @param {String} key PEM encoded key\r\n     * @param {Object} type Crypto API key definition format\r\n     * @param {String} mode Comma separted list of key usages \r\n     */\r\n    async importKey(key, type, mode) {\r\n        const der = Buffer.fromBase64(key);\r\n        const use = mode ? mode.split(',') : [];\r\n        return crypto.subtle.importKey('spki', der, type, true, use);\r\n    }\r\n    \r\n    /**\r\n     * Export key in hex form\r\n     * @param {CryptoKey} key\r\n     * @returns {string}\r\n     */\r\n    async exportKey(key) {\r\n        const ab = await crypto.subtle.exportKey('raw',  key);\r\n        return Buffer.toHex(ab);\r\n    }\r\n\r\n    /**\r\n     * Verify signature\r\n     *\r\n     * @param {CryptoKey} Public key used for verification\r\n     * @param {ArrayBuffer} signature Signature of received data\r\n     * @param {ArrayBuffer} challenge Challenge to verify with signature (ts + pemENCDEC + pemVERSGN)\r\n     */\r\n    async verify(key, signature, challenge) {\r\n        signature = Buffer.fromBase64(signature);\r\n        challenge = Buffer.toBuffer(challenge);\r\n        const type = { name: \"ECDSA\", hash: { name: \"SHA-384\" } };\r\n        return crypto.subtle.verify(type, key, signature, challenge);\r\n    }\r\n\r\n    async #initVerify(cfg) {\r\n        const me = this;\r\n        const type = { name: 'ECDSA', namedCurve: \"P-384\" };\r\n        const verKey = await me.importKey(cfg.keyVer, type, 'verify');\r\n        const status = await me.verify(verKey, cfg.signature, me.#getChallenge(cfg));\r\n        if (!status) throw new Error('Signature invalid');\r\n    }\r\n\r\n    /**\r\n     * Initialize server public key\r\n     * @param {object} cfg \r\n     */\r\n    #initPublic(cfg) {        \r\n        return this.importKey(cfg.keyEnc, Security.#ECDH_TYPE, '');\r\n    }\r\n\r\n    /**\r\n     * Initialize browser ECDH key pair \r\n     */\r\n    #initKeyPair() {\r\n        const use = ['deriveKey','deriveBits'];\r\n        return crypto.subtle.generateKey(Security.#ECDH_TYPE, true, use);\r\n    }\r\n\r\n    /**\r\n     * Derive shared secret from server public ECDH and browser keypair.private ECDH\r\n     * @returns {CryptoKey}\r\n     */\r\n    #deriveAES(priv, pub) {\r\n        const pubDef = { name: \"ECDH\", public: pub };\r\n        const use = ['encrypt', 'decrypt'];\r\n        const derivedKey = Security.#AES_TYPE;\r\n        const dbg = false; // globalThis.QUARK_DEBUG === true;\r\n        return crypto.subtle.deriveKey(pubDef, priv, derivedKey, dbg, use);\r\n    }\r\n\r\n\t#toAlgo(iv) {\r\n        iv = Buffer.toBuffer(iv);\r\n        const type = Object.assign({counter: iv}, Security.#AES_TYPE);\r\n        type.length = 128;\r\n        return type;\t\t\r\n\t}\r\n\t\r\n    /**\r\n\t * Create random bytes\r\n\t *\r\n\t * @param {int} size\r\n\t *     length of data (required)\r\n\t */\r\n\tgetRandom(size) {\r\n\t\tconst array = new Uint8Array(size);\r\n\t\tcrypto.getRandomValues(array);\r\n\t\treturn array;\r\n\t}\r\n\r\n    /**\r\n     * Encrypt message with AES\r\n     * @param {CryptoKey} key \r\n     * @param {ArrayBuffer} iv IV as Hex string \r\n     * @param {ArrayBuffer} data as Hex string \r\n     */\r\n    async encryptRaw(key, iv, data) {        \r\n        const databin = Buffer.toBuffer(data);\r\n        const type = this.#toAlgo(iv);\r\n        return crypto.subtle.encrypt(type, key, databin);\r\n    }\r\n\r\n    /**\r\n     * Decrypt AES encrypted message\r\n     * @param {CryptoKey} key \r\n     * @param {ArrayBuffer} iv IV as Hex string \r\n     * @param {ArrayBuffer} data as Hex string \r\n     */\r\n    async decryptRaw(key, iv, data) {\r\n        const databin = Buffer.toBuffer(data);\r\n        const type = this.#toAlgo(iv);\r\n        return crypto.subtle.decrypt(type, key, databin);\r\n    }\r\n\r\n    async decryptAsBuffer(key, iv, data) {   \r\n        const result = await this.decryptRaw(key, iv, data);\r\n        return Buffer.toBuffer(result);\r\n    }\r\n\r\n    async encryptAsBuffer(key, iv, data) {   \r\n        const result = await this.encryptRaw(key, iv, data);\r\n        return Buffer.toBuffer(result);\r\n    }\r\n\r\n    async decryptAsString(key, iv, data) {\r\n        const result = await this.decryptRaw(key, iv, data);\r\n        return Buffer.toText(result);\r\n    }\r\n\r\n    async encryptAsHex(key, iv, data) {   \r\n        const result = await this.encryptRaw(key, iv, data);\r\n        return Buffer.toHex(result);\r\n    }\r\n\r\n\tget isValid() {\r\n\t\tconst me = this;\r\n\t\treturn me.#publicKey !== null && me.#aesKey !== null;\r\n\t}\r\n\r\n\tstatic get isAvailable() {\r\n\t\treturn crypto.subtle ? true : false;\r\n\t}\r\n\r\n    /**\r\n     * Initialize encryption and verification keys\r\n     * Verifies data signatures to prevent tampering\r\n     */\r\n    async init(cfg) {\r\n\r\n\t\tif (!Security.isAvailable) {\r\n\t\t\tconsole.log('Security mode not available, TLS protocol required.');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconsole.log('Security Initializing...');\t\t\r\n        const me = this;\r\n\r\n        await me.#initVerify(cfg);\r\n\r\n        const publicKey = await me.#initPublic(cfg);\r\n        const keyPair = await me.#initKeyPair();\r\n        \r\n        me.#publicKey = await me.exportKey(keyPair.publicKey);\r\n        me.#aesKey = await me.#deriveAES(keyPair.privateKey, publicKey);\r\n        \r\n        /*\r\n        if (globalThis.QUARK_DEBUG) {\r\n\t\t\tconst raw = await me.exportKey(me.#aesKey);\r\n\t\t\tconsole.log('DEBUG: Derived key :', raw);\r\n\t\t}\r\n\t\t*/\r\n\t\t\r\n\t\tconsole.log('Security Initialized!');\r\n        \r\n    }\r\n\r\n    /**\r\n     * Encrypt provided data\r\n     * @param {Uint8Array} data Data to encrypt\r\n     * @returns {Uint8Array} [head+iv+data]\r\n     */\r\n    async encrypt(data) {\r\n        const me = this;\r\n        if (!me.isValid) return data;\r\n        if (! data instanceof Uint8Array) return data;\r\n        const iv = me.getRandom(16);\r\n        const d = await me.encryptAsBuffer(me.#aesKey, iv, data);\r\n\r\n        const raw = new Uint8Array(iv.length + d.length);\r\n        raw.set(iv, 0);\r\n        raw.set(d, iv.length);\r\n        return raw;\r\n    }\r\n\r\n\t/**\r\n\t * Decrypt received data in format {d:.., k:...}\r\n\t *\r\n\t * @param {ArrayBuffer|Uint8Array} data\r\n\t * @param {ArrayBuffer|Uint8Array} iv\r\n\t * @return \r\n\t */\r\n\tasync decrypt(data, iv) {\r\n\r\n\t\tconst me = this;\r\n\t\t\r\n\t\tif (!iv) {\r\n\t\t\tiv = data.slice(0, 16);\r\n\t\t\tdata = data.slice(16);\r\n\t\t}\r\n\r\n\t\treturn await me.decryptAsBuffer(me.#aesKey, iv, data);\r\n\t}\r\n\r\n\tstatic async init(cfg) {\r\n\t\tconst security = new Security();\r\n\t\tawait security.init(cfg);\r\n\t\treturn security;\r\n\t}\r\n\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Queue to handle requests\r\n */\r\nexport default class Queue extends Map {\r\n\r\n\t#up = 0;\r\n\t#down = 0;\r\n\t#tid = 0;\r\n\r\n\t/**\r\n\t * Update counters and queue to link resposnes to requests\r\n\t * @param {Object} req\r\n\t *      Request data\r\n\t */\r\n\tupdateRequest(req) {\r\n\t\tconst me = this;\r\n\t\tme.#tid++;\r\n\t\tme.#up++;\r\n\t\treq.tid = me.#tid.toString();\r\n\t\tme.set(req.tid, req);\r\n\t}\r\n\r\n\t/**\r\n\t * Reset queue to remove old stalled elements\r\n\t */\r\n\treset() {\r\n\t\tconst me = this;\r\n\t\tif (me.#up > 50 && me.#down >= me.#up) {\r\n\t\t\tme.#up = 0;\r\n\t\t\tme.#down = 0;\r\n\t\t\tme.clear();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Process array of response records\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\tprocess(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst unknown = [];\r\n\r\n\t\tif (Array.isArray(obj)) {\r\n\t\t\tobj.forEach((o) => {\r\n\t\t\t\tconst res = me.execute(o);\r\n\t\t\t\tif (res) unkown.push(res);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconst o = me.execute(obj);\r\n\t\t\tif (o) unknown.push(o);\r\n\t\t}\r\n\r\n\t\treturn unknown;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Process single response record\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\texecute(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst tid = obj.tid;\r\n\t\tlet unknown = null;\r\n\r\n\t\tme.#down++;\r\n\r\n\t\tif (me.has(tid)) {\r\n\t\t\tconst req = me.get(tid);\r\n\t\t\ttry {\r\n\t\t\t\treq.finish(obj);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log(e);\r\n\t\t\t\treq.finish(e);\r\n\t\t\t} finally {\r\n\t\t\t\tme.delete(tid);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tunknown = obj;\r\n\t\t}\r\n\r\n\t\tme.reset();\r\n\r\n\t\treturn unknown;\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * API engine asynchronous request\r\n */\r\nexport default class Request {\r\n\r\n    #id = 0;\r\n    #timeout = 0;\r\n    #callback;\r\n    \r\n    constructor(timeout , callback) {\r\n        const me = this;\r\n        me.#callback = callback;\r\n        me.#timeout = timeout;\r\n        me.#init();\r\n    }\r\n\r\n    get(object, property) {\r\n        const me = this;\r\n        if (property === 'timeout') return me.timeout;\r\n        if (property === 'finish') return me.callback.bind(me);\r\n        return object[property];\r\n    }\r\n\r\n    callback(o) {\r\n        const me = this;\r\n        if (me.timeout) return;\r\n        me.#clear();\r\n        return me.#callback(o);\r\n    }\r\n\r\n    get timeout() {\r\n        return this.#timeout === true;\r\n    }\r\n\r\n    #clear() {\r\n        const me = this;\r\n        if (me.#id === 0) return;\r\n        clearTimeout(me.#id);\r\n    }\r\n\r\n    #init() {\r\n        const me = this;\r\n        if (me.#timeout === 0) return;\r\n        me.#id = setTimeout(() => {\r\n            me.#timeout = true;\r\n            me.#callback(new Error('Call timeouted!'));\r\n        }, me.#timeout);\r\n    }\r\n\r\n    static wrap(data, timeout , callback) {\r\n        return new Proxy(data, new Request(timeout , callback));\r\n    }\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport EventExt from \"./EventExt.mjs\";\r\nimport Request from \"./Request.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to call remote services.\r\n * All Direct functions linked to defiend namespace\r\n */\r\nexport default class Generator extends EventExt {\r\n\r\n\t#model = {};\r\n\t#id = null;\r\n\t#cnt = 0;\r\n\t#timeout = 0;\r\n\r\n\tconstructor(id = 0, timeout = 0) {\r\n\t\tsuper();\r\n\t\tthis.#id = id;\r\n\t\tthis.#timeout = timeout;\r\n\t}\r\n\r\n\t/**\r\n\t * Return generted API structure and callers\r\n\t */\r\n\tget api() {\r\n\t\treturn this.#model;\r\n\t}\r\n\r\n\t/**\r\n\t * Disconnect generator from API callers\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\t\tme.off('call');\r\n\t\tme.off('api');\r\n\t\tme.off('raw');\r\n\t\tme.off('error');\r\n\t\tme.#detach();\r\n\t}\r\n\r\n\t#cleanup(obj, id) {\r\n\t\tfor (let k in obj) {\r\n\t\t\tlet el = obj[k];\r\n\t\t\tif (typeof el === 'object') {\r\n\t\t\t\tif (this.#cleanup(el, id)) obj[k] = null;\r\n\t\t\t} else if (el._id_ === id) {\r\n\t\t\t\tobj[k] = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Object.values(obj).filter(o => o != null).length === 0;\r\n\t}\r\n\r\n\t#detach() {\r\n\t\tconst me = this;\r\n\t\tme.#cleanup(me.#model, me.#id);\r\n\t\tme.#model = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Build JS object with callable functions that maps to Java side methods\r\n\t * Data is retrieved from API service\r\n\t *\r\n\t * @param {String} url || api object\r\n\t * \t\t  URL Address for API service definitions\r\n\t */\r\n\tbuild(o) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst data = o ? o.api || o : null;\r\n\r\n\t\tif (data) me.#buildAPI(data);\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * From API tree generate namespace tree and\r\n\t * links generated functions to WebScoket api calls\r\n\t *\r\n\t * @param {Object} cfg\r\n\t * \t\tAlternative definition to API\r\n\t */\r\n\t#buildAPI(cfg) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (Array.isArray(cfg)) {\r\n\t\t\tcfg.forEach(v => me.#buildInstance(v));\r\n\t\t} else {\r\n\t\t\tme.#buildInstance(cfg);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Build from single definition\r\n\t *\r\n\t * @param {Object} api\r\n\t * \t\t  Java Class/Method definition\r\n\t */\r\n\t#buildInstance(api) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet tree = null;\r\n\t\tlet action = null;\r\n\r\n\t\ttree = me.#buildNamespace(api.namespace);\r\n\r\n\t\tif (!tree[api.action]) {\r\n\t\t\ttree[api.action] = {};\r\n\t\t}\r\n\t\taction = tree[api.action];\r\n\r\n\t\tme.#reduce(api.methods)?.forEach(v => me.#buildMethod(api.namespace, api.action, action, v, me.#id));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Reduce duplicate methods with parameters overrides\r\n\t * @param {Array<Object>} list \r\n\t * @returns \r\n\t */\r\n\t#reduce(list) {\r\n\t\treturn list.reduce((a, v, i, ar) => {\r\n\r\n\t\t\tif (a.filter(r => r.name == v.name).length == 1) return a;\r\n\r\n\t\t\tconst objs = ar.filter(r => r.name == v.name);\r\n\t\t\tif (objs.length === 1) {\r\n\t\t\t\ta.push(v);\r\n\t\t\t\treturn a;\r\n\t\t\t}\r\n\r\n\t\t\tconst obj = objs.filter(r => r.name === v.name).reduce((a, v) => {\r\n\t\t\t\ta.len.push(v.len);\r\n\t\t\t\ta.async[v.len] = v.async;\r\n\t\t\t\treturn a;\r\n\t\t\t}, { name: v.name, len: [], async: {} });\r\n\r\n\t\t\ta.push(obj);\r\n\t\t\treturn a\r\n\t\t}, []);\r\n\t}\r\n\r\n\t/**\r\n\t * Generate namespace object structure from string version\r\n\t *\r\n\t * @param  {String} namespace\r\n\t * \t\t\tTree structure delimited with dots\r\n\t *\r\n\t * @return {Object}\r\n\t * \t\t\tObject tree structure\r\n\t */\r\n\t#buildNamespace(namespace) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tlet tmp = globalThis;\r\n\t\tlet tmp2 = me.#model;\r\n\r\n\t\tnamespace.split('.').every(v => {\r\n\r\n\t\t\tif (!tmp[v]) tmp[v] = {};\r\n\t\t\ttmp = tmp[v];\r\n\r\n\t\t\tif (!tmp2[v]) tmp2[v] = tmp;\r\n\t\t\ttmp2 = tmp;\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn tmp;\r\n\t}\r\n\r\n\t/**\r\n\t * Build instance methods\r\n\t *\r\n\t * @param {String} namespace\r\n\t * @param {String} action\r\n\t * @param {String} instance\r\n\t * @param {Array} api\r\n\t */\r\n\t#buildMethod(namespace, action, instance, api, id) {\r\n\r\n\t\tconst enc = api.encrypt === false ? false : true;\r\n\t\tconst cfg = {\r\n\t\t\tn: namespace,\r\n\t\t\tc: action,\r\n\t\t\tm: api.name,\r\n\t\t\tl: api.len,\r\n\t\t\ta: api.async,\r\n\t\t\te: enc,\r\n\t\t\ti: id\r\n\t\t};\r\n\r\n\t\tinstance[api.name] = this.#apiFn(cfg);\r\n\t\tinstance[api.name]._id_ = id;\r\n\t\t// Object.freeze(instance[api.name]);\r\n\t}\r\n\r\n\t/**\r\n\t * Generic function used to attach for generated API\r\n\t *\r\n\t * @param {Array} params List of arguments from caller\r\n\t */\r\n\t#apiFn(params) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst prop = params;\r\n\r\n\t\tconst fn = function () {\r\n\r\n\t\t\tconst args = Array.prototype.slice.call(arguments);\r\n\t\t\t\r\n\t\t\t// overriden function with multiple param lengths\r\n\t\t\tconst isOverride = Array.isArray(prop.l);\r\n\t\t\t\r\n\t\t\tconst len = isOverride ? prop.l.filter(v => v === args.length).pop() : prop.l;\r\n\t\t\tif (args.length != len) throw new Error(`Invalid arguments length. Required (${prop.l})`);\r\n\r\n\t\t\tconst isAsync = isOverride ? prop.a[args.length] : prop.a;\r\n\t\t\tconst timeout = isAsync ? 0 : me.#timeout;\r\n\r\n\t\t\tconst req = {\r\n\t\t\t\t\"namespace\": prop.n,\r\n\t\t\t\t\"action\": prop.c,\r\n\t\t\t\t\"method\": prop.m,\r\n\t\t\t\t\"id\": prop.i,\r\n\t\t\t\t\"enc\": prop.e,\r\n\t\t\t\t\"data\": args,\r\n\t\t\t\t\"key\": ++me.#cnt,\r\n\t\t\t\t\"tid\": 0,\r\n\t\t\t\t\"ts\": Date.now()\r\n\t\t\t};\r\n\t\t\tObject.seal(req);\r\n\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst proxy = Request.wrap(req, timeout, (obj) => {\r\n\t\t\t\t\t\tme.#onResponse(obj, resolve, reject);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tme.emit('call', proxy);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.log(e);\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn fn;\r\n\t}\r\n\r\n\t/**\r\n\t * Process remote response\r\n\t */\r\n\t#onResponse(obj, resolve, reject) {\r\n\r\n\t\tif (obj instanceof Error) return reject(obj);\r\n\r\n\t\tconst result = obj.result || obj;\r\n\r\n\t\tif (result.success) {\r\n\t\t\tresolve(result);\r\n\t\t} else {\r\n\t\t\treject(result);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Static instance builder\r\n\t * @param {object} cfg Api list from server side Quark engine\r\n\t * @param {number} id Unique Quark Engine ID - to link functions to the engine instance\r\n\t * @returns \r\n\t */\r\n\tstatic build(cfg, id, timeout) {\r\n\t\tconst generator = new Generator(id, timeout);\r\n\t\tgenerator.build(cfg);\r\n\t\treturn generator;\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport EventExt from \"./EventExt.mjs\";\r\nimport Queue from \"./Queue.mjs\";\r\nimport Streams from \"./Streams.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to call remote services.\r\n * All Direct functions linked to io.greenscreens namespace\r\n */\r\nexport default class SocketChannel extends EventExt {\r\n\r\n\t#queue = new Queue();\r\n\t#webSocket = null;\r\n\t#engine = null;\r\n\t#iid = 0;\r\n\r\n\t/**\r\n\t * Initialize Socket channel\r\n\t */\r\n\tasync init(engine) {\r\n\r\n\t\tconst me = this;\r\n\t\tme.stop();\r\n\t\tme.#engine = engine;\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tme.#startSocket(resolve, reject);\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tget isOpen() {\r\n\t\tconst me = this;\r\n\t\tif (me.#webSocket == null) return false;\r\n\t\treturn me.#webSocket.readyState === me.#webSocket.OPEN;\r\n\t}\r\n\r\n\t/**\r\n\t * Close WebSocket channel if available\r\n\t */\r\n\tstop() {\r\n\t\tconst me = this;\r\n\t\tif (me.#webSocket == null) return false;\r\n\t\tme.#webSocket.close();\r\n\t\tme.#webSocket = null;\r\n\t\tme.#engine = null;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Must be here, if encryption and compression is not available, \r\n\t * for server to regoznize Quark data format.\r\n\t * @param {*} req \r\n\t * @returns \r\n\t */\r\n\t#wrap(cmd, req) {\r\n\t\tconst data = {\r\n\t\t\ttype: 'GS',\r\n\t\t\tcmd : cmd,\r\n\t\t\tdata: req ? [req] : null\r\n\t\t};\r\n\t\treturn JSON.stringify(data);\r\n\t}\r\n\r\n\tget #ping() {\r\n\t\treturn this.#wrap('ping');\r\n\t}\r\n\r\n\t/**\r\n\t * Prepare remote call, encrypt if available\r\n\t *\r\n\t * @param {Object} req\r\n\t *         Data to send (optionaly encrypt)\r\n\t */\r\n\tasync #onCall(req) {\r\n\r\n\t\treq = req.detail;\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (req.id !== me.#engine.id) return;\r\n\r\n\t\tme.#queue.updateRequest(req);\r\n\r\n\t\tconst msg = me.#wrap('data', req);\r\n\t\tconst raw = await Streams.wrap(msg, me.#engine.Security);\r\n\t\tme.#webSocket.send(raw);\r\n\t}\r\n\r\n\tasync #startSocket(resolve, reject) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\t\tconst security = engine.Security;\r\n\r\n\t\tconst challenge = Date.now();\r\n\t\tconst url = new URL(engine.serviceURL);\r\n\r\n\t\t// const headers = Object.assign({}, engine.headers || {});\r\n\t\tconst querys = Object.assign({}, engine.querys || {});\r\n\t\tquerys.q = challenge;\r\n\t\tquerys.c = Streams.isAvailable;\r\n\r\n\t\tObject.entries(querys || {}).forEach((v) => {\r\n\t\t\tif (v[1]) url.searchParams.append(v[0], encodeURIComponent(v[1]));\r\n\t\t});\r\n\r\n\t\tsecurity.updateCookie();\r\n\r\n\t\tme.#webSocket = new WebSocket(url.toString(), ['quark']);\r\n\t\tme.#webSocket.binaryType = \"arraybuffer\";\r\n\r\n\t\tconst onCall = me.#onCall.bind(me);\r\n\r\n\t\tme.#webSocket.onopen = (event) => {\r\n\r\n\t\t\tme.emit('online', event);\r\n\t\t\tgenerator.on('call', onCall);\r\n\t\t\tme.#initPing();\r\n\r\n\t\t\tif (!engine.isWSAPI) {\r\n\t\t\t\treturn resolve(true);\r\n\t\t\t}\r\n\r\n\t\t\tgenerator.once('api', async (data) => {\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tdata.challenge = challenge;\r\n\t\t\t\t\tawait engine.registerAPI(data);\r\n\t\t\t\t\tresolve(true);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\r\n\t\t};\r\n\r\n\t\tme.#webSocket.onclose = (event) => {\r\n\t\t\tgenerator.off('call', onCall);\r\n\t\t\tclearInterval(me.#iid);\r\n\t\t\tme.stop();\r\n\t\t\tme.emit('offline', event);\r\n\t\t}\r\n\r\n\t\tme.#webSocket.onerror = (event) => {\r\n\t\t\tgenerator.off('call', onCall);\r\n\t\t\treject(event);\r\n\t\t\tme.stop();\r\n\t\t\tme.emit('error', event);\r\n\t\t};\r\n\r\n\t\tme.#webSocket.onmessage = async (event) => {\r\n\t\t\ttry {\r\n\t\t\t\tif (event.data instanceof ArrayBuffer) {\r\n\t\t\t\t\tawait me.#prepareBinaryMessage(event.data);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tawait me.#prepareTextMessage(event.data);\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\te.data = event;\r\n\t\t\t\tgenerator.emit('error', e);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}\r\n\t\r\n\t#initPing() {\r\n\t\tconst me = this;\r\n\t\tme.#iid = setInterval(() => {\r\n\t\t\tme.send(me.#ping);\r\n\t\t}, 15 * 1000);\t\r\n\t}\r\n\r\n\tasync #prepareBinaryMessage(message) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst security = engine.Security;\r\n\r\n\t\tmessage = await Streams.unwrap(message, security);\r\n\r\n\t\tconst isJSON = Streams.isJson(message);\r\n\t\tif (!isJSON) return\tgenerator.emit('raw', message);\r\n\r\n\t\tif (Array.isArray(message)) {\r\n\t\t\tmessage.forEach(m => me.#onMessage(m));\r\n\t\t} else {\r\n\t\t\tme.#onMessage(message);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Parse and prepare received message for processing\r\n\t *\r\n\t * @param {String} mesasge\r\n\t *\r\n\t */\r\n\tasync #prepareTextMessage(message) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\ttry {\r\n\t\t\tconst isJSON = Streams.isJson(message);\r\n\r\n\t\t\tif (!isJSON) return generator.emit('raw', message);\r\n\t\t\t\r\n\t\t\tmessage = JSON.parse(message);\r\n\t\t\tif (Array.isArray(message)) {\r\n\t\t\t\tmessage.forEach(m => me.#onMessage(m));\r\n\t\t\t} else {\r\n\t\t\t\tme.#onMessage(obj);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\tgenerator.emit('error', e);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Process received message\r\n\t *\r\n\t * @param {*} msg\r\n\t *\r\n\t */\r\n\tasync #onMessage(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet data = null;\r\n\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tif (obj.cmd === 'api') {\r\n\t\t\treturn generator.emit('api', obj.data);\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'err') {\r\n\t\t\treturn generator.emit('error', obj.result);\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'data') {\r\n\t\t\tdata = obj.data;\r\n\t\t}\r\n\r\n\t\tif (data) {\r\n\t\t\tconst unknown = me.#queue.process(data);\r\n\t\t\tunknown.forEach((obj) => me.emit('message', obj));\r\n\t\t} else {\r\n\t\t\tme.emit('message', data);\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport Streams from \"./Streams.mjs\";\r\n\r\n/**\r\n * Web Requester Engine\r\n * Used to call remote services through HTTP/S\r\n */\r\nexport default class WebChannel {\r\n\r\n\tstatic #MIME_BINARY = 'application/octet-stream';\r\n\tstatic #MIME_JSON = 'application/json';\r\n\r\n\t#engine = null;\r\n\r\n\t/**\r\n\t * If http/s used in url, make standard fetch call to the defined service\r\n\t */\r\n\tasync init(engine) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (me.#engine) me.stop();\r\n\r\n\t\tme.#engine = engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tconst data = await me.#getAPI(engine.apiURL);\r\n\t\tawait engine.registerAPI(data);\r\n\r\n\t\tif (engine.isSocketChannel) return;\r\n\r\n\t\tgenerator.on('call', me.#onRequest.bind(me));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Disengage listeners and links\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tme.#engine = null;\r\n\r\n\t\tengine.Generator.off('call');\r\n\t\tif (engine.isSocketChannel) return;\r\n\t\ttry {\r\n\t\t\tfetch(engine.serviceURL, {\r\n\t\t\t\tmethod: 'delete'\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Callback for API call request,\r\n\t * here we make remote API call\r\n\t */\r\n\tasync #onRequest(req) {\r\n\r\n\t\treq = req.detail;\r\n\t\tconst me = this;\r\n\t\tlet o = null;\r\n\r\n\t\tif (req.id !== me.#engine.id) return;\r\n\r\n\t\ttry {\r\n\t\t\to = await me.#onCall(me.#engine, req);\r\n\t\t\treq.finish(o);\r\n\t\t} catch (err) {\r\n\t\t\treq.finish(err);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Get API definition through HTTP/s channel\r\n\t *\r\n\t * @param {String} url\r\n\t * \t\t  URL Address for API service definitions\r\n\t */\r\n\tasync #getAPI(url) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst service = url;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst id = Date.now();\r\n\r\n\t\tconst headers = Object.assign({}, engine.headers || {}, { 'x-time': id });\r\n\r\n\t\tconst resp = await fetch(service, {\r\n\t\t\tmethod: 'get',\r\n\t\t\theaders: headers,\r\n\t\t\tcredentials: 'same-origin'\r\n\t\t});\r\n\r\n\t\tconst data = await resp.json();\r\n\r\n\t\t// update local challenge for signature verificator\r\n\t\tdata.challenge = id.toString();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\t\r\n\tget #accept() {\r\n\t\treturn `${WebChannel.#MIME_BINARY}, ${WebChannel.#MIME_JSON}`;\r\n\t}\r\n\r\n\t#mime(data) {\r\n\t\tconst isBinary = typeof data === 'string' ? false : true;\r\n\t\treturn isBinary ? WebChannel.#MIME_BINARY : WebChannel.#MIME_JSON;\r\n\t}\r\n\r\n\t/**\r\n\t * Send data to server with http/s channel\r\n\t */\r\n\tasync #fetchCall(url, data, head, isCompress) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst CONTENT_TYPE = me.#mime(data);\r\n\r\n\t\tconst HEADERS_ = {\r\n\t\t\t'Accept': me.#accept,\r\n\t\t\t'Content-Type': CONTENT_TYPE,\r\n\t\t\t'Accept-Encoding': 'gzip,deflate,br'\r\n\t\t};\r\n\t\t\r\n\t\tif (isCompress && Streams.isAvailable) {\r\n\t\t\tdata = Streams.toBinary(data);\r\n\t\t\tdata = await Streams.compressOrDefault(data);\r\n\t\t\tHEADERS_['Content-Encoding'] = 'gzip';\r\n\t\t}\r\n\r\n\t\tconst service = new URL(url);\r\n\t\tconst headers = Object.assign({}, engine.headers || {}, HEADERS_, head || {});\r\n\t\tconst querys = Object.assign({}, engine.querys || {});\r\n\r\n\t\tconst req = {\r\n\t\t\tmethod: 'post',\r\n\t\t\theaders: headers,\r\n\t\t\tbody: data\r\n\t\t};\r\n\t\tObject.entries(querys || {}).forEach((v) => {\r\n\t\t\tservice.searchParams.append(v[0], encodeURIComponent(v[1]));\r\n\t\t});\r\n\r\n\t\treturn await fetch(service.toString(), req);\r\n\r\n\t}\r\n\r\n\tasync #onResponse(res) {\r\n\t\tconst mime = res.headers.get('content-type') || '';\r\n\t\tconst isBin = mime.includes(WebChannel.#MIME_BINARY);\r\n\t\tconst isJson = mime.includes(WebChannel.#MIME_JSON);\r\n\t\tconst isPlain = !isBin && !isJson;\r\n\r\n\t\tif (isJson) return await res.json();\r\n\t\tif (isPlain) {\r\n\t\t\tconst txt = await res.text();\r\n\t\t\tif(!Streams.isJson(txt)) throw new Error('Invalid response');\r\n\t\t\treturn JSON.parse(txt);\r\n\t\t}\r\n\r\n\r\n\t\tconst raw = await res.arrayBuffer();\r\n\t\tconst obj = await Streams.unwrap(raw, this.#engine.Security);\r\n\t\t\r\n\t\tif (obj && obj.type == 'ws' && obj.cmd === 'data') {\r\n\t\t\treturn obj.data;\r\n\t\t}\r\n\t\treturn obj;\r\n\t}\r\n\r\n\t/**\r\n\t * Prepare remote call, encrypt if available\r\n\t *\r\n\t * @param {String} url\r\n\t *        Service URL to receive data\r\n\t *\r\n\t * @param {Object} req\r\n\t *         Data to send (optionally encrypt)\r\n\t */\r\n\tasync #onCall(engine, req) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst security = engine.Security;\r\n\t\tconst url = engine.serviceURL;\r\n\r\n\t\tconst isEncrypt = security?.isValid;\t\r\n\t\tlet isCompress = false;\r\n\t\tlet raw = null;\r\n\r\n\t\tif (isEncrypt) {\r\n\t\t\traw = await Streams.wrap(req, me.#engine.Security);\r\n\t\t} else {\r\n\t\t\traw = JSON.stringify(raw);\r\n\t\t\tisCompress = true;\r\n\t\t}\r\n\r\n\t\tconst head = {};\r\n\r\n\t\tif (isEncrypt) {\r\n\t\t\thead['gs-public-key'] = security.publicKey;\r\n\t\t}\r\n\r\n\t\t// send and wait for response\r\n\t\tconst res = await me.#fetchCall(url, raw, head, isCompress);\r\n\t\tconst data = await me.#onResponse(res);\r\n\r\n\t\t// if error throw\r\n\t\tif (data.cmd == 'err') {\r\n\t\t\tthrow new Error(data.result.msg);\r\n\t\t}\r\n\r\n\t\t// return server response\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport Generator from \"./Generator.mjs\";\r\nimport Security from \"./Security.mjs\";\r\nimport SocketChannel from \"./SocketChannel.mjs\";\r\nimport WebChannel from \"./WebChannel.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to initialize remote API and remote services.\r\n */\r\nconst ERROR_MESSAGE = 'Invalid definition for Engine Remote Service';\r\nconst ERROR_API_UNDEFINED = 'API Url not defined!';\r\nconst ERROR_SVC_UNDEFINED = 'Service Url not defined!';\r\n\r\n/**\r\n * Main class for Quark Engine Client\r\n */\r\nexport default class QuarkEngine {\r\n\r\n\t#cfg = null;\r\n\t#isWSAPI = false;\r\n\t#isWebChannel = false;\r\n\t#isSocketChannel = false;\r\n\r\n\t#Security = null;\r\n\t#Generator = null;\r\n\t#WebChannel = null;\r\n\t#SocketChannel = null;\r\n\r\n\t#headers = null;\r\n\t#querys = null;\r\n\r\n\t#id = null;\r\n\r\n\tconstructor(cfg) {\r\n\r\n\t\tcfg = cfg || {};\r\n\r\n\t\tif (!cfg.api) {\r\n\t\t\tthrow new Error(ERROR_API_UNDEFINED);\r\n\t\t}\r\n\r\n\t\tif (!cfg.service) {\r\n\t\t\tthrow new Error(ERROR_SVC_UNDEFINED);\r\n\t\t}\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tme.#cfg = null;\r\n\t\tme.#isWSAPI = false;\r\n\t\tme.#isWebChannel = false;\r\n\t\tme.#isSocketChannel = false;\r\n\r\n\t\tme.#Security = null;\r\n\t\tme.#Generator = null;\r\n\t\tme.#WebChannel = null;\r\n\t\tme.#SocketChannel = null;\r\n\t\tme.#id = Date.now();\r\n\r\n\t\tme.#cfg = cfg;\r\n\t\tme.#isWSAPI = cfg.api === cfg.service && cfg.api.indexOf('ws') == 0;\r\n\r\n\t\tme.#headers = cfg.headers || {};\r\n\t\tme.#querys = cfg.querys || {};\r\n\r\n\t\tme.#isWebChannel = cfg.service.indexOf('http') === 0;\r\n\t\tme.#isSocketChannel = cfg.service.indexOf('ws') === 0;\r\n\r\n\t\tif ((me.isWebChannel || me.isSocketChannel) === false) {\r\n\t\t\tthrow new Error(ERROR_MESSAGE);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/*\r\n\t * Initialize engine, throws error,\r\n\t */\r\n\tasync init() {\r\n\r\n\t\tconst me = this;\r\n\t\tif (me.isActive) return;\r\n\r\n\t\tme.#Security = new Security();\r\n\t\tme.#Generator = new Generator(me.id);\r\n\r\n\t\tif (me.isWebChannel || me.isWSAPI == false) {\r\n\t\t\tme.#WebChannel = new WebChannel();\r\n\t\t\tawait me.WebChannel.init(me);\r\n\t\t}\r\n\r\n\t\tif (me.isSocketChannel) {\r\n\t\t\tme.#SocketChannel = new SocketChannel();\r\n\t\t\tawait me.SocketChannel.init(me);\r\n\t\t}\r\n\r\n\t\treturn me;\r\n\t}\r\n\r\n\t/**\r\n\t * Use internaly from channel to register received\r\n\t * API definitiona and security data\r\n\t */\r\n\tasync registerAPI(data) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\t// initialize encryption if provided\r\n\t\tif (data.signature) {\r\n\t\t\tawait me.Security?.init(data);\r\n\t\t}\r\n\r\n\t\tme.Generator?.build(data.api);\r\n\t}\r\n\r\n\t/**\r\n\t * Stop engine instance by clearing all references\r\n\t * stoping listeners, stoping socket is avaialble\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tme.WebChannel?.stop();\r\n\t\tme.SocketChannel?.stop();\r\n\t\tme.Generator?.stop();\r\n\r\n\t\tme.#WebChannel = null;\r\n\t\tme.#SocketChannel = null;\r\n\t\tme.#Generator = null;\r\n\t\tme.#Security = null;\r\n\t\tme.#cfg = null;\r\n\t}\r\n\r\n\t/*\r\n\t * Return generated API\r\n\t */\r\n\tget api() {\r\n\t\treturn this.Generator?.api || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Check if engine is active\r\n\t */\r\n\tget isActive() {\r\n\t\tconst me = this;\r\n\t\tif (me.SocketChannel && !me.SocketChannel.isOpen) return false;\r\n\t\treturn me.api && me.Security ? true : false;\r\n\t}\r\n\r\n\t/*\r\n\t * Return API URL address\r\n\t */\r\n\tget apiURL() {\r\n\t\treturn this.cfg?.api || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Return Service URL address\r\n\t */\r\n\tget serviceURL() {\r\n\t\treturn this.cfg?.service || null;\r\n\t}\r\n\r\n\tget cfg() { return this.#cfg };\r\n\tget isWSAPI() { return this.#isWSAPI };\r\n\tget isWebChannel() { return this.#isWebChannel };\r\n\tget isSocketChannel() { return this.#isSocketChannel };\r\n\r\n\tget Security() { return this.#Security; }\r\n\tget Generator() { return this.#Generator; }\r\n\tget WebChannel() { return this.#WebChannel; }\r\n\tget SocketChannel() { return this.#SocketChannel; }\r\n\r\n\tget headers() { return this.#headers; }\r\n\tget querys() { return this.#querys; }\r\n\tget id() { return this.#id; }\r\n\r\n\t/*\r\n\t * Static instance builder\r\n\t */\r\n\tstatic async init(cfg) {\r\n\t\tconst engine = new QuarkEngine(cfg);\r\n\t\treturn engine.init();\r\n\t}\r\n}\r\n"],"names":["Buffer","static","TextEncoder","TextDecoder","src","data","Array","Uint8Array","ArrayBuffer","String","fromText","toArrayBuffer","isString","test","b64","me","fromBase64","isHexString","fromHex","validateData","val","isText","decoder","decode","encoder","encode","value","arry","i","length","push","parseInt","substr","buffer","prototype","map","call","x","toString","slice","join","strbin","atob","bufView","strLen","charCodeAt","globalThis","btoa","EventExt","EventTarget","listeners","Set","list","type","listener","from","this","isFunction","filter","o","addEventListener","opt","add","super","removeEventListener","forEach","delete","unbind","clear","on","once","wrap","e","off","emit","evt","CustomEvent","detail","dispatchEvent","send","listen","unlisten","wait","Promise","r","fn","preventDefault","stopPropagation","Object","freeze","Event","Streams","isAvailable","CompressionStream","DecompressionStream","raw","encrypted","compressed","dataType","dv","DataView","setUint8","setUint32","set","security","toBinary","compressOrDefault","encrypt","toGS","isValid","isGS","getUint8","len","getUint32","byteLength","isCompress","isCompressFlag","isEncryptFlag","decrypt","decompress","arrayBuffer","isJson","Error","JSON","parse","toText","getUint16","isEncrypt","stream","byteArray","writer","writable","getWriter","write","close","Response","readable","encoding","compress","stringify","isGzip","isZlib","at","indexOf","first","trim","last","isJsonArray","isJsonObj","Security","name","namedCurve","publicKey","aesKey","cookie","path","updateCookie","document","getChallenge","cfg","challenge","keyEnc","keyVer","async","key","mode","der","use","split","crypto","subtle","importKey","ab","exportKey","toHex","signature","toBuffer","verify","hash","verKey","initPublic","ECDH_TYPE","initKeyPair","generateKey","deriveAES","priv","pub","pubDef","public","derivedKey","AES_TYPE","deriveKey","toAlgo","iv","assign","counter","getRandom","size","array","getRandomValues","databin","result","decryptRaw","encryptRaw","initVerify","keyPair","privateKey","d","encryptAsBuffer","decryptAsBuffer","init","Queue","Map","up","down","tid","updateRequest","req","reset","process","obj","unknown","isArray","res","execute","unkown","has","get","finish","Request","id","timeout","callback","constructor","object","property","bind","clearTimeout","setTimeout","Proxy","Generator","model","cnt","api","stop","detach","cleanup","k","el","_id_","values","build","buildAPI","v","buildInstance","tree","action","buildNamespace","namespace","reduce","methods","buildMethod","a","ar","objs","tmp","tmp2","every","instance","enc","n","c","m","l","apiFn","params","prop","args","arguments","isOverride","pop","isAsync","method","ts","Date","now","seal","resolve","reject","proxy","onResponse","success","generator","SocketChannel","queue","webSocket","engine","iid","startSocket","isOpen","readyState","OPEN","cmd","ping","msg","url","URL","serviceURL","querys","q","entries","searchParams","append","encodeURIComponent","WebSocket","binaryType","onCall","onopen","event","initPing","isWSAPI","registerAPI","onclose","clearInterval","onerror","onmessage","prepareBinaryMessage","prepareTextMessage","setInterval","message","unwrap","onMessage","WebChannel","getAPI","apiURL","isSocketChannel","onRequest","fetch","err","service","headers","resp","credentials","json","accept","MIME_BINARY","MIME_JSON","mime","head","CONTENT_TYPE","HEADERS_","Accept","body","isBin","includes","isPlain","txt","text","fetchCall","QuarkEngine","isWebChannel","isActive"],"mappings":"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"}