{"version":3,"file":"io.greenscreens.quark.esm.min.js","sources":["../modules/core/Buffer.mjs","../modules/core/Event.mjs","../modules/core/Streams.mjs","../modules/core/Security.mjs","../modules/core/Queue.mjs","../modules/core/Request.mjs","../modules/core/Generator.mjs","../modules/core/SocketChannel.mjs","../modules/core/WebChannel.mjs","../modules/core/QuarkEngine.mjs"],"sourcesContent":["/*\r\n * Copyright (C) 2015, 2023 Green Screens Ltd.\r\n */\r\n\r\nexport default class Buffer {\r\n\r\n\tstatic #encoder = new TextEncoder();\r\n\tstatic #decoder = new TextDecoder();\r\n\r\n\t/**\r\n\t * Detect data and convert to Uint8Array\r\n\t * \r\n\t * @param {variant}\r\n\t * @returns {variant}\r\n\t */\r\n\tstatic validateData(src) {\r\n\t\tlet data = null;\r\n\t\tif (src instanceof Array) {\r\n\t\t\tdata = new Uint8Array(src);\r\n\t\t} else if (src instanceof ArrayBuffer) {\r\n\t\t\tdata = new Uint8Array(src);\r\n\t\t} else if (src instanceof Uint8Array) {\r\n\t\t\tdata = src;\r\n\t\t} else if (src instanceof String || typeof src === 'string') {\r\n\t\t\tdata = Buffer.fromText(src);\r\n\t\t} else if (src.toArrayBuffer) {\r\n\t\t\tdata = new Uint8Array(src.toArrayBuffer());\r\n\t\t} else {\r\n\t\t\tthrow \"Invalid input, must be String or ArrayBuffer or Uint8Array\";\r\n\t\t}\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * Verify if data is string\r\n\t * @param {*} data \r\n\t * @returns \r\n\t */\r\n\tstatic isString(data) {\r\n\t\treturn typeof data === 'string';\r\n\t}\r\n\r\n\t/**\r\n\t * Check if string is hex string\r\n\t * @param {*} data \r\n\t * @returns \r\n\t */\r\n\tstatic isHexString(data) {\r\n\t\treturn Buffer.isString(data) ? (/^[0-9A-Fa-f]+$/g).test(data) : false;\r\n\t}\r\n\r\n\tstatic toBuffer(data, b64 = false) {\r\n\t\tconst me = Buffer;\r\n\t\tif (me.isString(data)) {\r\n\t\t\tif (b64) {\r\n\t\t\t\tdata = me.fromBase64(data);\r\n\t\t\t} else if (me.isHexString(data)) {\r\n\t\t\t\tdata = me.fromHex(data);\r\n\t\t\t} else {\r\n\t\t\t\tdata = me.fromText(data);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn me.validateData(data);\r\n\t}\r\n\r\n\tstatic toText(val) {\r\n\t\treturn Buffer.isText(val) ? val : Buffer.#decoder.decode(val);\r\n\t}\r\n\r\n\tstatic fromText(val) {\r\n\t\treturn Buffer.isText(val) ? Buffer.#encoder.encode(val) : val;\r\n\t}\r\n\r\n\tstatic isText(val) {\r\n\t\treturn typeof val === 'string';\r\n\t}\r\n\r\n\tstatic fromHex(value) {\r\n\r\n\t\tconst arry = [];\r\n\r\n\t\tfor (let i = 0; i < value.length; i += 2) {\r\n\t\t\tarry.push(parseInt(\"0x\" + value.substr(i, 2), 16));\r\n\t\t}\r\n\r\n\t\treturn new Uint8Array(arry);\r\n\t}\r\n\r\n\tstatic toHex(buffer) {\r\n\t\treturn Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('');\r\n\t}\r\n\r\n\tstatic fromBase64(value) {\r\n\r\n\t\tconst strbin = atob(value);\r\n\t\tconst buffer = new ArrayBuffer(strbin.length);\r\n\t\tconst bufView = new Uint8Array(buffer);\r\n\r\n\t\tfor (let i = 0, strLen = strbin.length; i < strLen; i++) {\r\n\t\t\tbufView[i] = strbin.charCodeAt(i);\r\n\t\t}\r\n\r\n\t\treturn bufView;\r\n\t}\r\n\r\n\tstatic toBase64(buffer) {\r\n\t\tbuffer = Buffer.toBuffer(buffer);\r\n\t\treturn btoa(buffer.reduce((data, val) => {\r\n\t\t\treturn data + String.fromCharCode(val);\r\n\t\t}, ''));\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * A module loading Event class\r\n * @module Events\r\n */\r\n\r\n/**\r\n * Extends native event by adding helper functions\r\n */\r\nexport default class QuarkEvent extends EventTarget {\r\n\r\n    #listeners = new Set();\r\n\r\n    #list(type = '', listener) {\r\n        const me = this;\r\n        const list = Array.from(me.#listeners);\r\n        return QuarkEvent.#isFunction(listener) ?\r\n            list.filter(o => o.type === type && o.listener === listener)\r\n            :\r\n            list.filter(o => o.type === type);\r\n    }\r\n\r\n    addEventListener(type, listener, opt) {\r\n        const me = this;\r\n        if (!QuarkEvent.#isFunction(listener)) return false;\r\n        me.#listeners.add({ type: type, listener: listener });\r\n        return super.addEventListener(type, listener, opt);\r\n    }\r\n\r\n    removeEventListener(type, listener) {\r\n        const me = this;\r\n        const list = me.#list(type, listener);\r\n        list.forEach(o => super.removeEventListener(o.type, o.listener))\r\n        list.forEach(o => me.#listeners.delete(o));\r\n    }\r\n\r\n    /**\r\n     * Remove all listeners\r\n     */\r\n    unbind() {\r\n        const me = this;\r\n        Array.from(me.#listeners).forEach(o => {\r\n            super.removeEventListener(o.type, o.listener);\r\n        });\r\n        me.#listeners.clear();\r\n    }\r\n\r\n    /**\r\n     * Listen for events\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    on(type = '', listener) {\r\n        return this.addEventListener(type, listener);\r\n    }\r\n\r\n    /**\r\n     * Listen for events only once\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    once(type, listener) {\r\n        const me = this;\r\n        let wrap = (e) => {\r\n            listener(e);\r\n            wrap = null;\r\n        }\r\n        wrap.type = type;\r\n        wrap.listener = listener;\r\n        return me.addEventListener(type, wrap, { once: true });\r\n    }\r\n\r\n    /**\r\n     * Stop listening for events\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    off(type = '', listener) {\r\n        return this.removeEventListener(type, listener);\r\n    }\r\n\r\n    /**\r\n     * Send event to listeners\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {object} data  Data to send \r\n     */\r\n    emit(type, data) {\r\n        if (!type) return false;\r\n        const evt = new CustomEvent(type, { detail: data });\r\n        return this.dispatchEvent(evt);\r\n    }\r\n\r\n    send(type, data) { this.emit(type, data); }\r\n    listen(type, listener) { this.on(type, listener); }\r\n    unlisten(type, listener) { this.off(type, listener); }\r\n\r\n    /**\r\n     * Wait for an event \r\n     * @param {string} type Event name to be listened\r\n     * @returns {Event}\r\n     */\r\n    wait(type = '') {\r\n        if (!type) return e('Event undefined!');\r\n        const me = this;\r\n        return new Promise((r, e) => {\r\n            me.once(type, (e) => r(e));\r\n        });\r\n    }\r\n\r\n    static #isFunction(fn) {\r\n        return typeof fn === 'function';\r\n    }\r\n\r\n    /**\r\n     * Generic prevent event bubling\r\n     * \r\n     * @param {Event} e \r\n     */\r\n    static prevent(e) {\r\n        if (QuarkEvent.#isFunction(e, 'preventDefault')) e.preventDefault();\r\n        if (QuarkEvent.#isFunction(e, 'stopPropagation')) e.stopPropagation();\r\n    }\r\n\r\n    static {\r\n        Object.freeze(QuarkEvent);\r\n    }\r\n\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport Buffer from './Buffer.mjs';\r\n\r\n/**\r\n * Browser native compression\r\n */\r\nexport default class Streams {\r\n\r\n\tstatic get isAvailable() {\r\n\t\treturn typeof CompressionStream !== 'undefined' &&\r\n\t\t\ttypeof DecompressionStream !== 'undefined';\r\n\t}\r\n\r\n\t/**\r\n\t * Stream header GS[version(5)][type(0|1|2|3)][len]\r\n\t * type: 0 - utf8 binary string, 1 - compressed, 2 - encrypted, 3 - 1 & 2\r\n\t * new Uint8Array([71, 83, 5, type, 0, 0, 0, 0]);\r\n\t * @param {Uint8Array} data\r\n\t * @returns {Uint8Array}\r\n\t */\r\n\tstatic #toGS(raw, encrypted = false, compressed = false) {\r\n\t\tif (!raw instanceof Uint8Array) return raw;\r\n\t\tconst type = Streams.#dataType(encrypted, compressed);\r\n\r\n\t\tconst data = new Uint8Array(8 + raw.length);\r\n\t\tconst dv = new DataView(data.buffer);\r\n\t\tdv.setUint8(0, 71);\r\n\t\tdv.setUint8(1, 83);\r\n\t\tdv.setUint8(2, 5);\r\n\t\tdv.setUint8(3, type);\r\n\t\tdv.setUint32(4, raw.length);\r\n\t\tdata.set(raw, 8);\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * Encode binary message to GS binary format\r\n\t * @param {*} raw \r\n\t * @param {*} security \r\n\t */\r\n\tstatic async wrap(raw, security) {\r\n\t\traw = Streams.toBinary(raw);\r\n\t\traw = await Streams.compressOrDefault(raw);\r\n\t\traw = await security.encrypt(raw);\r\n\t\traw = Streams.#toGS(raw, security.isValid, Streams.isAvailable);\r\n\t\t/*\r\n\t\tif (globalThis.QUARK_DEBUG) {\r\n\t\t\tconsole.log('DEBUG: Output :', Buffer.toHex(raw));\r\n\t\t}\r\n\t\t*/\r\n\t\treturn raw;\r\n\t}\r\n\r\n\t/**\r\n\t * Decode binary message from GS binary format\r\n\t * @param {*} raw \r\n\t * @param {*} security \r\n\t */\r\n\tstatic async unwrap(raw, security, challenge) {\r\n\r\n\t\tif (raw instanceof Uint8Array) raw = raw.buffer;\r\n\r\n\t\t/*\r\n\t\tif (globalThis.QUARK_DEBUG) {\r\n\t\t\tconsole.log('DEBUG: Input :', Buffer.toHex(raw));\r\n\t\t}\r\n\t\t*/\r\n\t\tconst dv = new DataView(raw);\r\n\t\tconst isGS = Streams.#isGS(dv);\r\n\r\n\t\traw = Streams.toBinary(raw);\r\n\t\tif (!isGS) return raw;\r\n\r\n\t\tconst type = dv.getUint8(3);\r\n\t\tconst len = dv.getUint32(4);\r\n\r\n\t\tif (dv.byteLength !== len + 8) return raw;\r\n\r\n\t\traw = raw.slice(8);\r\n\r\n\t\tconst isCompress = Streams.isCompressFlag(type);\r\n\t\tconst isEncrypt = Streams.isEncryptFlag(type);\r\n\t\tconst isApi = Streams.isApiFlag(type);\r\n\r\n\t\tlet api = null;\r\n\t\tif (isApi) {\r\n\t\t\tconst encLen = dv.getUint32(8);\r\n\t\t\tconst verLen = dv.getUint32(8 + 4 + encLen);\r\n\t\t\tconst sgnLen = dv.getUint32(8 + 4 + encLen + 4 + verLen);\r\n\r\n\t\t\tapi = {\r\n\t\t\t\tchallenge: challenge,\r\n\t\t\t\tkeyEnc: (raw.slice(4, 4 + encLen)),\r\n\t\t\t\tkeyVer: (raw.slice(4 + encLen + 4, 4 + encLen + 4 + verLen)),\r\n\t\t\t\tsignature: (raw.slice(4 + encLen + 4 + verLen + 4, 4 + encLen + 4 + verLen + 4 + sgnLen))\r\n\t\t\t};\r\n\r\n\t\t\tawait security.init(api);\r\n\t\t\traw = raw.slice((4 * 3) + encLen + verLen + sgnLen);\r\n\t\t}\r\n\r\n\r\n\t\tif (isEncrypt) {\r\n\t\t\traw = await security?.decrypt(raw);\r\n\t\t}\r\n\r\n\t\tif (isCompress) {\r\n\t\t\traw = await Streams.decompress(raw).arrayBuffer();\r\n\t\t}\r\n\r\n\t\traw = Streams.toBinary(raw);\r\n\t\tif (!Streams.isJson(raw)) throw new Error('Invalid response');\r\n\r\n\t\treturn JSON.parse(Buffer.toText(raw));\r\n\t}\r\n\r\n\t/**\r\n\t * Check if DataView id GS data format\r\n\t * @param {*} dv \r\n\t * @returns \r\n\t */\r\n\tstatic #isGS(dv) {\r\n\t\treturn dv.byteLength > 8 && dv.getUint16(0) === 18259 && dv.getUint8(2) === 5;\r\n\t}\r\n\r\n\tstatic isCompressFlag(type) {\r\n\t\treturn (type & 1) === 1;\r\n\t}\r\n\r\n\tstatic isEncryptFlag(type) {\r\n\t\treturn (type & 2) === 2;\r\n\t}\r\n\r\n\tstatic isApiFlag(type) {\r\n\t\treturn (type & 4) === 4;\r\n\t}\r\n\r\n\tstatic #dataType(isEncrypt, isCompress) {\r\n\t\tconst type = isCompress ? 1 : 0;\r\n\t\treturn type | (isEncrypt ? 2 : 0);\r\n\t}\r\n\r\n\tstatic #stream(data, stream) {\r\n\t\tconst me = this;\r\n\t\tconst byteArray = me.toBinary(data);\r\n\t\tconst writer = stream.writable.getWriter();\r\n\t\twriter.write(byteArray);\r\n\t\twriter.close();\r\n\t\treturn new Response(stream.readable);\r\n\t}\r\n\r\n\t/**\r\n\t * If compression available, compress, \r\n\t * else return original value\r\n\t * @param {*} data \r\n\t * @param {*} encoding \r\n\t */\r\n\tstatic async compressOrDefault(data, encoding = 'gzip') {\r\n\t\tif (!Streams.isAvailable) return data;\r\n\t\tconst raw = await Streams.compress(data, encoding).arrayBuffer();\r\n\t\treturn Streams.toBinary(raw);\r\n\t}\r\n\r\n\t/**\r\n\t * If decompression available, decompress, \r\n\t * else return original value\r\n\t * @param {*} data \r\n\t * @param {*} encoding \r\n\t */\r\n\tstatic async decompressOrDefault(data, encoding = 'gzip') {\r\n\t\tif (!Streams.isAvailable) return data;\r\n\t\tconst raw = await Streams.decompress(data, encoding).arrayBuffer();\r\n\t\treturn Streams.toBinary(raw);\r\n\t}\r\n\r\n\t/**\r\n\t * Compress to gzip format\r\n\t * @param {*} data \r\n\t * @param {*} encoding gzip | deflate (zlib)\r\n\t * @returns {Response} \r\n\t */\r\n\tstatic compress(data, encoding = 'gzip') {\r\n\t\tconst stream = new CompressionStream(encoding);\r\n\t\treturn this.#stream(data, stream);\r\n\t}\r\n\r\n\t/**\r\n\t * Decompress from gzip format\r\n\t * @param {*} data \r\n\t * @param {*} encoding gzip | deflate (zlib)\r\n\t * @returns {Response} \r\n\t */\r\n\tstatic decompress(data, encoding = 'gzip') {\r\n\t\tconst stream = new DecompressionStream(encoding);\r\n\t\treturn this.#stream(data, stream);\r\n\t}\r\n\r\n\tstatic toBinary(data) {\r\n\t\tif (data instanceof Uint8Array) return data;\r\n\t\tif (data instanceof ArrayBuffer) return new Uint8Array(data);\r\n\t\tif (typeof data === 'string') return Buffer.fromText(data);\r\n\t\treturn this.toBinary(JSON.stringify(data));\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 2 bytes mathes gzip/deflate header signature\r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\r\n\tstatic isCompressed(data) {\r\n\t\tconst me = this;\r\n\t\tdata = me.toBinary(data);\r\n\t\treturn me.isGzip(data); // || me.isZlib(data);\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 3 bytes matches gzip header signature\r\n\t * \r\n\t * zlib\r\n\t * 1F 8B 08\r\n\t * 31 139 8\r\n\t * \r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\r\n\tstatic isGzip(data) {\r\n\t\treturn data.at(0) === 31 && data.at(1) === 139 && data.at(2) === 8;\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 2 bytes matches deflate (zlib) header signature\r\n\t * \r\n\t * deflate\r\n\t * 78  (01, 5e,9c, da) \r\n\t * 120 (1, 94, 156, 218)\r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\r\n\tstatic isZlib(data) {\r\n\t\treturn data.at(0) === 120 && [1, 94, 156, 218].indexOf(data.at(1)) > -1;\r\n\t}\r\n\r\n\tstatic isJson(data) {\r\n\t\tconst me = this;\r\n\t\tdata = typeof data === 'string' ? data.trim() : me.toBinary(data);\r\n\t\tconst first = data.at(0);\r\n\t\tconst last = data.at(data.length - 1);\r\n\t\treturn me.#isJsonArray(first, last) || me.#isJsonObj(first, last);\r\n\t}\r\n\r\n\tstatic #isJsonObj(first, last) {\r\n\t\treturn (first === '{' || first === 123) && (last === '}' || last === 125);\r\n\t}\r\n\r\n\tstatic #isJsonArray(first, last) {\r\n\t\treturn (first === '[' || first === 91) && (last === ']' || last === 93);\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2023 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Security engine using Web Crypto API to encrypt / decrypt\r\n * messages between browser and server.\r\n *\r\n */\r\n\r\nimport Buffer from \"./Buffer.mjs\";\r\n\r\nexport default class Security {\r\n\r\n    static #ECDH_TYPE = { name: 'ECDH', namedCurve: \"P-256\" };\r\n    static #ECDSA_TYPE = { name: 'ECDSA', namedCurve: \"P-384\" };\r\n    static #VERIFY = { name: 'ECDSA', hash: \"SHA-384\" };\r\n    static #AES_TYPE = { name: \"AES-CTR\", length: 256 };\r\n\r\n    #publicKey = null;\r\n    #keyPair = null;\r\n    #aesKey = null;\r\n\r\n    /**\r\n     * Create random bytes\r\n     *\r\n     * @param {int} size\r\n     *     length of data (required)\r\n     */\r\n    static getRandom(size) {\r\n        const array = new Uint8Array(size);\r\n        crypto.getRandomValues(array);\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * Initialize browser ECDH key pair \r\n     */\r\n    static initKeyPair() {\r\n        const use = ['deriveKey', 'deriveBits'];\r\n        return crypto.subtle.generateKey(Security.#ECDH_TYPE, true, use);\r\n    }\r\n\r\n    /**\r\n     * Import Async key received from server\r\n     * Key is publicKey used to send encrypted AES key\r\n     *\r\n     * @param {String} key PEM encoded key\r\n     * @param {Object} type Crypto API key definition format\r\n     * @param {String} mode Comma separted list of key usages \r\n     */\r\n    static async importKey(key, type, mode) {\r\n        const der = Buffer.toBuffer(key, true);\r\n        const use = mode ? mode.split(',') : [];\r\n        return crypto.subtle.importKey('spki', der, type, true, use);\r\n    }\r\n\r\n    /**\r\n     * Export key in hex form\r\n     * @param {CryptoKey} key\r\n     * @returns {string}\r\n     */\r\n    static async exportKey(key) {\r\n        const ab = await crypto.subtle.exportKey('raw', key);\r\n        return Buffer.toHex(ab);\r\n    }\r\n\r\n    /**\r\n     * Verify signature\r\n     *\r\n     * @param {CryptoKey} Public key used for verification\r\n     * @param {ArrayBuffer} signature Signature of received data\r\n     * @param {ArrayBuffer} challenge Challenge to verify with signature (ts + pemENCDEC + pemVERSGN)\r\n     */\r\n    static async verify(key, signature, challenge) {\r\n        signature = Buffer.toBuffer(signature, true);\r\n        challenge = Buffer.toBuffer(challenge);\r\n        const type = Security.#VERIFY;\r\n        return crypto.subtle.verify(type, key, signature, challenge);\r\n    }\r\n\r\n    /**\r\n     * Sign data with HMAC\r\n     * @param {CryptoKey} Private key used for verification\r\n     * @param {ArrayBuffer} data Data to sign\r\n     */\r\n    static async sign(key, data) {\r\n        data = Buffer.toBuffer(data);\r\n        return crypto.subtle.sign('ECDSA', key, data);\r\n    }\r\n\r\n    get publicKey() { return this.#publicKey; }\r\n\r\n    cookie(path = \"/\") {\r\n        return `gs-public-key=${this.#publicKey || ''};path=${path}`;\r\n    }\r\n\r\n    updateCookie(path = \"/\") {\r\n        document.cookie = this.cookie(path);\r\n    }\r\n\r\n    /**\r\n     *  Use local challenge, to verify received data signature\r\n     *\r\n     *  @param {Object} cfg Data received from server contins public key and signature\r\n     */\r\n    #getChallenge(cfg) {\r\n        const me = this;\r\n        return [cfg.challenge || '', me.#toChallenge(cfg.keyEnc) || '', me.#toChallenge(cfg.keyVer) || ''].join('');\r\n    }\r\n\r\n    #toChallenge(val) {\r\n        return Buffer.isText(val) ? val : Buffer.toBase64(val);\r\n    }\r\n\r\n    async #initVerify(cfg) {\r\n        const me = this;\r\n        const type = Security.#ECDSA_TYPE;\r\n        const verKey = await Security.importKey(cfg.keyVer, type, 'verify');\r\n        const status = await Security.verify(verKey, cfg.signature, me.#getChallenge(cfg));\r\n        if (!status) throw new Error('Signature invalid');\r\n    }\r\n\r\n    /**\r\n     * Initialize server public key\r\n     * @param {object} cfg \r\n     */\r\n    #initPublic(cfg) {\r\n        return Security.importKey(cfg.keyEnc, Security.#ECDH_TYPE, '');\r\n    }\r\n\r\n    /**\r\n     * Derive shared secret from server public ECDH and browser keypair.private ECDH\r\n     * @returns {CryptoKey}\r\n     */\r\n    #deriveAES(priv, pub) {\r\n        const pubDef = { name: \"ECDH\", public: pub };\r\n        const use = ['encrypt', 'decrypt'];\r\n        const derivedKey = Security.#AES_TYPE;\r\n        const dbg = false; // globalThis.QUARK_DEBUG === true;\r\n        return crypto.subtle.deriveKey(pubDef, priv, derivedKey, dbg, use);\r\n    }\r\n\r\n    #toAlgo(iv) {\r\n        iv = Buffer.toBuffer(iv);\r\n        const type = Object.assign({ counter: iv }, Security.#AES_TYPE);\r\n        type.length = 128;\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Encrypt message with AES\r\n     * @param {CryptoKey} key \r\n     * @param {ArrayBuffer} iv IV as Hex string \r\n     * @param {ArrayBuffer} data as Hex string \r\n     */\r\n    async encryptRaw(key, iv, data) {\r\n        const databin = Buffer.toBuffer(data);\r\n        const type = this.#toAlgo(iv);\r\n        return crypto.subtle.encrypt(type, key, databin);\r\n    }\r\n\r\n    /**\r\n     * Decrypt AES encrypted message\r\n     * @param {CryptoKey} key \r\n     * @param {ArrayBuffer} iv IV as Hex string \r\n     * @param {ArrayBuffer} data as Hex string \r\n     */\r\n    async decryptRaw(key, iv, data) {\r\n        const databin = Buffer.toBuffer(data);\r\n        const type = this.#toAlgo(iv);\r\n        return crypto.subtle.decrypt(type, key, databin);\r\n    }\r\n\r\n    async decryptAsBuffer(key, iv, data) {\r\n        const result = await this.decryptRaw(key, iv, data);\r\n        return Buffer.toBuffer(result);\r\n    }\r\n\r\n    async encryptAsBuffer(key, iv, data) {\r\n        const result = await this.encryptRaw(key, iv, data);\r\n        return Buffer.toBuffer(result);\r\n    }\r\n\r\n    async decryptAsString(key, iv, data) {\r\n        const result = await this.decryptRaw(key, iv, data);\r\n        return Buffer.toText(result);\r\n    }\r\n\r\n    async encryptAsHex(key, iv, data) {\r\n        const result = await this.encryptRaw(key, iv, data);\r\n        return Buffer.toHex(result);\r\n    }\r\n\r\n    get isValid() {\r\n        const me = this;\r\n        return me.#publicKey !== null && me.#aesKey !== null;\r\n    }\r\n\r\n    static get isAvailable() {\r\n        return crypto.subtle ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Initialize encryption and verification keys\r\n     * Verifies data signatures to prevent tampering\r\n     */\r\n    async init(cfg) {\r\n\r\n        if (!Security.isAvailable) {\r\n            console.log('Security mode not available, TLS protocol required.');\r\n            return;\r\n        }\r\n\r\n        console.log('Security Initializing...');\r\n        const me = this;\r\n\r\n        await me.#initVerify(cfg);\r\n\r\n        const publicKey = await me.#initPublic(cfg);\r\n        me.#aesKey = await me.#deriveAES(me.#keyPair.privateKey, publicKey);\r\n        me.#keyPair = null;\r\n\r\n        console.log('Security Initialized!');\r\n\r\n    }\r\n\r\n    /**\r\n     * Encrypt provided data\r\n     * @param {Uint8Array} data Data to encrypt\r\n     * @returns {Uint8Array} [head+iv+data]\r\n     */\r\n    async encrypt(data) {\r\n        const me = this;\r\n        if (!me.isValid) return data;\r\n        if (!data instanceof Uint8Array) return data;\r\n        const iv = Security.getRandom(16);\r\n        const d = await me.encryptAsBuffer(me.#aesKey, iv, data);\r\n\r\n        const raw = new Uint8Array(iv.length + d.length);\r\n        raw.set(iv, 0);\r\n        raw.set(d, iv.length);\r\n        return raw;\r\n    }\r\n\r\n    /**\r\n     * Decrypt received data in format {d:.., k:...}\r\n     *\r\n     * @param {ArrayBuffer|Uint8Array} data\r\n     * @param {ArrayBuffer|Uint8Array} iv\r\n     * @return \r\n     */\r\n    async decrypt(data, iv) {\r\n\r\n        const me = this;\r\n\r\n        if (!iv) {\r\n            iv = data.slice(0, 16);\r\n            data = data.slice(16);\r\n        }\r\n\r\n        return await me.decryptAsBuffer(me.#aesKey, iv, data);\r\n    }\r\n\r\n    async #preInit() {\r\n        const me = this;\r\n        me.#keyPair = await Security.initKeyPair();\r\n        me.#publicKey = await Security.exportKey(me.#keyPair.publicKey);\r\n    }\r\n\r\n    static async create(cfg) {\r\n        const security = new Security();\r\n        await security.#preInit();\r\n        if (cfg) await security.init(cfg);\r\n        return security;\r\n    }\r\n\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Queue to handle requests\r\n */\r\nexport default class Queue extends Map {\r\n\r\n\t#up = 0;\r\n\t#down = 0;\r\n\t#tid = 0;\r\n\r\n\t/**\r\n\t * Update counters and queue to link resposnes to requests\r\n\t * @param {Object} req\r\n\t *      Request data\r\n\t */\r\n\tupdateRequest(req) {\r\n\t\tconst me = this;\r\n\t\tme.#tid++;\r\n\t\tme.#up++;\r\n\t\treq.tid = me.#tid.toString();\r\n\t\tme.set(req.tid, req);\r\n\t}\r\n\r\n\t/**\r\n\t * Reset queue to remove old stalled elements\r\n\t */\r\n\treset() {\r\n\t\tconst me = this;\r\n\t\tif (me.#up > 50 && me.#down >= me.#up) {\r\n\t\t\tme.#up = 0;\r\n\t\t\tme.#down = 0;\r\n\t\t\tme.clear();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Process array of response records\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\tprocess(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst unknown = [];\r\n\r\n\t\tif (Array.isArray(obj)) {\r\n\t\t\tobj.forEach((o) => {\r\n\t\t\t\tconst res = me.execute(o);\r\n\t\t\t\tif (res) unkown.push(res);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconst o = me.execute(obj);\r\n\t\t\tif (o) unknown.push(o);\r\n\t\t}\r\n\r\n\t\treturn unknown;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Process single response record\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\texecute(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst tid = obj.tid;\r\n\t\tlet unknown = null;\r\n\r\n\t\tme.#down++;\r\n\r\n\t\tif (me.has(tid)) {\r\n\t\t\tconst req = me.get(tid);\r\n\t\t\ttry {\r\n\t\t\t\treq.finish(obj);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log(e);\r\n\t\t\t\treq.finish(e);\r\n\t\t\t} finally {\r\n\t\t\t\tme.delete(tid);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tunknown = obj;\r\n\t\t}\r\n\r\n\t\tme.reset();\r\n\r\n\t\treturn unknown;\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * API engine asynchronous request\r\n */\r\nexport default class Request {\r\n\r\n    #id = 0;\r\n    #timeout = 0;\r\n    #callback;\r\n\r\n    constructor(timeout, callback) {\r\n        const me = this;\r\n        me.#callback = callback;\r\n        me.#timeout = timeout;\r\n        me.#init();\r\n    }\r\n\r\n    get(object, property) {\r\n        const me = this;\r\n        if (property === 'timeout') return me.timeout;\r\n        if (property === 'finish') return me.callback.bind(me);\r\n        return object[property];\r\n    }\r\n\r\n    callback(o) {\r\n        const me = this;\r\n        if (me.timeout) return;\r\n        me.#clear();\r\n        return me.#callback(o);\r\n    }\r\n\r\n    get timeout() {\r\n        return this.#timeout === true;\r\n    }\r\n\r\n    #clear() {\r\n        const me = this;\r\n        if (me.#id === 0) return;\r\n        clearTimeout(me.#id);\r\n    }\r\n\r\n    #init() {\r\n        const me = this;\r\n        if (me.#timeout === 0) return;\r\n        me.#id = setTimeout(() => {\r\n            me.#timeout = true;\r\n            me.#callback(new Error('Call timeouted!'));\r\n        }, me.#timeout);\r\n    }\r\n\r\n    static wrap(data, timeout, callback) {\r\n        return new Proxy(data, new Request(timeout, callback));\r\n    }\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport QuarkEvent from \"./Event.mjs\";\r\nimport Request from \"./Request.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to call remote services.\r\n * All Direct functions linked to defiend namespace\r\n */\r\nexport default class Generator extends QuarkEvent {\r\n\r\n\t#model = {};\r\n\t#id = null;\r\n\t#cnt = 0;\r\n\t#timeout = 0;\r\n\r\n\tconstructor(id = 0, timeout = 0) {\r\n\t\tsuper();\r\n\t\tthis.#id = id;\r\n\t\tthis.#timeout = timeout;\r\n\t}\r\n\r\n\t/**\r\n\t * Return generted API structure and callers\r\n\t */\r\n\tget api() {\r\n\t\treturn this.#model;\r\n\t}\r\n\r\n\t/**\r\n\t * Disconnect generator from API callers\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\t\tme.off('call');\r\n\t\tme.off('api');\r\n\t\tme.off('raw');\r\n\t\tme.off('error');\r\n\t\tme.#detach();\r\n\t}\r\n\r\n\t#cleanup(obj, id) {\r\n\t\tfor (let k in obj) {\r\n\t\t\tlet el = obj[k];\r\n\t\t\tif (typeof el === 'object') {\r\n\t\t\t\tif (this.#cleanup(el, id)) obj[k] = null;\r\n\t\t\t} else if (el._id_ === id) {\r\n\t\t\t\tobj[k] = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Object.values(obj).filter(o => o != null).length === 0;\r\n\t}\r\n\r\n\t#detach() {\r\n\t\tconst me = this;\r\n\t\tme.#cleanup(me.#model, me.#id);\r\n\t\tme.#model = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Build JS object with callable functions that maps to Java side methods\r\n\t * Data is retrieved from API service\r\n\t *\r\n\t * @param {String} url || api object\r\n\t * \t\t  URL Address for API service definitions\r\n\t */\r\n\tbuild(o) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst data = o ? o.api || o : null;\r\n\r\n\t\tif (data) me.#buildAPI(data);\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * From API tree generate namespace tree and\r\n\t * links generated functions to WebScoket api calls\r\n\t *\r\n\t * @param {Object} cfg\r\n\t * \t\tAlternative definition to API\r\n\t */\r\n\t#buildAPI(cfg) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (Array.isArray(cfg)) {\r\n\t\t\tcfg.forEach(v => me.#buildInstance(v));\r\n\t\t} else {\r\n\t\t\tme.#buildInstance(cfg);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Build from single definition\r\n\t *\r\n\t * @param {Object} api\r\n\t * \t\t  Java Class/Method definition\r\n\t */\r\n\t#buildInstance(api) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet tree = null;\r\n\t\tlet action = null;\r\n\r\n\t\ttree = me.#buildNamespace(api.namespace);\r\n\r\n\t\tif (!tree[api.action]) {\r\n\t\t\ttree[api.action] = {};\r\n\t\t}\r\n\t\taction = tree[api.action];\r\n\r\n\t\tme.#reduce(api.methods)?.forEach(v => me.#buildMethod(action, v, me.#id));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Reduce duplicate methods with parameters overrides\r\n\t * @param {Array<Object>} list \r\n\t * @returns \r\n\t */\r\n\t#reduce(list) {\r\n\t\treturn list.reduce((a, v, i, ar) => {\r\n\r\n\t\t\tif (a.filter(r => r.name == v.name).length == 1) return a;\r\n\r\n\t\t\tconst objs = ar.filter(r => r.name == v.name);\r\n\t\t\tif (objs.length === 1) {\r\n\t\t\t\ta.push(v);\r\n\t\t\t\treturn a;\r\n\t\t\t}\r\n\r\n\t\t\tconst obj = objs.filter(r => r.name === v.name).reduce((a, v) => {\r\n\t\t\t\ta.mid.push(v.mid);\r\n\t\t\t\ta.len.push(v.len);\r\n\t\t\t\ta.async[v.len] = v.async;\r\n\t\t\t\treturn a;\r\n\t\t\t}, { name: v.name, mid: [], len: [], async: {} });\r\n\r\n\t\t\ta.push(obj);\r\n\t\t\treturn a\r\n\t\t}, []);\r\n\t}\r\n\r\n\t/**\r\n\t * Generate namespace object structure from string version\r\n\t *\r\n\t * @param  {String} namespace\r\n\t * \t\t\tTree structure delimited with dots\r\n\t *\r\n\t * @return {Object}\r\n\t * \t\t\tObject tree structure\r\n\t */\r\n\t#buildNamespace(namespace) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tlet tmp = globalThis;\r\n\t\tlet tmp2 = me.#model;\r\n\r\n\t\tnamespace.split('.').every(v => {\r\n\r\n\t\t\tif (!tmp[v]) tmp[v] = {};\r\n\t\t\ttmp = tmp[v];\r\n\r\n\t\t\tif (!tmp2[v]) tmp2[v] = tmp;\r\n\t\t\ttmp2 = tmp;\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn tmp;\r\n\t}\r\n\r\n\t/**\r\n\t * Build instance methods\r\n\t *\r\n\t * @param {String} instance\r\n\t * @param {Array} api\r\n\t * @param {String} id\r\n\t */\r\n\t#buildMethod(instance, api, id) {\r\n\r\n\t\tconst enc = api.encrypt === false ? false : true;\r\n\t\tconst cfg = {\r\n\t\t\tl: api.len,\r\n\t\t\ta: api.async || false,\r\n\t\t\tx: api.mid,\r\n\t\t\te: enc,\r\n\t\t\ti: id\r\n\t\t};\r\n\r\n\t\tinstance[api.name] = this.#apiFn(cfg);\r\n\t\tinstance[api.name]._id_ = id;\r\n\t\t// Object.freeze(instance[api.name]);\r\n\t}\r\n\r\n\t/**\r\n\t * Generic function used to attach for generated API\r\n\t *\r\n\t * @param {Array} params List of arguments from caller\r\n\t */\r\n\t#apiFn(params) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst prop = params;\r\n\r\n\t\tconst fn = function () {\r\n\r\n\t\t\tconst args = Array.prototype.slice.call(arguments);\r\n\r\n\t\t\t// overriden function with multiple param lengths\r\n\t\t\tconst isOverride = Array.isArray(prop.l);\r\n\r\n\t\t\tconst len = isOverride ? prop.l.filter(v => v === args.length).pop() : prop.l;\r\n\t\t\tif (args.length != len) throw new Error(`Invalid arguments length. Required (${prop.l})`);\r\n\r\n\t\t\tconst handle = Array.isArray(prop.x) ? prop.x[len-1] : prop.x;\r\n\t\t\tconst isAsync = isOverride ? prop.a[args.length] : prop.a;\r\n\t\t\tconst timeout = isAsync ? 0 : me.#timeout;\r\n\r\n\t\t\tconst req = {\r\n\t\t\t\t\"handle\": handle,\r\n\t\t\t\t\"id\": prop.i,\r\n\t\t\t\t\"enc\": prop.e,\r\n\t\t\t\t\"data\": args,\r\n\t\t\t\t\"key\": ++me.#cnt,\r\n\t\t\t\t\"tid\": 0,\r\n\t\t\t\t\"ts\": Date.now()\r\n\t\t\t};\r\n\t\t\tObject.seal(req);\r\n\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst proxy = Request.wrap(req, timeout, (obj) => {\r\n\t\t\t\t\t\tme.#onResponse(obj, resolve, reject);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tme.emit('call', proxy);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.log(e);\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn fn;\r\n\t}\r\n\r\n\t/**\r\n\t * Process remote response\r\n\t */\r\n\t#onResponse(obj, resolve, reject) {\r\n\r\n\t\tif (obj instanceof Error) return reject(obj);\r\n\r\n\t\tconst result = obj.result || obj;\r\n\r\n\t\tif (result.success) {\r\n\t\t\tresolve(result);\r\n\t\t} else {\r\n\t\t\treject(result);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Static instance builder\r\n\t * @param {object} cfg Api list from server side Quark engine\r\n\t * @param {number} id Unique Quark Engine ID - to link functions to the engine instance\r\n\t * @returns \r\n\t */\r\n\tstatic build(cfg, id, timeout) {\r\n\t\tconst generator = new Generator(id, timeout);\r\n\t\tgenerator.build(cfg);\r\n\t\treturn generator;\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport QuarkEvent from \"./Event.mjs\";\r\nimport Queue from \"./Queue.mjs\";\r\nimport Streams from \"./Streams.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to call remote services.\r\n * All Direct functions linked to io.greenscreens namespace\r\n */\r\nexport default class SocketChannel extends QuarkEvent {\r\n\r\n\t#challenge = Date.now();\r\n\t#queue = new Queue();\r\n\t#webSocket = null;\r\n\t#engine = null;\r\n\t#iid = 0;\r\n\r\n\t/**\r\n\t * Initialize Socket channel\r\n\t */\r\n\tasync init(engine) {\r\n\r\n\t\tconst me = this;\r\n\t\tme.stop();\r\n\t\tme.#engine = engine;\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tme.#startSocket(resolve, reject);\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tget isOpen() {\r\n\t\tconst me = this;\r\n\t\tif (me.#webSocket == null) return false;\r\n\t\treturn me.#webSocket.readyState === me.#webSocket.OPEN;\r\n\t}\r\n\r\n\t/**\r\n\t * Close WebSocket channel if available\r\n\t */\r\n\tstop() {\r\n\t\tconst me = this;\r\n\t\tif (me.#webSocket == null) return false;\r\n\t\tme.#webSocket.close();\r\n\t\tme.#webSocket = null;\r\n\t\tme.#engine = null;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Must be here, if encryption and compression is not available, \r\n\t * for server to regoznize Quark data format.\r\n\t * @param {*} req \r\n\t * @returns \r\n\t */\r\n\t#wrap(cmd, req) {\r\n\t\tconst data = {\r\n\t\t\ttype: 'GS',\r\n\t\t\tcmd: cmd,\r\n\t\t\tdata: req ? [req] : null\r\n\t\t};\r\n\t\treturn JSON.stringify(data);\r\n\t}\r\n\r\n\tget #ping() {\r\n\t\treturn this.#wrap('ping');\r\n\t}\r\n\r\n\t/**\r\n\t * Prepare remote call, encrypt if available\r\n\t *\r\n\t * @param {Object} req\r\n\t *         Data to send (optionaly encrypt)\r\n\t */\r\n\tasync #onCall(req) {\r\n\r\n\t\treq = req.detail;\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (req.id !== me.#engine.id) return;\r\n\r\n\t\tme.#queue.updateRequest(req);\r\n\r\n\t\tconst msg = me.#wrap('data', req);\r\n\t\tconst raw = await Streams.wrap(msg, me.#engine.Security);\r\n\t\tme.#webSocket.send(raw);\r\n\t}\r\n\r\n\tasync #startSocket(resolve, reject) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tconst url = new URL(engine.serviceURL);\r\n\r\n\t\t// const headers = Object.assign({}, engine.headers || {});\r\n\t\tconst querys = Object.assign({}, engine.querys || {});\r\n\t\tquerys.q = me.#challenge;\r\n\t\tquerys.c = Streams.isAvailable;\r\n\r\n\t\tObject.entries(querys || {}).forEach((v) => {\r\n\t\t\tif (v[1]) url.searchParams.append(v[0], encodeURIComponent(v[1]));\r\n\t\t});\r\n\r\n\t\tengine.Security.updateCookie();\r\n\r\n\t\tme.#webSocket = new WebSocket(url.toString(), ['quark']);\r\n\t\tme.#webSocket.binaryType = \"arraybuffer\";\r\n\r\n\t\tconst onCall = me.#onCall.bind(me);\r\n\r\n\t\tme.#webSocket.onopen = (event) => {\r\n\r\n\t\t\tme.emit('online', event);\r\n\t\t\tgenerator.on('call', onCall);\r\n\t\t\tme.#initPing();\r\n\r\n\t\t\tif (!engine.isWSAPI) {\r\n\t\t\t\treturn resolve(true);\r\n\t\t\t}\r\n\r\n\t\t\tgenerator.once('api', async (e) => {\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst data = e.detail;\r\n\t\t\t\t\tdata.challenge = me.#challenge;\r\n\t\t\t\t\tawait engine.registerAPI(data);\r\n\t\t\t\t\tresolve(true);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\r\n\t\t};\r\n\r\n\t\tme.#webSocket.onclose = (event) => {\r\n\t\t\tgenerator.off('call', onCall);\r\n\t\t\tclearInterval(me.#iid);\r\n\t\t\tme.stop();\r\n\t\t\tme.emit('offline', event);\r\n\t\t}\r\n\r\n\t\tme.#webSocket.onerror = (event) => {\r\n\t\t\tgenerator.off('call', onCall);\r\n\t\t\treject(event);\r\n\t\t\tme.stop();\r\n\t\t\tme.emit('error', event);\r\n\t\t};\r\n\r\n\t\tme.#webSocket.onmessage = async (event) => {\r\n\t\t\ttry {\r\n\t\t\t\tif (event.data instanceof ArrayBuffer) {\r\n\t\t\t\t\tawait me.#prepareBinaryMessage(event.data);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tawait me.#prepareTextMessage(event.data);\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\te.data = event;\r\n\t\t\t\tgenerator.emit('error', e);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t#initPing() {\r\n\t\tconst me = this;\r\n\t\tme.#iid = setInterval(() => {\r\n\t\t\tme.send(me.#ping);\r\n\t\t}, 15 * 1000);\r\n\t}\r\n\r\n\tasync #prepareBinaryMessage(message) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst security = engine.Security;\r\n\r\n\t\tmessage = await Streams.unwrap(message, security, me.#challenge);\r\n\r\n\t\tconst isJSON = Streams.isJson(message);\r\n\t\tif (!isJSON) return generator.emit('raw', message);\r\n\r\n\t\tif (Array.isArray(message)) {\r\n\t\t\tmessage.forEach(m => me.#onMessage(m));\r\n\t\t} else {\r\n\t\t\tme.#onMessage(message);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Parse and prepare received message for processing\r\n\t *\r\n\t * @param {String} mesasge\r\n\t *\r\n\t */\r\n\tasync #prepareTextMessage(message) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\ttry {\r\n\t\t\tconst isJSON = Streams.isJson(message);\r\n\r\n\t\t\tif (!isJSON) return generator.emit('raw', message);\r\n\r\n\t\t\tmessage = JSON.parse(message);\r\n\t\t\tif (Array.isArray(message)) {\r\n\t\t\t\tmessage.forEach(m => me.#onMessage(m));\r\n\t\t\t} else {\r\n\t\t\t\tme.#onMessage(message);\r\n\t\t\t}\r\n\r\n\t\t} catch (e) {\r\n\t\t\tgenerator.emit('error', e);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Process received message\r\n\t *\r\n\t * @param {*} msg\r\n\t *\r\n\t */\r\n\tasync #onMessage(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet data = null;\r\n\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tif (obj.cmd === 'api') {\r\n\t\t\treturn generator.emit('api', obj.data);\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'err') {\r\n\t\t\treturn generator.emit('error', obj.result);\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'data') {\r\n\t\t\tdata = obj.data;\r\n\t\t}\r\n\r\n\t\tif (data) {\r\n\t\t\tconst unknown = me.#queue.process(data);\r\n\t\t\tunknown.forEach((obj) => me.emit('message', obj));\r\n\t\t} else {\r\n\t\t\tme.emit('message', data);\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport Streams from \"./Streams.mjs\";\r\n\r\n/**\r\n * Web Requester Engine\r\n * Used to call remote services through HTTP/S\r\n */\r\nexport default class WebChannel {\r\n\r\n\tstatic #MIME_BINARY = 'application/octet-stream';\r\n\tstatic #MIME_JSON = 'application/json';\r\n\r\n\t#engine = null;\r\n\r\n\t/**\r\n\t * If http/s used in url, make standard fetch call to the defined service\r\n\t */\r\n\tasync init(engine) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (me.#engine) me.stop();\r\n\r\n\t\tme.#engine = engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tconst data = await me.#getAPI(engine.apiURL);\r\n\t\tawait engine.registerAPI(data);\r\n\r\n\t\tif (engine.isSocketChannel) return;\r\n\r\n\t\tgenerator.on('call', me.#onRequest.bind(me));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Disengage listeners and links\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tme.#engine = null;\r\n\r\n\t\tengine.Generator.off('call');\r\n\t\tif (engine.isSocketChannel) return;\r\n\t\ttry {\r\n\t\t\tfetch(engine.serviceURL, {\r\n\t\t\t\tmethod: 'delete'\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Callback for API call request,\r\n\t * here we make remote API call\r\n\t */\r\n\tasync #onRequest(req) {\r\n\r\n\t\treq = req.detail;\r\n\t\tconst me = this;\r\n\t\tlet o = null;\r\n\r\n\t\tif (req.id !== me.#engine.id) return;\r\n\r\n\t\ttry {\r\n\t\t\to = await me.#onCall(me.#engine, req);\r\n\t\t\treq.finish(o);\r\n\t\t} catch (err) {\r\n\t\t\treq.finish(err);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Get API definition through HTTP/s channel\r\n\t *\r\n\t * @param {String} url\r\n\t * \t\t  URL Address for API service definitions\r\n\t */\r\n\tasync #getAPI(url) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst security = engine.Security;\r\n\t\tconst id = Date.now();\r\n\r\n\t\tconst headers = Object.assign({}, engine.headers || {}, { 'gs-challenge': id });\r\n\r\n\t\tif (security.publicKey) {\r\n\t\t\theaders['gs-public-key'] = security.publicKey;\r\n\t\t}\r\n\r\n\t\tconst res = await me.#fetchCall(url, null, headers, false, 'get');\r\n\t\tconst data = await me.#onResponse(res, id);\r\n\r\n\t\t// update local challenge for signature verificator\r\n\t\tdata.challenge = id.toString();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tget #accept() {\r\n\t\treturn `${WebChannel.#MIME_BINARY}, ${WebChannel.#MIME_JSON}`;\r\n\t}\r\n\r\n\t#mime(data) {\r\n\t\tconst isBinary = typeof data === 'string' ? false : true;\r\n\t\treturn isBinary ? WebChannel.#MIME_BINARY : WebChannel.#MIME_JSON;\r\n\t}\r\n\r\n\t/**\r\n\t * Send data to server with http/s channel\r\n\t */\r\n\tasync #fetchCall(url, data, head, isCompress, method = 'post') {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst CONTENT_TYPE = me.#mime(data);\r\n\r\n\t\tconst HEADERS_ = {\r\n\t\t\t'Accept': me.#accept,\r\n\t\t\t'Content-Type': CONTENT_TYPE,\r\n\t\t\t'Accept-Encoding': 'gzip,deflate,br'\r\n\t\t};\r\n\r\n\t\tif (isCompress && Streams.isAvailable) {\r\n\t\t\tdata = Streams.toBinary(data);\r\n\t\t\tdata = await Streams.compressOrDefault(data);\r\n\t\t\tHEADERS_['Content-Encoding'] = 'gzip';\r\n\t\t}\r\n\r\n\t\tconst service = new URL(url);\r\n\t\tconst headers = Object.assign({}, engine.headers || {}, HEADERS_, head || {});\r\n\t\tconst querys = Object.assign({}, engine.querys || {});\r\n\r\n\t\tconst req = {\r\n\t\t\tmethod: method,\r\n\t\t\theaders: headers\r\n\t\t};\r\n\r\n\t\tif (data) req.body = data;\r\n\r\n\t\tObject.entries(querys || {}).forEach((v) => {\r\n\t\t\tservice.searchParams.append(v[0], encodeURIComponent(v[1]));\r\n\t\t});\r\n\r\n\t\treturn await fetch(service.toString(), req);\r\n\r\n\t}\r\n\r\n\tasync #onResponse(res, id) {\r\n\r\n\t\tlet obj = await WebChannel.fromResponse(res);\r\n\t\tif (obj instanceof Uint8Array) {\r\n\t\t\tobj = await Streams.unwrap(obj, this.#engine.Security, id);\r\n\t\t}\r\n\r\n\t\tif (obj && obj.type == 'ws' && obj.cmd === 'data') {\r\n\t\t\treturn obj.data;\r\n\t\t}\r\n\t\treturn obj;\r\n\t}\r\n\r\n\t/**\r\n\t * Prepare remote call, encrypt if available\r\n\t *\r\n\t * @param {String} url\r\n\t *        Service URL to receive data\r\n\t *\r\n\t * @param {Object} req\r\n\t *         Data to send (optionally encrypt)\r\n\t */\r\n\tasync #onCall(engine, req) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst security = engine.Security;\r\n\t\tconst url = engine.serviceURL;\r\n\r\n\t\tconst isEncrypt = security?.isValid;\r\n\t\tlet isCompress = false;\r\n\t\tlet raw = null;\r\n\r\n\t\tif (req) {\r\n\t\t\tif (isEncrypt) {\r\n\t\t\t\traw = await Streams.wrap(req, me.#engine.Security);\r\n\t\t\t} else {\r\n\t\t\t\traw = JSON.stringify(raw);\r\n\t\t\t\tisCompress = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst head = {};\r\n\r\n\t\tif (isEncrypt) {\r\n\t\t\thead['gs-public-key'] = security.publicKey;\r\n\t\t}\r\n\r\n\t\t// send and wait for response\r\n\t\tconst res = await me.#fetchCall(url, raw, head, isCompress);\r\n\t\tconst data = await me.#onResponse(res);\r\n\r\n\t\t// if error throw\r\n\t\tif (data.cmd == 'err') {\r\n\t\t\tthrow new Error(data.result.msg);\r\n\t\t}\r\n\r\n\t\t// return server response\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tstatic async fromResponse(res) {\r\n\r\n\t\tif (!res.ok) {\r\n\t\t\tthrow new Error(`${res.status} : ${res.statusText}`);\r\n\t\t}\r\n\r\n\t\tconst mime = res.headers.get('content-type') || '';\r\n\t\tconst isBin = mime.includes(WebChannel.#MIME_BINARY);\r\n\t\tconst isJson = mime.includes(WebChannel.#MIME_JSON);\r\n\t\tconst isPlain = !isBin && !isJson;\r\n\r\n\t\tif (isJson) return await res.json();\r\n\t\tif (isPlain) return await res.text();\r\n\r\n\t\tconst raw = await res.arrayBuffer();\r\n\t\treturn new Uint8Array(raw);\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport Generator from \"./Generator.mjs\";\r\nimport Security from \"./Security.mjs\";\r\nimport SocketChannel from \"./SocketChannel.mjs\";\r\nimport WebChannel from \"./WebChannel.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to initialize remote API and remote services.\r\n */\r\nconst ERROR_MESSAGE = 'Invalid definition for Engine Remote Service';\r\nconst ERROR_API_UNDEFINED = 'API Url not defined!';\r\nconst ERROR_SVC_UNDEFINED = 'Service Url not defined!';\r\n\r\n/**\r\n * Main class for Quark Engine Client\r\n */\r\nexport default class QuarkEngine {\r\n\r\n\t#cfg = null;\r\n\t#isWSAPI = false;\r\n\t#isWebChannel = false;\r\n\t#isSocketChannel = false;\r\n\r\n\t#Security = null;\r\n\t#Generator = null;\r\n\t#WebChannel = null;\r\n\t#SocketChannel = null;\r\n\r\n\t#headers = null;\r\n\t#querys = null;\r\n\r\n\t#id = null;\r\n\r\n\tconstructor(cfg) {\r\n\r\n\t\tcfg = cfg || {};\r\n\r\n\t\tif (!cfg.api) {\r\n\t\t\tthrow new Error(ERROR_API_UNDEFINED);\r\n\t\t}\r\n\r\n\t\tif (!cfg.service) {\r\n\t\t\tthrow new Error(ERROR_SVC_UNDEFINED);\r\n\t\t}\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tme.#cfg = null;\r\n\t\tme.#isWSAPI = false;\r\n\t\tme.#isWebChannel = false;\r\n\t\tme.#isSocketChannel = false;\r\n\r\n\t\tme.#Security = null;\r\n\t\tme.#Generator = null;\r\n\t\tme.#WebChannel = null;\r\n\t\tme.#SocketChannel = null;\r\n\t\tme.#id = Date.now();\r\n\r\n\t\tme.#cfg = cfg;\r\n\t\tme.#isWSAPI = cfg.api === cfg.service && cfg.api.indexOf('ws') == 0;\r\n\r\n\t\tme.#headers = cfg.headers || {};\r\n\t\tme.#querys = cfg.querys || {};\r\n\r\n\t\tme.#Security = cfg.security instanceof Security ? cfg.security : null;\r\n\t\tme.#isWebChannel = cfg.service.indexOf('http') === 0;\r\n\t\tme.#isSocketChannel = cfg.service.indexOf('ws') === 0;\r\n\r\n\t\tif ((me.isWebChannel || me.isSocketChannel) === false) {\r\n\t\t\tthrow new Error(ERROR_MESSAGE);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/*\r\n\t * Initialize engine, throws error,\r\n\t */\r\n\tasync init() {\r\n\r\n\t\tconst me = this;\r\n\t\tif (me.isActive) return;\r\n\r\n\t\tif (!me.#Security) me.#Security = await Security.create();\r\n\t\tme.#Generator = new Generator(me.id);\r\n\r\n\t\tif (me.isWebChannel || me.isWSAPI == false) {\r\n\t\t\tme.#WebChannel = new WebChannel();\r\n\t\t\tawait me.WebChannel.init(me);\r\n\t\t}\r\n\r\n\t\tif (me.isSocketChannel) {\r\n\t\t\tme.#SocketChannel = new SocketChannel();\r\n\t\t\tawait me.SocketChannel.init(me);\r\n\t\t}\r\n\r\n\t\treturn me;\r\n\t}\r\n\r\n\t/**\r\n\t * Use internaly from channel to register received\r\n\t * API definitions and security data\r\n\t */\r\n\tasync registerAPI(data) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\t// initialize encryption if provided\r\n\t\tif (data.signature && !me.Security?.isValid) {\r\n\t\t\tawait me.Security?.init(data);\r\n\t\t}\r\n\r\n\t\tme.Generator?.build(data.api);\r\n\t}\r\n\r\n\t/**\r\n\t * Stop engine instance by clearing all references\r\n\t * stoping listeners, stoping socket is avaialble\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tme.WebChannel?.stop();\r\n\t\tme.SocketChannel?.stop();\r\n\t\tme.Generator?.stop();\r\n\r\n\t\tme.#WebChannel = null;\r\n\t\tme.#SocketChannel = null;\r\n\t\tme.#Generator = null;\r\n\t\tme.#Security = null;\r\n\t\tme.#cfg = null;\r\n\t}\r\n\r\n\t/*\r\n\t * Return generated API\r\n\t */\r\n\tget api() {\r\n\t\treturn this.Generator?.api || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Check if engine is active\r\n\t */\r\n\tget isActive() {\r\n\t\tconst me = this;\r\n\t\tif (me.SocketChannel && !me.SocketChannel.isOpen) return false;\r\n\t\treturn me.api && me.Security ? true : false;\r\n\t}\r\n\r\n\t/*\r\n\t * Return API URL address\r\n\t */\r\n\tget apiURL() {\r\n\t\treturn this.cfg?.api || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Return Service URL address\r\n\t */\r\n\tget serviceURL() {\r\n\t\treturn this.cfg?.service || null;\r\n\t}\r\n\r\n\tget cfg() { return this.#cfg };\r\n\tget isWSAPI() { return this.#isWSAPI };\r\n\tget isWebChannel() { return this.#isWebChannel };\r\n\tget isSocketChannel() { return this.#isSocketChannel };\r\n\r\n\tget Security() { return this.#Security; }\r\n\tget Generator() { return this.#Generator; }\r\n\tget WebChannel() { return this.#WebChannel; }\r\n\tget SocketChannel() { return this.#SocketChannel; }\r\n\r\n\tget headers() { return this.#headers; }\r\n\tget querys() { return this.#querys; }\r\n\tget id() { return this.#id; }\r\n\r\n\t/*\r\n\t * Static instance builder\r\n\t */\r\n\tstatic async init(cfg) {\r\n\t\tconst engine = new QuarkEngine(cfg);\r\n\t\treturn engine.init();\r\n\t}\r\n}\r\n"],"names":["Buffer","static","TextEncoder","TextDecoder","src","data","Array","Uint8Array","ArrayBuffer","String","fromText","toArrayBuffer","isString","test","b64","me","fromBase64","isHexString","fromHex","validateData","val","isText","decoder","decode","encoder","encode","value","arry","i","length","push","parseInt","substr","buffer","prototype","map","call","x","toString","slice","join","strbin","atob","bufView","strLen","charCodeAt","toBuffer","btoa","reduce","fromCharCode","QuarkEvent","EventTarget","listeners","Set","list","type","listener","from","this","isFunction","filter","o","addEventListener","opt","add","super","removeEventListener","forEach","delete","unbind","clear","on","once","wrap","e","off","emit","evt","CustomEvent","detail","dispatchEvent","send","listen","unlisten","wait","Promise","r","fn","preventDefault","stopPropagation","Object","freeze","Streams","isAvailable","CompressionStream","DecompressionStream","raw","encrypted","compressed","dataType","dv","DataView","setUint8","setUint32","set","security","toBinary","compressOrDefault","encrypt","toGS","isValid","challenge","isGS","getUint8","len","getUint32","byteLength","isCompress","isCompressFlag","isEncrypt","isEncryptFlag","api","isApiFlag","encLen","verLen","sgnLen","keyEnc","keyVer","signature","init","decrypt","decompress","arrayBuffer","isJson","Error","JSON","parse","toText","getUint16","stream","byteArray","writer","writable","getWriter","write","close","Response","readable","encoding","compress","stringify","isGzip","at","indexOf","first","trim","last","isJsonArray","isJsonObj","Security","name","namedCurve","hash","publicKey","keyPair","aesKey","size","array","crypto","getRandomValues","subtle","generateKey","ECDH_TYPE","key","mode","der","use","split","importKey","ab","exportKey","toHex","VERIFY","verify","sign","cookie","path","updateCookie","document","getChallenge","cfg","toChallenge","toBase64","async","ECDSA_TYPE","verKey","initPublic","deriveAES","priv","pub","pubDef","public","derivedKey","AES_TYPE","deriveKey","toAlgo","iv","assign","counter","databin","result","decryptRaw","encryptRaw","initVerify","privateKey","getRandom","d","encryptAsBuffer","decryptAsBuffer","initKeyPair","preInit","Queue","Map","up","down","tid","updateRequest","req","reset","process","obj","unknown","isArray","res","execute","unkown","has","get","finish","Request","id","timeout","callback","constructor","object","property","bind","clearTimeout","setTimeout","Proxy","Generator","model","cnt","stop","detach","cleanup","k","el","_id_","values","build","buildAPI","v","buildInstance","tree","action","buildNamespace","namespace","methods","buildMethod","a","ar","objs","mid","tmp","globalThis","tmp2","every","instance","enc","l","apiFn","params","prop","args","arguments","isOverride","pop","handle","isAsync","ts","Date","now","seal","resolve","reject","proxy","onResponse","success","generator","SocketChannel","queue","webSocket","engine","iid","startSocket","isOpen","readyState","OPEN","cmd","ping","msg","url","URL","serviceURL","querys","q","c","entries","searchParams","append","encodeURIComponent","WebSocket","binaryType","onCall","onopen","event","initPing","isWSAPI","registerAPI","onclose","clearInterval","onerror","onmessage","prepareBinaryMessage","prepareTextMessage","setInterval","message","unwrap","m","onMessage","WebChannel","getAPI","apiURL","isSocketChannel","onRequest","fetch","method","err","headers","fetchCall","accept","MIME_BINARY","MIME_JSON","mime","head","CONTENT_TYPE","HEADERS_","Accept","service","body","fromResponse","ok","status","statusText","isBin","includes","isPlain","json","text","QuarkEngine","isWebChannel","isActive","create"],"mappings":"AAIe,MAAMA,OAEpBC,SAAkB,IAAIC,YACtBD,SAAkB,IAAIE,YAQtBF,oBAAoBG,GACnB,IAAIC,EAAO,KACX,GAAID,aAAeE,MAClBD,EAAO,IAAIE,WAAWH,QAChB,GAAIA,aAAeI,YACzBH,EAAO,IAAIE,WAAWH,QAChB,GAAIA,aAAeG,WACzBF,EAAOD,OACD,GAAIA,aAAeK,QAAyB,iBAARL,EAC1CC,EAAOL,OAAOU,SAASN,OACjB,KAAIA,EAAIO,cAGd,KAAM,6DAFNN,EAAO,IAAIE,WAAWH,EAAIO,gBAG1B,CACD,OAAON,CACP,CAODJ,gBAAgBI,GACf,MAAuB,iBAATA,CACd,CAODJ,mBAAmBI,GAClB,QAAOL,OAAOY,SAASP,IAAQ,kBAAoBQ,KAAKR,EACxD,CAEDJ,gBAAgBI,EAAMS,GAAM,GAC3B,MAAMC,EAAKf,OAUX,OATIe,EAAGH,SAASP,KAEdA,EADGS,EACIC,EAAGC,WAAWX,GACXU,EAAGE,YAAYZ,GAClBU,EAAGG,QAAQb,GAEXU,EAAGL,SAASL,IAGdU,EAAGI,aAAad,EACvB,CAEDJ,cAAcmB,GACb,OAAOpB,OAAOqB,OAAOD,GAAOA,EAAMpB,QAAOsB,EAASC,OAAOH,EACzD,CAEDnB,gBAAgBmB,GACf,OAAOpB,OAAOqB,OAAOD,GAAOpB,QAAOwB,EAASC,OAAOL,GAAOA,CAC1D,CAEDnB,cAAcmB,GACb,MAAsB,iBAARA,CACd,CAEDnB,eAAeyB,GAEd,MAAMC,EAAO,GAEb,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,GAAK,EACtCD,EAAKG,KAAKC,SAAS,KAAOL,EAAMM,OAAOJ,EAAG,GAAI,KAG/C,OAAO,IAAIrB,WAAWoB,EACtB,CAED1B,aAAagC,GACZ,OAAO3B,MAAM4B,UAAUC,IAAIC,KAAK,IAAI7B,WAAW0B,IAASI,IAAM,KAAOA,EAAEC,SAAS,KAAKC,OAAO,KAAIC,KAAK,GACrG,CAEDvC,kBAAkByB,GAEjB,MAAMe,EAASC,KAAKhB,GACdO,EAAS,IAAIzB,YAAYiC,EAAOZ,QAChCc,EAAU,IAAIpC,WAAW0B,GAE/B,IAAK,IAAIL,EAAI,EAAGgB,EAASH,EAAOZ,OAAQD,EAAIgB,EAAQhB,IACnDe,EAAQf,GAAKa,EAAOI,WAAWjB,GAGhC,OAAOe,CACP,CAED1C,gBAAgBgC,GAEf,OADAA,EAASjC,OAAO8C,SAASb,GAClBc,KAAKd,EAAOe,QAAO,CAAC3C,EAAMe,IACzBf,EAAOI,OAAOwC,aAAa7B,IAChC,IACH,EClGa,MAAM8B,mBAAmBC,YAEpCC,GAAa,IAAIC,IAEjBC,GAAMC,EAAO,GAAIC,GACb,MACMF,EAAOhD,MAAMmD,KADRC,MACgBN,GAC3B,OAAOF,YAAWS,EAAYH,GAC1BF,EAAKM,QAAOC,GAAKA,EAAEN,OAASA,GAAQM,EAAEL,WAAaA,IAEnDF,EAAKM,QAAOC,GAAKA,EAAEN,OAASA,GACnC,CAEDO,iBAAiBP,EAAMC,EAAUO,GAE7B,QAAKb,YAAWS,EAAYH,KADjBE,MAERN,EAAWY,IAAI,CAAET,KAAMA,EAAMC,SAAUA,IACnCS,MAAMH,iBAAiBP,EAAMC,EAAUO,GACjD,CAEDG,oBAAoBX,EAAMC,GACtB,MAAMzC,EAAK2C,KACLJ,EAAOvC,GAAGuC,EAAMC,EAAMC,GAC5BF,EAAKa,SAAQN,GAAKI,MAAMC,oBAAoBL,EAAEN,KAAMM,EAAEL,YACtDF,EAAKa,SAAQN,GAAK9C,GAAGqC,EAAWgB,OAAOP,IAC1C,CAKDQ,SAEI/D,MAAMmD,KADKC,MACGN,GAAYe,SAAQN,IAC9BI,MAAMC,oBAAoBL,EAAEN,KAAMM,EAAEL,SAAS,IAFtCE,MAIRN,EAAWkB,OACjB,CAQDC,GAAGhB,EAAO,GAAIC,GACV,OAAOE,KAAKI,iBAAiBP,EAAMC,EACtC,CAQDgB,KAAKjB,EAAMC,GAEP,IAAIiB,KAAQC,IACRlB,EAASkB,GACTD,KAAO,IAAI,EAIf,OAFAA,KAAKlB,KAAOA,EACZkB,KAAKjB,SAAWA,EANLE,KAODI,iBAAiBP,EAAMkB,KAAM,CAAED,MAAM,GAClD,CAQDG,IAAIpB,EAAO,GAAIC,GACX,OAAOE,KAAKQ,oBAAoBX,EAAMC,EACzC,CAQDoB,KAAKrB,EAAMlD,GACP,IAAKkD,EAAM,OAAO,EAClB,MAAMsB,EAAM,IAAIC,YAAYvB,EAAM,CAAEwB,OAAQ1E,IAC5C,OAAOqD,KAAKsB,cAAcH,EAC7B,CAEDI,KAAK1B,EAAMlD,GAAQqD,KAAKkB,KAAKrB,EAAMlD,EAAQ,CAC3C6E,OAAO3B,EAAMC,GAAYE,KAAKa,GAAGhB,EAAMC,EAAY,CACnD2B,SAAS5B,EAAMC,GAAYE,KAAKiB,IAAIpB,EAAMC,EAAY,CAOtD4B,KAAK7B,EAAO,IACR,IAAKA,EAAM,OAAOmB,EAAE,oBACpB,MAAM3D,EAAK2C,KACX,OAAO,IAAI2B,SAAQ,CAACC,EAAGZ,KACnB3D,EAAGyD,KAAKjB,GAAOmB,GAAMY,EAAEZ,IAAG,GAEjC,CAEDzE,SAAmBsF,GACf,MAAqB,mBAAPA,CACjB,CAODtF,eAAeyE,GACPxB,YAAWS,EAAYe,EAAG,mBAAmBA,EAAEc,iBAC/CtC,YAAWS,EAAYe,EAAG,oBAAoBA,EAAEe,iBACvD,QAGGC,OAAOC,OAAOzC,WACjB,EC3HU,MAAM0C,QAETC,yBACV,MAAoC,oBAAtBC,mBACkB,oBAAxBC,mBACR,CASD9F,SAAa+F,EAAKC,GAAY,EAAOC,GAAa,GACjD,IAAKF,aAAezF,WAAY,OAAOyF,EACvC,MAAMzC,EAAOqC,SAAQO,EAAUF,EAAWC,GAEpC7F,EAAO,IAAIE,WAAW,EAAIyF,EAAInE,QAC9BuE,EAAK,IAAIC,SAAShG,EAAK4B,QAO7B,OANAmE,EAAGE,SAAS,EAAG,IACfF,EAAGE,SAAS,EAAG,IACfF,EAAGE,SAAS,EAAG,GACfF,EAAGE,SAAS,EAAG/C,GACf6C,EAAGG,UAAU,EAAGP,EAAInE,QACpBxB,EAAKmG,IAAIR,EAAK,GACP3F,CACP,CAODJ,kBAAkB+F,EAAKS,GAUtB,OATAT,EAAMJ,QAAQc,SAASV,GACvBA,QAAYJ,QAAQe,kBAAkBX,GACtCA,QAAYS,EAASG,QAAQZ,GAC7BA,EAAMJ,SAAQiB,EAAMb,EAAKS,EAASK,QAASlB,QAAQC,YAOnD,CAOD5F,oBAAoB+F,EAAKS,EAAUM,GAE9Bf,aAAezF,aAAYyF,EAAMA,EAAI/D,QAOzC,MAAMmE,EAAK,IAAIC,SAASL,GAClBgB,EAAOpB,SAAQoB,EAAMZ,GAG3B,GADAJ,EAAMJ,QAAQc,SAASV,IAClBgB,EAAM,OAAOhB,EAElB,MAAMzC,EAAO6C,EAAGa,SAAS,GACnBC,EAAMd,EAAGe,UAAU,GAEzB,GAAIf,EAAGgB,aAAeF,EAAM,EAAG,OAAOlB,EAEtCA,EAAMA,EAAIzD,MAAM,GAEhB,MAAM8E,EAAazB,QAAQ0B,eAAe/D,GACpCgE,EAAY3B,QAAQ4B,cAAcjE,GAGxC,IAAIkE,EAAM,KACV,GAHc7B,QAAQ8B,UAAUnE,GAGrB,CACV,MAAMoE,EAASvB,EAAGe,UAAU,GACtBS,EAASxB,EAAGe,UAAU,GAAQQ,GAC9BE,EAASzB,EAAGe,UAAU,GAAQQ,EAAS,EAAIC,GAEjDH,EAAM,CACLV,UAAWA,EACXe,OAAS9B,EAAIzD,MAAM,EAAG,EAAIoF,GAC1BI,OAAS/B,EAAIzD,MAAM,EAAIoF,EAAS,EAAG,EAAIA,EAAS,EAAIC,GACpDI,UAAYhC,EAAIzD,MAAM,EAAIoF,EAAS,EAAIC,EAAS,EAAG,EAAID,EAAS,EAAIC,EAAS,EAAIC,UAG5EpB,EAASwB,KAAKR,GACpBzB,EAAMA,EAAIzD,MAAM,GAAUoF,EAASC,EAASC,EAC5C,CAYD,GATIN,IACHvB,QAAYS,GAAUyB,QAAQlC,KAG3BqB,IACHrB,QAAYJ,QAAQuC,WAAWnC,GAAKoC,eAGrCpC,EAAMJ,QAAQc,SAASV,IAClBJ,QAAQyC,OAAOrC,GAAM,MAAM,IAAIsC,MAAM,oBAE1C,OAAOC,KAAKC,MAAMxI,OAAOyI,OAAOzC,GAChC,CAOD/F,SAAamG,GACZ,OAAOA,EAAGgB,WAAa,GAAyB,QAApBhB,EAAGsC,UAAU,IAAmC,IAAnBtC,EAAGa,SAAS,EACrE,CAEDhH,sBAAsBsD,GACrB,OAAsB,IAAP,EAAPA,EACR,CAEDtD,qBAAqBsD,GACpB,OAAsB,IAAP,EAAPA,EACR,CAEDtD,iBAAiBsD,GAChB,OAAsB,IAAP,EAAPA,EACR,CAEDtD,SAAiBsH,EAAWF,GAE3B,OADaA,EAAa,EAAI,IACfE,EAAY,EAAI,EAC/B,CAEDtH,SAAeI,EAAMsI,GACpB,MACMC,EADKlF,KACUgD,SAASrG,GACxBwI,EAASF,EAAOG,SAASC,YAG/B,OAFAF,EAAOG,MAAMJ,GACbC,EAAOI,QACA,IAAIC,SAASP,EAAOQ,SAC3B,CAQDlJ,+BAA+BI,EAAM+I,EAAW,QAC/C,IAAKxD,QAAQC,YAAa,OAAOxF,EACjC,MAAM2F,QAAYJ,QAAQyD,SAAShJ,EAAM+I,GAAUhB,cACnD,OAAOxC,QAAQc,SAASV,EACxB,CAQD/F,iCAAiCI,EAAM+I,EAAW,QACjD,IAAKxD,QAAQC,YAAa,OAAOxF,EACjC,MAAM2F,QAAYJ,QAAQuC,WAAW9H,EAAM+I,GAAUhB,cACrD,OAAOxC,QAAQc,SAASV,EACxB,CAQD/F,gBAAgBI,EAAM+I,EAAW,QAChC,MAAMT,EAAS,IAAI7C,kBAAkBsD,GACrC,OAAO1F,MAAKiF,EAAQtI,EAAMsI,EAC1B,CAQD1I,kBAAkBI,EAAM+I,EAAW,QAClC,MAAMT,EAAS,IAAI5C,oBAAoBqD,GACvC,OAAO1F,MAAKiF,EAAQtI,EAAMsI,EAC1B,CAED1I,gBAAgBI,GACf,OAAIA,aAAgBE,WAAmBF,EACnCA,aAAgBG,YAAoB,IAAID,WAAWF,GACnC,iBAATA,EAA0BL,OAAOU,SAASL,GAC9CqD,KAAKgD,SAAS6B,KAAKe,UAAUjJ,GACpC,CAMDJ,oBAAoBI,GAGnB,OADAA,EADWqD,KACDgD,SAASrG,GADRqD,KAED6F,OAAOlJ,EACjB,CAWDJ,cAAcI,GACb,OAAsB,KAAfA,EAAKmJ,GAAG,IAA4B,MAAfnJ,EAAKmJ,GAAG,IAA6B,IAAfnJ,EAAKmJ,GAAG,EAC1D,CAUDvJ,cAAcI,GACb,OAAsB,MAAfA,EAAKmJ,GAAG,IAAc,CAAC,EAAG,GAAI,IAAK,KAAKC,QAAQpJ,EAAKmJ,GAAG,KAAO,CACtE,CAEDvJ,cAAcI,GACb,MAAMU,EAAK2C,KAELgG,GADNrJ,EAAuB,iBAATA,EAAoBA,EAAKsJ,OAAS5I,EAAG2F,SAASrG,IACzCmJ,GAAG,GAChBI,EAAOvJ,EAAKmJ,GAAGnJ,EAAKwB,OAAS,GACnC,OAAOd,GAAG8I,EAAaH,EAAOE,IAAS7I,GAAG+I,EAAWJ,EAAOE,EAC5D,CAED3J,SAAkByJ,EAAOE,GACxB,QAAkB,MAAVF,GAA2B,MAAVA,GAA4B,MAATE,GAAyB,MAATA,EAC5D,CAED3J,SAAoByJ,EAAOE,GAC1B,QAAkB,MAAVF,GAA2B,KAAVA,GAA2B,MAATE,GAAyB,KAATA,EAC3D,ECpPa,MAAMG,SAEjB9J,SAAoB,CAAE+J,KAAM,OAAQC,WAAY,SAChDhK,SAAqB,CAAE+J,KAAM,QAASC,WAAY,SAClDhK,SAAiB,CAAE+J,KAAM,QAASE,KAAM,WACxCjK,SAAmB,CAAE+J,KAAM,UAAWnI,OAAQ,KAE9CsI,GAAa,KACbC,GAAW,KACXC,GAAU,KAQVpK,iBAAiBqK,GACb,MAAMC,EAAQ,IAAIhK,WAAW+J,GAE7B,OADAE,OAAOC,gBAAgBF,GAChBA,CACV,CAKDtK,qBAEI,OAAOuK,OAAOE,OAAOC,YAAYZ,UAASa,GAAY,EAD1C,CAAC,YAAa,cAE7B,CAUD3K,uBAAuB4K,EAAKtH,EAAMuH,GAC9B,MAAMC,EAAM/K,OAAO8C,SAAS+H,GAAK,GAC3BG,EAAMF,EAAOA,EAAKG,MAAM,KAAO,GACrC,OAAOT,OAAOE,OAAOQ,UAAU,OAAQH,EAAKxH,GAAM,EAAMyH,EAC3D,CAOD/K,uBAAuB4K,GACnB,MAAMM,QAAWX,OAAOE,OAAOU,UAAU,MAAOP,GAChD,OAAO7K,OAAOqL,MAAMF,EACvB,CASDlL,oBAAoB4K,EAAK7C,EAAWjB,GAChCiB,EAAYhI,OAAO8C,SAASkF,GAAW,GACvCjB,EAAY/G,OAAO8C,SAASiE,GAC5B,MAAMxD,EAAOwG,UAASuB,EACtB,OAAOd,OAAOE,OAAOa,OAAOhI,EAAMsH,EAAK7C,EAAWjB,EACrD,CAOD9G,kBAAkB4K,EAAKxK,GAEnB,OADAA,EAAOL,OAAO8C,SAASzC,GAChBmK,OAAOE,OAAOc,KAAK,QAASX,EAAKxK,EAC3C,CAEG8J,gBAAc,OAAOzG,MAAKyG,CAAa,CAE3CsB,OAAOC,EAAO,KACV,MAAO,iBAAiBhI,MAAKyG,GAAc,WAAWuB,GACzD,CAEDC,aAAaD,EAAO,KAChBE,SAASH,OAAS/H,KAAK+H,OAAOC,EACjC,CAODG,GAAcC,GAEV,MAAO,CAACA,EAAI/E,WAAa,GADdrD,MACqBqI,EAAaD,EAAIhE,SAAW,GADjDpE,MACwDqI,EAAaD,EAAI/D,SAAW,IAAIvF,KAAK,GAC3G,CAEDuJ,GAAa3K,GACT,OAAOpB,OAAOqB,OAAOD,GAAOA,EAAMpB,OAAOgM,SAAS5K,EACrD,CAED6K,QAAkBH,GACd,MACMvI,EAAOwG,UAASmC,EAChBC,QAAepC,SAASmB,UAAUY,EAAI/D,OAAQxE,EAAM,UAE1D,UADqBwG,SAASwB,OAAOY,EAAQL,EAAI9D,UAHtCtE,MAGoDmI,EAAcC,IAChE,MAAM,IAAIxD,MAAM,oBAChC,CAMD8D,GAAYN,GACR,OAAO/B,SAASmB,UAAUY,EAAIhE,OAAQiC,UAASa,EAAY,GAC9D,CAMDyB,GAAWC,EAAMC,GACb,MAAMC,EAAS,CAAExC,KAAM,OAAQyC,OAAQF,GAEjCG,EAAa3C,UAAS4C,EAE5B,OAAOnC,OAAOE,OAAOkC,UAAUJ,EAAQF,EAAMI,GADjC,EAFA,CAAC,UAAW,WAI3B,CAEDG,GAAQC,GACJA,EAAK9M,OAAO8C,SAASgK,GACrB,MAAMvJ,EAAOmC,OAAOqH,OAAO,CAAEC,QAASF,GAAM/C,UAAS4C,GAErD,OADApJ,EAAK1B,OAAS,IACP0B,CACV,CAQD0I,iBAAiBpB,EAAKiC,EAAIzM,GACtB,MAAM4M,EAAUjN,OAAO8C,SAASzC,GAC1BkD,EAAOG,MAAKmJ,EAAQC,GAC1B,OAAOtC,OAAOE,OAAO9D,QAAQrD,EAAMsH,EAAKoC,EAC3C,CAQDhB,iBAAiBpB,EAAKiC,EAAIzM,GACtB,MAAM4M,EAAUjN,OAAO8C,SAASzC,GAC1BkD,EAAOG,MAAKmJ,EAAQC,GAC1B,OAAOtC,OAAOE,OAAOxC,QAAQ3E,EAAMsH,EAAKoC,EAC3C,CAEDhB,sBAAsBpB,EAAKiC,EAAIzM,GAC3B,MAAM6M,QAAexJ,KAAKyJ,WAAWtC,EAAKiC,EAAIzM,GAC9C,OAAOL,OAAO8C,SAASoK,EAC1B,CAEDjB,sBAAsBpB,EAAKiC,EAAIzM,GAC3B,MAAM6M,QAAexJ,KAAK0J,WAAWvC,EAAKiC,EAAIzM,GAC9C,OAAOL,OAAO8C,SAASoK,EAC1B,CAEDjB,sBAAsBpB,EAAKiC,EAAIzM,GAC3B,MAAM6M,QAAexJ,KAAKyJ,WAAWtC,EAAKiC,EAAIzM,GAC9C,OAAOL,OAAOyI,OAAOyE,EACxB,CAEDjB,mBAAmBpB,EAAKiC,EAAIzM,GACxB,MAAM6M,QAAexJ,KAAK0J,WAAWvC,EAAKiC,EAAIzM,GAC9C,OAAOL,OAAOqL,MAAM6B,EACvB,CAEGpG,cAEA,OAAyB,OADdpD,MACDyG,GAAsC,OADrCzG,MACyB2G,CACvC,CAEUxE,yBACP,QAAO2E,OAAOE,MACjB,CAMDuB,WAAWH,GAEP,IAAK/B,SAASlE,YAEV,OAIJ,MAAM9E,EAAK2C,WAEL3C,GAAGsM,EAAYvB,GAErB,MAAM3B,QAAkBpJ,GAAGqL,EAAYN,GACvC/K,GAAGsJ,QAAgBtJ,GAAGsL,EAAWtL,GAAGqJ,EAASkD,WAAYnD,GACzDpJ,GAAGqJ,EAAW,IAIjB,CAOD6B,cAAc5L,GACV,MAAMU,EAAK2C,KACX,IAAK3C,EAAG+F,QAAS,OAAOzG,EACxB,IAAKA,aAAgBE,WAAY,OAAOF,EACxC,MAAMyM,EAAK/C,SAASwD,UAAU,IACxBC,QAAUzM,EAAG0M,gBAAgB1M,GAAGsJ,EAASyC,EAAIzM,GAE7C2F,EAAM,IAAIzF,WAAWuM,EAAGjL,OAAS2L,EAAE3L,QAGzC,OAFAmE,EAAIQ,IAAIsG,EAAI,GACZ9G,EAAIQ,IAAIgH,EAAGV,EAAGjL,QACPmE,CACV,CASDiG,cAAc5L,EAAMyM,GAShB,OALKA,IACDA,EAAKzM,EAAKkC,MAAM,EAAG,IACnBlC,EAAOA,EAAKkC,MAAM,WAJXmB,KAOKgK,gBAPLhK,MAOwB2G,EAASyC,EAAIzM,EACnD,CAED4L,UACI,MAAMlL,EAAK2C,KACX3C,GAAGqJ,QAAiBL,SAAS4D,cAC7B5M,GAAGoJ,QAAmBJ,SAASqB,UAAUrK,GAAGqJ,EAASD,UACxD,CAEDlK,oBAAoB6L,GAChB,MAAMrF,EAAW,IAAIsD,SAGrB,aAFMtD,GAASmH,IACX9B,SAAWrF,EAASwB,KAAK6D,GACtBrF,CACV,EC5QU,MAAMoH,cAAcC,IAElCC,GAAM,EACNC,GAAQ,EACRC,GAAO,EAOPC,cAAcC,GACb,MAAMpN,EAAK2C,KACX3C,GAAGkN,IACHlN,GAAGgN,IACHI,EAAIF,IAAMlN,GAAGkN,EAAK3L,WAClBvB,EAAGyF,IAAI2H,EAAIF,IAAKE,EAChB,CAKDC,QACC,MAAMrN,EAAK2C,KACP3C,GAAGgN,EAAM,IAAMhN,GAAGiN,GAASjN,GAAGgN,IACjChN,GAAGgN,EAAM,EACThN,GAAGiN,EAAQ,EACXjN,EAAGuD,QAEJ,CAOD+J,QAAQC,GAEP,MAAMvN,EAAK2C,KACL6K,EAAU,GAEhB,GAAIjO,MAAMkO,QAAQF,GACjBA,EAAInK,SAASN,IACZ,MAAM4K,EAAM1N,EAAG2N,QAAQ7K,GACnB4K,GAAKE,OAAO7M,KAAK2M,EAAI,QAEpB,CACN,MAAM5K,EAAI9C,EAAG2N,QAAQJ,GACjBzK,GAAG0K,EAAQzM,KAAK+B,EACpB,CAED,OAAO0K,CACP,CAQDG,QAAQJ,GAEP,MAAMvN,EAAK2C,KACLuK,EAAMK,EAAIL,IAChB,IAAIM,EAAU,KAId,GAFAxN,GAAGiN,IAECjN,EAAG6N,IAAIX,GAAM,CAChB,MAAME,EAAMpN,EAAG8N,IAAIZ,GACnB,IACCE,EAAIW,OAAOR,EAMX,CALC,MAAO5J,GAERyJ,EAAIW,OAAOpK,EACf,CAAa,QACT3D,EAAGqD,OAAO6J,EACV,CACJ,MACGM,EAAUD,EAKX,OAFAvN,EAAGqN,QAEIG,CACP,ECrFa,MAAMQ,QAEjBC,GAAM,EACNC,GAAW,EACXC,GAEAC,YAAYF,EAASC,GACjB,MAAMnO,EAAK2C,KACX3C,GAAGmO,EAAYA,EACfnO,GAAGkO,EAAWA,EACdlO,GAAGkH,GACN,CAED4G,IAAIO,EAAQC,GACR,MAAMtO,EAAK2C,KACX,MAAiB,YAAb2L,EAA+BtO,EAAGkO,QACrB,WAAbI,EAA8BtO,EAAGmO,SAASI,KAAKvO,GAC5CqO,EAAOC,EACjB,CAEDH,SAASrL,GACL,MAAM9C,EAAK2C,KACX,IAAI3C,EAAGkO,QAEP,OADAlO,GAAGuD,IACIvD,GAAGmO,EAAUrL,EACvB,CAEGoL,cACA,OAAyB,IAAlBvL,MAAKuL,CACf,CAED3K,KAEmB,IADJZ,MACJsL,GACPO,aAFW7L,MAEKsL,EACnB,CAED/G,KACI,MAAMlH,EAAK2C,KACS,IAAhB3C,GAAGkO,IACPlO,GAAGiO,EAAMQ,YAAW,KAChBzO,GAAGkO,GAAW,EACdlO,GAAGmO,EAAU,IAAI5G,MAAM,mBAAmB,GAC3CvH,GAAGkO,GACT,CAEDhP,YAAYI,EAAM4O,EAASC,GACvB,OAAO,IAAIO,MAAMpP,EAAM,IAAI0O,QAAQE,EAASC,GAC/C,EC3CU,MAAMQ,kBAAkBxM,WAEtCyM,GAAS,CAAA,EACTX,GAAM,KACNY,GAAO,EACPX,GAAW,EAEXE,YAAYH,EAAK,EAAGC,EAAU,GAC7BhL,QACAP,MAAKsL,EAAMA,EACXtL,MAAKuL,EAAWA,CAChB,CAKGxH,UACH,OAAO/D,MAAKiM,CACZ,CAKDE,OAEC,MAAM9O,EAAK2C,KACX3C,EAAG4D,IAAI,QACP5D,EAAG4D,IAAI,OACP5D,EAAG4D,IAAI,OACP5D,EAAG4D,IAAI,SACP5D,GAAG+O,GACH,CAEDC,GAASzB,EAAKU,GACb,IAAK,IAAIgB,KAAK1B,EAAK,CAClB,IAAI2B,EAAK3B,EAAI0B,GACK,iBAAPC,EACNvM,MAAKqM,EAASE,EAAIjB,KAAKV,EAAI0B,GAAK,MAC1BC,EAAGC,OAASlB,IACtBV,EAAI0B,GAAK,KAEV,CACD,OAA4D,IAArDtK,OAAOyK,OAAO7B,GAAK1K,QAAOC,GAAU,MAALA,IAAWhC,MACjD,CAEDiO,KACC,MAAM/O,EAAK2C,KACX3C,GAAGgP,EAAShP,GAAG4O,EAAQ5O,GAAGiO,GAC1BjO,GAAG4O,EAAS,EACZ,CASDS,MAAMvM,GAEL,MACMxD,EAAOwD,EAAIA,EAAE4D,KAAO5D,EAAI,KAI9B,OAFIxD,GAHOqD,MAGE2M,EAAUhQ,GAEhBA,CACP,CASDgQ,GAAUvE,GAET,MAAM/K,EAAK2C,KAEPpD,MAAMkO,QAAQ1C,GACjBA,EAAI3H,SAAQmM,GAAKvP,GAAGwP,EAAeD,KAEnCvP,GAAGwP,EAAezE,EAGnB,CAQDyE,GAAe9I,GAEd,MAAM1G,EAAK2C,KACX,IAAI8M,EAAO,KACPC,EAAS,KAEbD,EAAOzP,GAAG2P,EAAgBjJ,EAAIkJ,WAEzBH,EAAK/I,EAAIgJ,UACbD,EAAK/I,EAAIgJ,QAAU,IAEpBA,EAASD,EAAK/I,EAAIgJ,QAElB1P,GAAGiC,EAAQyE,EAAImJ,UAAUzM,SAAQmM,GAAKvP,GAAG8P,EAAaJ,EAAQH,EAAGvP,GAAGiO,IAEpE,CAODhM,GAAQM,GACP,OAAOA,EAAKN,QAAO,CAAC8N,EAAGR,EAAG1O,EAAGmP,KAE5B,GAA8C,GAA1CD,EAAElN,QAAO0B,GAAKA,EAAE0E,MAAQsG,EAAEtG,OAAMnI,OAAa,OAAOiP,EAExD,MAAME,EAAOD,EAAGnN,QAAO0B,GAAKA,EAAE0E,MAAQsG,EAAEtG,OACxC,GAAoB,IAAhBgH,EAAKnP,OAER,OADAiP,EAAEhP,KAAKwO,GACAQ,EAGR,MAAMxC,EAAM0C,EAAKpN,QAAO0B,GAAKA,EAAE0E,OAASsG,EAAEtG,OAAMhH,QAAO,CAAC8N,EAAGR,KAC1DQ,EAAEG,IAAInP,KAAKwO,EAAEW,KACbH,EAAE5J,IAAIpF,KAAKwO,EAAEpJ,KACb4J,EAAE7E,MAAMqE,EAAEpJ,KAAOoJ,EAAErE,MACZ6E,IACL,CAAE9G,KAAMsG,EAAEtG,KAAMiH,IAAK,GAAI/J,IAAK,GAAI+E,MAAO,CAAA,IAG5C,OADA6E,EAAEhP,KAAKwM,GACAwC,IACL,GACH,CAWDJ,GAAgBC,GAIf,IAAIO,EAAMC,WACNC,EAHO1N,MAGGiM,EAad,OAXAgB,EAAU1F,MAAM,KAAKoG,OAAMf,IAErBY,EAAIZ,KAAIY,EAAIZ,GAAK,IACtBY,EAAMA,EAAIZ,GAELc,EAAKd,KAAIc,EAAKd,GAAKY,GACxBE,EAAOF,GAEA,KAGDA,CACP,CASDL,GAAaS,EAAU7J,EAAKuH,GAE3B,MAAMuC,GAAsB,IAAhB9J,EAAIb,QACVkF,EAAM,CACX0F,EAAG/J,EAAIP,IACP4J,EAAGrJ,EAAIwE,QAAS,EAChB5J,EAAGoF,EAAIwJ,IACPvM,EAAG6M,EACH3P,EAAGoN,GAGJsC,EAAS7J,EAAIuC,MAAQtG,MAAK+N,EAAO3F,GACjCwF,EAAS7J,EAAIuC,MAAMkG,KAAOlB,CAE1B,CAODyC,GAAOC,GAEN,MAAM3Q,EAAK2C,KACLiO,EAAOD,EAuCb,OArCW,WAEV,MAAME,EAAOtR,MAAM4B,UAAUK,MAAMH,KAAKyP,WAGlCC,EAAaxR,MAAMkO,QAAQmD,EAAKH,GAEhCtK,EAAM4K,EAAaH,EAAKH,EAAE5N,QAAO0M,GAAKA,IAAMsB,EAAK/P,SAAQkQ,MAAQJ,EAAKH,EAC5E,GAAII,EAAK/P,QAAUqF,EAAK,MAAM,IAAIoB,MAAM,uCAAuCqJ,EAAKH,MAEpF,MAAMQ,EAAS1R,MAAMkO,QAAQmD,EAAKtP,GAAKsP,EAAKtP,EAAE6E,EAAI,GAAKyK,EAAKtP,EACtD4P,EAAUH,EAAaH,EAAKb,EAAEc,EAAK/P,QAAU8P,EAAKb,EAClD7B,EAAUgD,EAAU,EAAIlR,GAAGkO,EAE3Bd,EAAM,CACX6D,OAAUA,EACVhD,GAAM2C,EAAK/P,EACX2P,IAAOI,EAAKjN,EACZrE,KAAQuR,EACR/G,MAAS9J,GAAG6O,EACZ3B,IAAO,EACPiE,GAAMC,KAAKC,OAIZ,OAFA1M,OAAO2M,KAAKlE,GAEL,IAAI9I,SAAQ,CAACiN,EAASC,KAC5B,IACC,MAAMC,EAAQzD,QAAQtK,KAAK0J,EAAKc,GAAUX,IACzCvN,GAAG0R,EAAYnE,EAAKgE,EAASC,EAAO,IAErCxR,EAAG6D,KAAK,OAAQ4N,EAIhB,CAHC,MAAO9N,GAER6N,EAAO7N,EACP,IAEF,CAED,CAKD+N,GAAYnE,EAAKgE,EAASC,GAEzB,GAAIjE,aAAehG,MAAO,OAAOiK,EAAOjE,GAExC,MAAMpB,EAASoB,EAAIpB,QAAUoB,EAEzBpB,EAAOwF,QACVJ,EAAQpF,GAERqF,EAAOrF,EAGR,CAQDjN,aAAa6L,EAAKkD,EAAIC,GACrB,MAAM0D,EAAY,IAAIjD,UAAUV,EAAIC,GAEpC,OADA0D,EAAUvC,MAAMtE,GACT6G,CACP,EC3Qa,MAAMC,sBAAsB1P,WAE1C6D,GAAaoL,KAAKC,MAClBS,GAAS,IAAIhF,MACbiF,GAAa,KACbC,GAAU,KACVC,GAAO,EAKP/G,WAAW8G,GAEV,MAAMhS,EAAK2C,KAIX,OAHA3C,EAAG8O,OACH9O,GAAGgS,EAAUA,EAEN,IAAI1N,SAAQ,CAACiN,EAASC,KAC5BxR,GAAGkS,EAAaX,EAASC,GAClB,OAGR,CAEGW,aACH,MAAMnS,EAAK2C,KACX,OAAqB,MAAjB3C,GAAG+R,GACA/R,GAAG+R,EAAWK,aAAepS,GAAG+R,EAAWM,IAClD,CAKDvD,OACC,MAAM9O,EAAK2C,KACX,OAAqB,MAAjB3C,GAAG+R,IACP/R,GAAG+R,EAAW7J,QACdlI,GAAG+R,EAAa,KAChB/R,GAAGgS,EAAU,MACN,EACP,CAQDtO,GAAM4O,EAAKlF,GACV,MAAM9N,EAAO,CACZkD,KAAM,KACN8P,IAAKA,EACLhT,KAAM8N,EAAM,CAACA,GAAO,MAErB,OAAO5F,KAAKe,UAAUjJ,EACtB,CAEGiT,QACH,OAAO5P,MAAKe,EAAM,OAClB,CAQDwH,QAAckC,GAIb,MAAMpN,EAAK2C,KAEX,IAJAyK,EAAMA,EAAIpJ,QAIFiK,KAAOjO,GAAGgS,EAAQ/D,GAAI,OAE9BjO,GAAG8R,EAAO3E,cAAcC,GAExB,MAAMoF,EAAMxS,GAAG0D,EAAM,OAAQ0J,GACvBnI,QAAYJ,QAAQnB,KAAK8O,EAAKxS,GAAGgS,EAAQhJ,UAC/ChJ,GAAG+R,EAAW7N,KAAKe,EACnB,CAEDiG,QAAmBqG,EAASC,GAE3B,MAAMxR,EAAK2C,KACLqP,EAAShS,GAAGgS,EACZJ,EAAYI,EAAOrD,UAEnB8D,EAAM,IAAIC,IAAIV,EAAOW,YAGrBC,EAASjO,OAAOqH,OAAO,CAAE,EAAEgG,EAAOY,QAAU,CAAA,GAClDA,EAAOC,EAAI7S,GAAGgG,EACd4M,EAAOE,EAAIjO,QAAQC,YAEnBH,OAAOoO,QAAQH,GAAU,CAAE,GAAExP,SAASmM,IACjCA,EAAE,IAAIkD,EAAIO,aAAaC,OAAO1D,EAAE,GAAI2D,mBAAmB3D,EAAE,IAAI,IAGlEyC,EAAOhJ,SAAS4B,eAEhB5K,GAAG+R,EAAa,IAAIoB,UAAUV,EAAIlR,WAAY,CAAC,UAC/CvB,GAAG+R,EAAWqB,WAAa,cAE3B,MAAMC,EAASrT,GAAGqT,EAAQ9E,KAAKvO,GAE/BA,GAAG+R,EAAWuB,OAAUC,IAMvB,GAJAvT,EAAG6D,KAAK,SAAU0P,GAClB3B,EAAUpO,GAAG,OAAQ6P,GACrBrT,GAAGwT,KAEExB,EAAOyB,QACX,OAAOlC,GAAQ,GAGhBK,EAAUnO,KAAK,OAAOyH,MAAOvH,IAE5B,IACC,MAAMrE,EAAOqE,EAAEK,OACf1E,EAAK0G,UAAYhG,GAAGgG,QACdgM,EAAO0B,YAAYpU,GACzBiS,GAAQ,EAGR,CAFC,MAAO5N,GACR6N,EAAO7N,EACP,IAEA,EAIH3D,GAAG+R,EAAW4B,QAAWJ,IACxB3B,EAAUhO,IAAI,OAAQyP,GACtBO,cAAc5T,GAAGiS,GACjBjS,EAAG8O,OACH9O,EAAG6D,KAAK,UAAW0P,EAAM,EAG1BvT,GAAG+R,EAAW8B,QAAWN,IACxB3B,EAAUhO,IAAI,OAAQyP,GACtB7B,EAAO+B,GACPvT,EAAG8O,OACH9O,EAAG6D,KAAK,QAAS0P,EAAM,EAGxBvT,GAAG+R,EAAW+B,UAAY5I,MAAOqI,IAChC,IACKA,EAAMjU,gBAAgBG,kBACnBO,GAAG+T,GAAsBR,EAAMjU,YAE/BU,GAAGgU,GAAoBT,EAAMjU,KAKpC,CAHC,MAAOqE,GACRA,EAAErE,KAAOiU,EACT3B,EAAU/N,KAAK,QAASF,EACxB,EAGF,CAED6P,KACC,MAAMxT,EAAK2C,KACX3C,GAAGiS,EAAOgC,aAAY,KACrBjU,EAAGkE,KAAKlE,GAAGuS,EAAM,GACf,KACH,CAEDrH,SAA4BgJ,GAE3B,MAAMlU,EAAK2C,KAEL+C,EADS1F,GAAGgS,EACMhJ,SAExBkL,QAAgBrP,QAAQsP,OAAOD,EAASxO,EAAU1F,GAAGgG,GAGrD,IADenB,QAAQyC,OAAO4M,GACjB,OAAOtC,UAAU/N,KAAK,MAAOqQ,GAEtC3U,MAAMkO,QAAQyG,GACjBA,EAAQ9Q,SAAQgR,GAAKpU,GAAGqU,GAAWD,KAEnCpU,GAAGqU,GAAWH,EAEf,CAQDhJ,SAA0BgJ,GAEzB,MAAMlU,EAAK2C,KAELiP,EADS5R,GAAGgS,EACOrD,UAEzB,IAGC,IAFe9J,QAAQyC,OAAO4M,GAEjB,OAAOtC,EAAU/N,KAAK,MAAOqQ,GAE1CA,EAAU1M,KAAKC,MAAMyM,GACjB3U,MAAMkO,QAAQyG,GACjBA,EAAQ9Q,SAAQgR,GAAKpU,GAAGqU,GAAWD,KAEnCpU,GAAGqU,GAAWH,EAKf,CAFC,MAAOvQ,GACRiO,EAAU/N,KAAK,QAASF,EACxB,CAED,CAQDuH,SAAiBqC,GAEhB,MAAMvN,EAAK2C,KACX,IAAIrD,EAAO,KAEX,MACMsS,EADS5R,GAAGgS,EACOrD,UAEzB,GAAgB,QAAZpB,EAAI+E,IACP,OAAOV,EAAU/N,KAAK,MAAO0J,EAAIjO,MAGlC,GAAgB,QAAZiO,EAAI+E,IACP,OAAOV,EAAU/N,KAAK,QAAS0J,EAAIpB,QAOpC,GAJgB,SAAZoB,EAAI+E,MACPhT,EAAOiO,EAAIjO,MAGRA,EAAM,CACOU,GAAG8R,EAAOxE,QAAQhO,GAC1B8D,SAASmK,GAAQvN,EAAG6D,KAAK,UAAW0J,IAC/C,MACGvN,EAAG6D,KAAK,UAAWvE,EAGpB,EC3Pa,MAAMgV,WAEpBpV,UAAsB,2BACtBA,UAAoB,mBAEpB8S,GAAU,KAKV9G,WAAW8G,GAEV,MAAMhS,EAAK2C,KAEP3C,GAAGgS,GAAShS,EAAG8O,OAEnB9O,GAAGgS,EAAUA,EACb,MAAMJ,EAAYI,EAAOrD,UAEnBrP,QAAaU,GAAGuU,GAAQvC,EAAOwC,cAC/BxC,EAAO0B,YAAYpU,GAErB0S,EAAOyC,iBAEX7C,EAAUpO,GAAG,OAAQxD,GAAG0U,GAAWnG,KAAKvO,GAExC,CAKD8O,OAEC,MACMkD,EADKrP,MACOqP,EAIlB,GALWrP,MAERqP,EAAU,KAEbA,EAAOrD,UAAU/K,IAAI,SACjBoO,EAAOyC,gBACX,IACCE,MAAM3C,EAAOW,WAAY,CACxBiC,OAAQ,UAIT,CAFC,MAAOjR,GAER,CACD,CAMDuH,SAAiBkC,GAGhB,MAAMpN,EAAK2C,KACX,IAAIG,EAAI,KAER,IAJAsK,EAAMA,EAAIpJ,QAIFiK,KAAOjO,GAAGgS,EAAQ/D,GAE1B,IACCnL,QAAU9C,GAAGqT,EAAQrT,GAAGgS,EAAS5E,GACjCA,EAAIW,OAAOjL,EAGX,CAFC,MAAO+R,GACRzH,EAAIW,OAAO8G,EACX,CAED,CAQD3J,SAAcuH,GAEb,MAAMzS,EAAK2C,KACLqP,EAAShS,GAAGgS,EACZtM,EAAWsM,EAAOhJ,SAClBiF,EAAKmD,KAAKC,MAEVyD,EAAUnQ,OAAOqH,OAAO,GAAIgG,EAAO8C,SAAW,GAAI,CAAE,eAAgB7G,IAEtEvI,EAAS0D,YACZ0L,EAAQ,iBAAmBpP,EAAS0D,WAGrC,MAAMsE,QAAY1N,GAAG+U,GAAWtC,EAAK,KAAMqC,GAAS,EAAO,OACrDxV,QAAaU,GAAG0R,EAAYhE,EAAKO,GAKvC,OAFA3O,EAAK0G,UAAYiI,EAAG1M,WAEbjC,CAEP,CAEG0V,SACH,MAAO,GAAGV,YAAWW,OAAiBX,YAAWY,IACjD,CAEDC,IAAM7V,GAEL,MADiC,iBAATA,EACNgV,YAAWW,GAAeX,YAAWY,EACvD,CAKDhK,SAAiBuH,EAAKnT,EAAM8V,EAAM9O,EAAYsO,EAAS,QAEtD,MAAM5U,EAAK2C,KACLqP,EAAShS,GAAGgS,EACZqD,EAAerV,GAAGmV,GAAM7V,GAExBgW,EAAW,CAChBC,OAAUvV,GAAGgV,GACb,eAAgBK,EAChB,kBAAmB,mBAGhB/O,GAAczB,QAAQC,cACzBxF,EAAOuF,QAAQc,SAASrG,GACxBA,QAAauF,QAAQe,kBAAkBtG,GACvCgW,EAAS,oBAAsB,QAGhC,MAAME,EAAU,IAAI9C,IAAID,GAClBqC,EAAUnQ,OAAOqH,OAAO,GAAIgG,EAAO8C,SAAW,GAAIQ,EAAUF,GAAQ,CAAE,GACtExC,EAASjO,OAAOqH,OAAO,CAAE,EAAEgG,EAAOY,QAAU,CAAA,GAE5CxF,EAAM,CACXwH,OAAQA,EACRE,QAASA,GASV,OANIxV,IAAM8N,EAAIqI,KAAOnW,GAErBqF,OAAOoO,QAAQH,GAAU,CAAE,GAAExP,SAASmM,IACrCiG,EAAQxC,aAAaC,OAAO1D,EAAE,GAAI2D,mBAAmB3D,EAAE,IAAI,UAG/CoF,MAAMa,EAAQjU,WAAY6L,EAEvC,CAEDlC,QAAkBwC,EAAKO,GAEtB,IAAIV,QAAY+G,WAAWoB,aAAahI,GAKxC,OAJIH,aAAe/N,aAClB+N,QAAY1I,QAAQsP,OAAO5G,EAAK5K,MAAKqP,EAAQhJ,SAAUiF,IAGpDV,GAAmB,MAAZA,EAAI/K,MAA4B,SAAZ+K,EAAI+E,IAC3B/E,EAAIjO,KAELiO,CACP,CAWDrC,QAAc8G,EAAQ5E,GAErB,MAAMpN,EAAK2C,KACL+C,EAAWsM,EAAOhJ,SAClByJ,EAAMT,EAAOW,WAEbnM,EAAYd,GAAUK,QAC5B,IAAIO,GAAa,EACbrB,EAAM,KAENmI,IACC5G,EACHvB,QAAYJ,QAAQnB,KAAK0J,EAAKpN,GAAGgS,EAAQhJ,WAEzC/D,EAAMuC,KAAKe,UAAUtD,GACrBqB,GAAa,IAIf,MAAM8O,EAAO,CAAA,EAET5O,IACH4O,EAAK,iBAAmB1P,EAAS0D,WAIlC,MAAMsE,QAAY1N,GAAG+U,GAAWtC,EAAKxN,EAAKmQ,EAAM9O,GAC1ChH,QAAaU,GAAG0R,EAAYhE,GAGlC,GAAgB,OAAZpO,EAAKgT,IACR,MAAM,IAAI/K,MAAMjI,EAAK6M,OAAOqG,KAI7B,OAAOlT,CAEP,CAEDJ,0BAA0BwO,GAEzB,IAAKA,EAAIiI,GACR,MAAM,IAAIpO,MAAM,GAAGmG,EAAIkI,YAAYlI,EAAImI,cAGxC,MAAMV,EAAOzH,EAAIoH,QAAQhH,IAAI,iBAAmB,GAC1CgI,EAAQX,EAAKY,SAASzB,YAAWW,IACjC3N,EAAS6N,EAAKY,SAASzB,YAAWY,IAClCc,GAAWF,IAAUxO,EAE3B,GAAIA,EAAQ,aAAaoG,EAAIuI,OAC7B,GAAID,EAAS,aAAatI,EAAIwI,OAE9B,MAAMjR,QAAYyI,EAAIrG,cACtB,OAAO,IAAI7H,WAAWyF,EACtB,ECtNa,MAAMkR,YAEpBpL,IAAO,KACP0I,KAAW,EACX2C,KAAgB,EAChB3B,KAAmB,EAEnBzL,IAAY,KACZ2F,IAAa,KACb2F,IAAc,KACdzC,IAAiB,KAEjBiD,IAAW,KACXlC,IAAU,KAEV3E,GAAM,KAENG,YAAYrD,GAIX,KAFAA,EAAMA,GAAO,IAEJrE,IACR,MAAM,IAAIa,MA5Be,wBA+B1B,IAAKwD,EAAIyK,QACR,MAAM,IAAIjO,MA/Be,4BAkC1B,MAAMvH,EAAK2C,KAuBX,GArBA3C,GAAG+K,GAAO,KACV/K,GAAGyT,IAAW,EACdzT,GAAGoW,IAAgB,EACnBpW,GAAGyU,IAAmB,EAEtBzU,GAAGgJ,GAAY,KACfhJ,GAAG2O,GAAa,KAChB3O,GAAGsU,GAAc,KACjBtU,GAAG6R,GAAiB,KACpB7R,GAAGiO,EAAMmD,KAAKC,MAEdrR,GAAG+K,GAAOA,EACV/K,GAAGyT,GAAW1I,EAAIrE,MAAQqE,EAAIyK,SAAoC,GAAzBzK,EAAIrE,IAAIgC,QAAQ,MAEzD1I,GAAG8U,GAAW/J,EAAI+J,SAAW,CAAA,EAC7B9U,GAAG4S,GAAU7H,EAAI6H,QAAU,CAAA,EAE3B5S,GAAGgJ,GAAY+B,EAAIrF,oBAAoBsD,SAAW+B,EAAIrF,SAAW,KACjE1F,GAAGoW,GAAgD,IAAhCrL,EAAIyK,QAAQ9M,QAAQ,QACvC1I,GAAGyU,GAAiD,IAA9B1J,EAAIyK,QAAQ9M,QAAQ,OAEM,KAA3C1I,EAAGoW,cAAgBpW,EAAGyU,iBAC1B,MAAM,IAAIlN,MA5DS,+CA+DpB,CAKD2D,aAEC,MAAMlL,EAAK2C,KACX,IAAI3C,EAAGqW,SAeP,OAbKrW,GAAGgJ,KAAWhJ,GAAGgJ,SAAkBA,SAASsN,UACjDtW,GAAG2O,GAAa,IAAIA,UAAU3O,EAAGiO,KAE7BjO,EAAGoW,cAA8B,GAAdpW,EAAGyT,WACzBzT,GAAGsU,GAAc,IAAIA,iBACftU,EAAGsU,WAAWpN,KAAKlH,IAGtBA,EAAGyU,kBACNzU,GAAG6R,GAAiB,IAAIA,oBAClB7R,EAAG6R,cAAc3K,KAAKlH,IAGtBA,CACP,CAMDkL,kBAAkB5L,GAEjB,MAAMU,EAAK2C,KAGPrD,EAAK2H,YAAcjH,EAAGgJ,UAAUjD,eAC7B/F,EAAGgJ,UAAU9B,KAAK5H,IAGzBU,EAAG2O,WAAWU,MAAM/P,EAAKoH,IACzB,CAMDoI,OAEC,MAAM9O,EAAK2C,KAEX3C,EAAGsU,YAAYxF,OACf9O,EAAG6R,eAAe/C,OAClB9O,EAAG2O,WAAWG,OAEd9O,GAAGsU,GAAc,KACjBtU,GAAG6R,GAAiB,KACpB7R,GAAG2O,GAAa,KAChB3O,GAAGgJ,GAAY,KACfhJ,GAAG+K,GAAO,IACV,CAKGrE,UACH,OAAO/D,KAAKgM,WAAWjI,KAAO,IAC9B,CAKG2P,eACH,MAAMrW,EAAK2C,KACX,QAAI3C,EAAG6R,gBAAkB7R,EAAG6R,cAAcM,YACnCnS,EAAG0G,MAAO1G,EAAGgJ,SACpB,CAKGwL,aACH,OAAO7R,KAAKoI,KAAKrE,KAAO,IACxB,CAKGiM,iBACH,OAAOhQ,KAAKoI,KAAKyK,SAAW,IAC5B,CAEGzK,UAAQ,OAAOpI,MAAKoI,EAAM,CAC1B0I,cAAY,OAAO9Q,MAAK8Q,EAAU,CAClC2C,mBAAiB,OAAOzT,MAAKyT,EAAe,CAC5C3B,sBAAoB,OAAO9R,MAAK8R,EAAkB,CAElDzL,eAAa,OAAOrG,MAAKqG,EAAY,CACrC2F,gBAAc,OAAOhM,MAAKgM,EAAa,CACvC2F,iBAAe,OAAO3R,MAAK2R,EAAc,CACzCzC,oBAAkB,OAAOlP,MAAKkP,EAAiB,CAE/CiD,cAAY,OAAOnS,MAAKmS,EAAW,CACnClC,aAAW,OAAOjQ,MAAKiQ,EAAU,CACjC3E,SAAO,OAAOtL,MAAKsL,CAAM,CAK7B/O,kBAAkB6L,GAEjB,OADe,IAAIoL,YAAYpL,GACjB7D,MACd"}