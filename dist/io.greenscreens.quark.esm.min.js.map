{"version":3,"file":"io.greenscreens.quark.esm.min.js","sources":["../modules/core/Buffer.mjs","../modules/core/EventExt.mjs","../modules/core/Streams.mjs","../modules/core/Security.mjs","../modules/core/Queue.mjs","../modules/core/Request.mjs","../modules/core/Generator.mjs","../modules/core/SocketChannel.mjs","../modules/core/WebChannel.mjs","../modules/core/QuarkEngine.mjs"],"sourcesContent":["/*\r\n * Copyright (C) 2015, 2023 Green Screens Ltd.\r\n */\r\n\r\nexport default class Buffer {\r\n\r\n    static #encoder = new TextEncoder();\r\n    static #decoder = new TextDecoder();\r\n\r\n    /**\r\n     * Detect data and convert to Uint8Array\r\n     * \r\n     * @param {variant}\r\n     * @returns {variant}\r\n     */\r\n    static validateData(src) {\r\n        let data = null;\r\n        if (src instanceof Array) {\r\n            data = new Uint8Array(src);\r\n        } else if (src instanceof ArrayBuffer) {\r\n            data = new Uint8Array(src);\r\n        } else if (src instanceof Uint8Array) {\r\n            data = src;\r\n        } else if (src instanceof String || typeof src === 'string') {\r\n            data = Buffer.fromText(src);\r\n        } else if (src.toArrayBuffer) {\r\n            data = new Uint8Array(src.toArrayBuffer());\r\n        } else {\r\n            throw \"Invalid input, must be String or ArrayBuffer or Uint8Array\";\r\n        }\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Verify if data is string\r\n     * @param {*} data \r\n     * @returns \r\n     */\r\n    static isString(data) {\r\n        return typeof data === 'string';\r\n    }\r\n\r\n    /**\r\n     * Check if string is hex string\r\n     * @param {*} data \r\n     * @returns \r\n     */\r\n    static isHexString(data) {\r\n        return Buffer.isString(data) ? (/^[0-9A-Fa-f]+$/g).test(data) : false;\r\n    }\r\n\r\n    static toBuffer(data, b64 = false) {\r\n        const me = Buffer;\r\n        if (me.isString(data)) {\r\n            if (b64) {\r\n                data = me.fromBase64(data);\r\n            } else if (me.isHexString(data)) {\r\n                data = me.fromHex(data);\r\n            } else {\r\n                data = me.fromText(data);\r\n            }\r\n        }\r\n        return me.validateData(data);\r\n    }\r\n\r\n    static toText(val) {\r\n        return Buffer.isText(val) ? val : Buffer.#decoder.decode(val);\r\n    }\r\n\r\n    static fromText(val) {\r\n        return Buffer.isText(val) ? Buffer.#encoder.encode(val) : val;\r\n    }\r\n\r\n    static isText(val) {\r\n        return typeof val === 'string';\r\n    }\r\n\r\n    static fromHex(value) {\r\n\r\n        const arry = [];\r\n\r\n        for (let i = 0; i < value.length; i += 2) {\r\n            arry.push(parseInt(\"0x\" + value.substr(i, 2), 16));\r\n        }\r\n\r\n        return new Uint8Array(arry);\r\n    }\r\n\r\n    static toHex(buffer) {\r\n        return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('');\r\n    }\r\n\r\n    static fromBase64(value) {\r\n\r\n        const strbin = atob(value);\r\n        const buffer = new ArrayBuffer(strbin.length);\r\n        const bufView = new Uint8Array(buffer);\r\n\r\n        for (let i = 0, strLen = strbin.length; i < strLen; i++) {\r\n            bufView[i] = strbin.charCodeAt(i);\r\n        }\r\n\r\n        return bufView;\r\n    }\r\n\r\n    static toBase64(buffer) {\r\n        return globalThis.btoa(new Uint8Array(buffer));\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * A module loading Event class\r\n * @module Events\r\n */\r\n\r\n/**\r\n * Extends native event by adding helper functions\r\n */\r\nexport default class EventExt extends EventTarget {\r\n\r\n    #listeners = new Set();\r\n\r\n    #list(type = '', listener) {\r\n        const me = this;\r\n        const list = Array.from(me.#listeners);\r\n        return EventExt.#isFunction(listener) ?\r\n            list.filter(o => o.type === type && o.listener === listener)\r\n            :\r\n            list.filter(o => o.type === type);\r\n    }\r\n\r\n    addEventListener(type, listener, opt) {\r\n        const me = this;\r\n        if (!EventExt.#isFunction(listener)) return false;\r\n        me.#listeners.add({ type: type, listener: listener });\r\n        return super.addEventListener(type, listener, opt);\r\n    }\r\n\r\n    removeEventListener(type, listener) {\r\n        const me = this;\r\n        const list = me.#list(type, listener);\r\n        list.forEach(o => super.removeEventListener(o.type, o.listener))\r\n        list.forEach(o => me.#listeners.delete(o));\r\n    }\r\n\r\n    /**\r\n     * Remove all listeners\r\n     */\r\n    unbind() {\r\n        const me = this;\r\n        Array.from(me.#listeners).forEach(o => {\r\n            super.removeEventListener(o.type, o.listener);\r\n        });\r\n        me.#listeners.clear();\r\n    }\r\n\r\n    /**\r\n     * Listen for events\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    on(type = '', listener) {\r\n        return this.addEventListener(type, listener);\r\n    }\r\n\r\n    /**\r\n     * Listen for events only once\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    once(type, listener) {\r\n        const me = this;\r\n        let wrap = (e) => {\r\n            listener(e);\r\n            wrap = null;\r\n        }\r\n        wrap.type = type;\r\n        wrap.listener = listener;\r\n        return me.addEventListener(type, wrap, { once: true });\r\n    }\r\n\r\n    /**\r\n     * Stop listening for events\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    off(type = '', listener) {\r\n        return this.removeEventListener(type, listener);\r\n    }\r\n\r\n    /**\r\n     * Send event to listeners\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {object} data  Data to send \r\n     */\r\n    emit(type, data) {\r\n        if (!type) return false;\r\n        const evt = new CustomEvent(type, { detail: data });\r\n        return this.dispatchEvent(evt);\r\n    }\r\n\r\n    send(type, data) { this.emit(type, data); }\r\n    listen(type, listener) { this.on(type, listener); }\r\n    unlisten(type, listener) { this.off(type, listener); }\r\n\r\n    /**\r\n     * Wait for an event \r\n     * @param {string} type Event name to be listened\r\n     * @returns {Event}\r\n     */\r\n    wait(type = '') {\r\n        if (!type) return e('Event undefined!');\r\n        const me = this;\r\n        return new Promise((r, e) => {\r\n            me.once(type, (e) => r(e));\r\n        });\r\n    }\r\n\r\n    static #isFunction(fn) {\r\n        return typeof fn === 'function';\r\n    }\r\n\r\n    /**\r\n     * Generic prevent event bubling\r\n     * \r\n     * @param {Event} e \r\n     */\r\n    static prevent(e) {\r\n        if (EventExt.#isFunction(e, 'preventDefault')) e.preventDefault();\r\n        if (EventExt.#isFunction(e, 'stopPropagation')) e.stopPropagation();\r\n    }\r\n\r\n    static {\r\n        Object.freeze(Event);\r\n    }\r\n\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport Buffer from './Buffer.mjs';\r\n\r\n/**\r\n * Browser native compression\r\n */\r\nexport default class Streams {\r\n\r\n\tstatic get isAvailable() {\r\n\t\treturn typeof CompressionStream !== 'undefined' &&\r\n\t\t\ttypeof DecompressionStream !== 'undefined';\r\n\t}\r\n\r\n\t/**\r\n\t * Stream header GS[version(5)][type(0|1|2|3)][len]\r\n\t * type: 0 - utf8 binary string, 1 - compressed, 2 - encrypted, 3 - 1 & 2\r\n\t * new Uint8Array([71, 83, 5, type, 0, 0, 0, 0]);\r\n\t * @param {Uint8Array} data\r\n\t * @returns {Uint8Array}\r\n\t */\r\n\tstatic #toGS(raw, encrypted = false, compressed = false) {\r\n\t\tif (!raw instanceof Uint8Array) return raw;\r\n\t\tconst type = Streams.#dataType(encrypted, compressed);\r\n\r\n\t\tconst data = new Uint8Array(8 + raw.length);\r\n\t\tconst dv = new DataView(data.buffer);\r\n\t\tdv.setUint8(0, 71);\r\n\t\tdv.setUint8(1, 83);\r\n\t\tdv.setUint8(2, 5);\r\n\t\tdv.setUint8(3, type);\r\n\t\tdv.setUint32(4, raw.length);\r\n\t\tdata.set(raw, 8);\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * Encode binary message to GS binary format\r\n\t * @param {*} raw \r\n\t * @param {*} security \r\n\t */\r\n\tstatic async wrap(raw, security) {\r\n\t\traw = Streams.toBinary(raw);\r\n\t\traw = await Streams.compressOrDefault(raw);\r\n\t\traw = await security.encrypt(raw);\r\n\t\traw = Streams.#toGS(raw, security.isValid, Streams.isAvailable);\r\n\t\t/*\r\n\t\tif (globalThis.QUARK_DEBUG) {\r\n\t\t\tconsole.log('DEBUG: Output :', Buffer.toHex(raw));\r\n\t\t}\r\n\t\t*/\r\n\t\treturn raw;\r\n\t}\r\n\r\n\t/**\r\n\t * Decode binary message from GS binary format\r\n\t * @param {*} raw \r\n\t * @param {*} security \r\n\t */\r\n\tstatic async unwrap(raw, security) {\r\n\r\n\t\tif (raw instanceof Uint8Array) raw = raw.buffer;\r\n\r\n\t\t/*\r\n\t\tif (globalThis.QUARK_DEBUG) {\r\n\t\t\tconsole.log('DEBUG: Input :', Buffer.toHex(raw));\r\n\t\t}\r\n\t\t*/\r\n\r\n\t\tconst dv = new DataView(raw);\r\n\t\tconst isGS = Streams.#isGS(dv);\r\n\r\n\t\traw = Streams.toBinary(raw);\r\n\t\tif (!isGS) return raw;\r\n\r\n\t\tconst type = dv.getUint8(3);\r\n\t\tconst len = dv.getUint32(4);\r\n\r\n\t\tif (dv.byteLength !== len + 8) return raw;\r\n\r\n\t\traw = raw.slice(8);\r\n\r\n\t\tconst isCompress = Streams.isCompressFlag(type);\r\n\t\tconst isEncrypt = Streams.isEncryptFlag(type);\r\n\r\n\t\tif (isEncrypt) {\r\n\t\t\traw = await security?.decrypt(raw);\r\n\t\t}\r\n\r\n\t\tif (isCompress) {\r\n\t\t\traw = await Streams.decompress(raw).arrayBuffer();\r\n\t\t}\r\n\r\n\t\traw = Streams.toBinary(raw);\r\n\t\tif (!Streams.isJson(raw)) throw new Error('Invalid response');\r\n\r\n\t\treturn JSON.parse(Buffer.toText(raw));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Check if DataView id GS data format\r\n\t * @param {*} dv \r\n\t * @returns \r\n\t */\r\n\tstatic #isGS(dv) {\r\n\t\treturn dv.byteLength > 8 && dv.getUint16(0) === 18259 && dv.getUint8(2) === 5;\r\n\t}\r\n\r\n\tstatic isCompressFlag(type) {\r\n\t\treturn (type & 1) === 1;\r\n\t}\r\n\r\n\tstatic isEncryptFlag(type) {\r\n\t\treturn (type & 2) === 2;\r\n\t}\r\n\r\n\tstatic #dataType(isEncrypt, isCompress) {\r\n\t\tconst type = isCompress ? 1 : 0;\r\n\t\treturn type | (isEncrypt ? 2 : 0);\r\n\t}\r\n\r\n\tstatic #stream(data, stream) {\r\n\t\tconst me = this;\r\n\t\tconst byteArray = me.toBinary(data);\r\n\t\tconst writer = stream.writable.getWriter();\r\n\t\twriter.write(byteArray);\r\n\t\twriter.close();\r\n\t\treturn new Response(stream.readable);\r\n\t}\r\n\r\n\t/**\r\n\t * If compression available, compress, \r\n\t * else return original value\r\n\t * @param {*} data \r\n\t * @param {*} encoding \r\n\t */\r\n\tstatic async compressOrDefault(data, encoding = 'gzip') {\r\n\t\tif (!Streams.isAvailable) return data;\r\n\t\tconst raw = await Streams.compress(data, encoding).arrayBuffer();\r\n\t\treturn Streams.toBinary(raw);\r\n\t}\r\n\r\n\t/**\r\n\t * If decompression available, decompress, \r\n\t * else return original value\r\n\t * @param {*} data \r\n\t * @param {*} encoding \r\n\t */\r\n\tstatic async decompressOrDefault(data, encoding = 'gzip') {\r\n\t\tif (!Streams.isAvailable) return data;\r\n\t\tconst raw = await Streams.decompress(data, encoding).arrayBuffer();\r\n\t\treturn Streams.toBinary(raw);\r\n\t}\r\n\r\n\t/**\r\n\t * Compress to gzip format\r\n\t * @param {*} data \r\n\t * @param {*} encoding gzip | deflate (zlib)\r\n\t * @returns {Response} \r\n\t */\r\n\tstatic compress(data, encoding = 'gzip') {\r\n\t\tconst stream = new CompressionStream(encoding);\r\n\t\treturn this.#stream(data, stream);\r\n\t}\r\n\r\n\t/**\r\n\t * Decompress from gzip format\r\n\t * @param {*} data \r\n\t * @param {*} encoding gzip | deflate (zlib)\r\n\t * @returns {Response} \r\n\t */\r\n\tstatic decompress(data, encoding = 'gzip') {\r\n\t\tconst stream = new DecompressionStream(encoding);\r\n\t\treturn this.#stream(data, stream);\r\n\t}\r\n\r\n\tstatic toBinary(data) {\r\n\t\tif (data instanceof Uint8Array) return data;\r\n\t\tif (data instanceof ArrayBuffer) return new Uint8Array(data);\r\n\t\tif (typeof data === 'string') return Buffer.fromText(data);\r\n\t\treturn this.toBinary(JSON.stringify(data));\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 2 bytes mathes gzip/deflate header signature\r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\r\n\tstatic isCompressed(data) {\r\n\t\tconst me = this;\r\n\t\tdata = me.toBinary(data);\r\n\t\treturn me.isGzip(data) || me.isZlib(data);\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 3 bytes matches gzip header signature\r\n\t * \r\n\t * zlib\r\n\t * 1F 8B 08\r\n\t * 31 139 8\r\n\t * \r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\r\n\tstatic isGzip(data) {\r\n\t\treturn data.at(0) === 31 && data.at(1) === 139 && data.at(2) === 8;\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 2 bytes matches deflate (zlib) header signature\r\n\t * \r\n\t * deflate\r\n\t * 78  (01, 5e,9c, da) \r\n\t * 120 (1, 94, 156, 218)\r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\r\n\tstatic isZlib(data) {\r\n\t\treturn data.at(0) === 120 && [1, 94, 156, 218].indexOf(data.at(1)) > -1;\r\n\t}\r\n\r\n\tstatic isJson(data) {\r\n\t\tconst me = this;\r\n\t\tdata = typeof data === 'string' ? data.trim() : me.toBinary(data);\r\n\t\tconst first = data.at(0);\r\n\t\tconst last = data.at(data.length - 1);\r\n\t\treturn me.#isJsonArray(first, last) || me.#isJsonObj(first, last);\r\n\t}\r\n\r\n\tstatic #isJsonObj(first, last) {\r\n\t\treturn (first === '{' || first === 123) && (last === '}' || last === 125);\r\n\t}\r\n\r\n\tstatic #isJsonArray(first, last) {\r\n\t\treturn (first === '[' || first === 91) && (last === ']' || last === 93);\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2023 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Security engine using Web Crypto API to encrypt / decrypt\r\n * messages between browser and server.\r\n *\r\n */\r\n\r\nimport Buffer from \"./Buffer.mjs\";\r\n\r\nexport default class Security {\r\n\r\n    static #ECDH_TYPE = { name: 'ECDH', namedCurve: \"P-256\" };\r\n    static #AES_TYPE = { name: \"AES-CTR\", length: 256 };\r\n\r\n    #publicKey = null;\r\n    #keyPair = null;\r\n    #aesKey = null;\r\n\r\n    /**\r\n     * Create random bytes\r\n     *\r\n     * @param {int} size\r\n     *     length of data (required)\r\n     */\r\n    static getRandom(size) {\r\n        const array = new Uint8Array(size);\r\n        crypto.getRandomValues(array);\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * Initialize browser ECDH key pair \r\n     */\r\n    static initKeyPair() {\r\n        const use = ['deriveKey', 'deriveBits'];\r\n        return crypto.subtle.generateKey(Security.#ECDH_TYPE, true, use);\r\n    }\r\n\r\n    /**\r\n     * Import Async key received from server\r\n     * Key is publicKey used to send encrypted AES key\r\n     *\r\n     * @param {String} key PEM encoded key\r\n     * @param {Object} type Crypto API key definition format\r\n     * @param {String} mode Comma separted list of key usages \r\n     */\r\n    static async importKey(key, type, mode) {\r\n        const der = Buffer.fromBase64(key);\r\n        const use = mode ? mode.split(',') : [];\r\n        return crypto.subtle.importKey('spki', der, type, true, use);\r\n    }\r\n\r\n    /**\r\n     * Export key in hex form\r\n     * @param {CryptoKey} key\r\n     * @returns {string}\r\n     */\r\n    static async exportKey(key) {\r\n        const ab = await crypto.subtle.exportKey('raw', key);\r\n        return Buffer.toHex(ab);\r\n    }\r\n\r\n    /**\r\n     * Verify signature\r\n     *\r\n     * @param {CryptoKey} Public key used for verification\r\n     * @param {ArrayBuffer} signature Signature of received data\r\n     * @param {ArrayBuffer} challenge Challenge to verify with signature (ts + pemENCDEC + pemVERSGN)\r\n     */\r\n    static async verify(key, signature, challenge) {\r\n        signature = Buffer.fromBase64(signature);\r\n        challenge = Buffer.toBuffer(challenge);\r\n        const type = { name: \"ECDSA\", hash: { name: \"SHA-384\" } };\r\n        return crypto.subtle.verify(type, key, signature, challenge);\r\n    }\r\n\r\n    get publicKey() { return this.#publicKey; }\r\n\r\n\r\n    cookie(path = \"/\") {\r\n        return `gs-public-key=${this.#publicKey || ''};path=${path}`;\r\n    }\r\n\r\n    updateCookie(path = \"/\") {\r\n        document.cookie = this.cookie(path);\r\n    }\r\n\r\n    /**\r\n     *  Use local challenge, to verify received data signature\r\n     *\r\n     *  @param {Object} cfg Data received from server contins public key and signature\r\n     */\r\n    #getChallenge(cfg) {\r\n        return [cfg.challenge || '', cfg.keyEnc || '', cfg.keyVer || ''].join('');\r\n    }\r\n\r\n    async #initVerify(cfg) {\r\n        const me = this;\r\n        const type = { name: 'ECDSA', namedCurve: \"P-384\" };\r\n        const verKey = await Security.importKey(cfg.keyVer, type, 'verify');\r\n        const status = await Security.verify(verKey, cfg.signature, me.#getChallenge(cfg));\r\n        if (!status) throw new Error('Signature invalid');\r\n    }\r\n\r\n    /**\r\n     * Initialize server public key\r\n     * @param {object} cfg \r\n     */\r\n    #initPublic(cfg) {\r\n        return Security.importKey(cfg.keyEnc, Security.#ECDH_TYPE, '');\r\n    }\r\n\r\n    /**\r\n     * Derive shared secret from server public ECDH and browser keypair.private ECDH\r\n     * @returns {CryptoKey}\r\n     */\r\n    #deriveAES(priv, pub) {\r\n        const pubDef = { name: \"ECDH\", public: pub };\r\n        const use = ['encrypt', 'decrypt'];\r\n        const derivedKey = Security.#AES_TYPE;\r\n        const dbg = false; // globalThis.QUARK_DEBUG === true;\r\n        return crypto.subtle.deriveKey(pubDef, priv, derivedKey, dbg, use);\r\n    }\r\n\r\n    #toAlgo(iv) {\r\n        iv = Buffer.toBuffer(iv);\r\n        const type = Object.assign({ counter: iv }, Security.#AES_TYPE);\r\n        type.length = 128;\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Encrypt message with AES\r\n     * @param {CryptoKey} key \r\n     * @param {ArrayBuffer} iv IV as Hex string \r\n     * @param {ArrayBuffer} data as Hex string \r\n     */\r\n    async encryptRaw(key, iv, data) {\r\n        const databin = Buffer.toBuffer(data);\r\n        const type = this.#toAlgo(iv);\r\n        return crypto.subtle.encrypt(type, key, databin);\r\n    }\r\n\r\n    /**\r\n     * Decrypt AES encrypted message\r\n     * @param {CryptoKey} key \r\n     * @param {ArrayBuffer} iv IV as Hex string \r\n     * @param {ArrayBuffer} data as Hex string \r\n     */\r\n    async decryptRaw(key, iv, data) {\r\n        const databin = Buffer.toBuffer(data);\r\n        const type = this.#toAlgo(iv);\r\n        return crypto.subtle.decrypt(type, key, databin);\r\n    }\r\n\r\n    async decryptAsBuffer(key, iv, data) {\r\n        const result = await this.decryptRaw(key, iv, data);\r\n        return Buffer.toBuffer(result);\r\n    }\r\n\r\n    async encryptAsBuffer(key, iv, data) {\r\n        const result = await this.encryptRaw(key, iv, data);\r\n        return Buffer.toBuffer(result);\r\n    }\r\n\r\n    async decryptAsString(key, iv, data) {\r\n        const result = await this.decryptRaw(key, iv, data);\r\n        return Buffer.toText(result);\r\n    }\r\n\r\n    async encryptAsHex(key, iv, data) {\r\n        const result = await this.encryptRaw(key, iv, data);\r\n        return Buffer.toHex(result);\r\n    }\r\n\r\n    get isValid() {\r\n        const me = this;\r\n        return me.#publicKey !== null && me.#aesKey !== null;\r\n    }\r\n\r\n    static get isAvailable() {\r\n        return crypto.subtle ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Initialize encryption and verification keys\r\n     * Verifies data signatures to prevent tampering\r\n     */\r\n    async init(cfg) {\r\n\r\n        if (!Security.isAvailable) {\r\n            console.log('Security mode not available, TLS protocol required.');\r\n            return;\r\n        }\r\n\r\n        console.log('Security Initializing...');\r\n        const me = this;\r\n\r\n        await me.#initVerify(cfg);\r\n\r\n        const publicKey = await me.#initPublic(cfg);\r\n        me.#aesKey = await me.#deriveAES(me.#keyPair.privateKey, publicKey);\r\n        me.#keyPair = null;\r\n\r\n        /*\r\n        if (globalThis.QUARK_DEBUG) {\r\n            const raw = await Security.exportKey(me.#aesKey);\r\n            console.log('DEBUG: Derived key :', raw);\r\n        }\r\n        */\r\n\r\n        console.log('Security Initialized!');\r\n\r\n    }\r\n\r\n    /**\r\n     * Encrypt provided data\r\n     * @param {Uint8Array} data Data to encrypt\r\n     * @returns {Uint8Array} [head+iv+data]\r\n     */\r\n    async encrypt(data) {\r\n        const me = this;\r\n        if (!me.isValid) return data;\r\n        if (!data instanceof Uint8Array) return data;\r\n        const iv = Security.getRandom(16);\r\n        const d = await me.encryptAsBuffer(me.#aesKey, iv, data);\r\n\r\n        const raw = new Uint8Array(iv.length + d.length);\r\n        raw.set(iv, 0);\r\n        raw.set(d, iv.length);\r\n        return raw;\r\n    }\r\n\r\n    /**\r\n     * Decrypt received data in format {d:.., k:...}\r\n     *\r\n     * @param {ArrayBuffer|Uint8Array} data\r\n     * @param {ArrayBuffer|Uint8Array} iv\r\n     * @return \r\n     */\r\n    async decrypt(data, iv) {\r\n\r\n        const me = this;\r\n\r\n        if (!iv) {\r\n            iv = data.slice(0, 16);\r\n            data = data.slice(16);\r\n        }\r\n\r\n        return await me.decryptAsBuffer(me.#aesKey, iv, data);\r\n    }\r\n\r\n    async #preInit() {\r\n        const me = this;\r\n        if (me.#publicKey) return me.#publicKey;\r\n        me.#keyPair = await Security.initKeyPair();\r\n        me.#publicKey = await Security.exportKey(me.#keyPair.publicKey);\r\n        return me.#publicKey;\r\n    }\r\n\r\n    static async create(cfg) {\r\n        const security = new Security();\r\n        await security.#preInit();\r\n        if (cfg) await security.init(cfg);\r\n        return security;\r\n    }\r\n\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Queue to handle requests\r\n */\r\nexport default class Queue extends Map {\r\n\r\n\t#up = 0;\r\n\t#down = 0;\r\n\t#tid = 0;\r\n\r\n\t/**\r\n\t * Update counters and queue to link resposnes to requests\r\n\t * @param {Object} req\r\n\t *      Request data\r\n\t */\r\n\tupdateRequest(req) {\r\n\t\tconst me = this;\r\n\t\tme.#tid++;\r\n\t\tme.#up++;\r\n\t\treq.tid = me.#tid.toString();\r\n\t\tme.set(req.tid, req);\r\n\t}\r\n\r\n\t/**\r\n\t * Reset queue to remove old stalled elements\r\n\t */\r\n\treset() {\r\n\t\tconst me = this;\r\n\t\tif (me.#up > 50 && me.#down >= me.#up) {\r\n\t\t\tme.#up = 0;\r\n\t\t\tme.#down = 0;\r\n\t\t\tme.clear();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Process array of response records\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\tprocess(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst unknown = [];\r\n\r\n\t\tif (Array.isArray(obj)) {\r\n\t\t\tobj.forEach((o) => {\r\n\t\t\t\tconst res = me.execute(o);\r\n\t\t\t\tif (res) unkown.push(res);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconst o = me.execute(obj);\r\n\t\t\tif (o) unknown.push(o);\r\n\t\t}\r\n\r\n\t\treturn unknown;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Process single response record\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\texecute(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst tid = obj.tid;\r\n\t\tlet unknown = null;\r\n\r\n\t\tme.#down++;\r\n\r\n\t\tif (me.has(tid)) {\r\n\t\t\tconst req = me.get(tid);\r\n\t\t\ttry {\r\n\t\t\t\treq.finish(obj);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log(e);\r\n\t\t\t\treq.finish(e);\r\n\t\t\t} finally {\r\n\t\t\t\tme.delete(tid);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tunknown = obj;\r\n\t\t}\r\n\r\n\t\tme.reset();\r\n\r\n\t\treturn unknown;\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * API engine asynchronous request\r\n */\r\nexport default class Request {\r\n\r\n    #id = 0;\r\n    #timeout = 0;\r\n    #callback;\r\n\r\n    constructor(timeout, callback) {\r\n        const me = this;\r\n        me.#callback = callback;\r\n        me.#timeout = timeout;\r\n        me.#init();\r\n    }\r\n\r\n    get(object, property) {\r\n        const me = this;\r\n        if (property === 'timeout') return me.timeout;\r\n        if (property === 'finish') return me.callback.bind(me);\r\n        return object[property];\r\n    }\r\n\r\n    callback(o) {\r\n        const me = this;\r\n        if (me.timeout) return;\r\n        me.#clear();\r\n        return me.#callback(o);\r\n    }\r\n\r\n    get timeout() {\r\n        return this.#timeout === true;\r\n    }\r\n\r\n    #clear() {\r\n        const me = this;\r\n        if (me.#id === 0) return;\r\n        clearTimeout(me.#id);\r\n    }\r\n\r\n    #init() {\r\n        const me = this;\r\n        if (me.#timeout === 0) return;\r\n        me.#id = setTimeout(() => {\r\n            me.#timeout = true;\r\n            me.#callback(new Error('Call timeouted!'));\r\n        }, me.#timeout);\r\n    }\r\n\r\n    static wrap(data, timeout, callback) {\r\n        return new Proxy(data, new Request(timeout, callback));\r\n    }\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport EventExt from \"./EventExt.mjs\";\r\nimport Request from \"./Request.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to call remote services.\r\n * All Direct functions linked to defiend namespace\r\n */\r\nexport default class Generator extends EventExt {\r\n\r\n\t#model = {};\r\n\t#id = null;\r\n\t#cnt = 0;\r\n\t#timeout = 0;\r\n\r\n\tconstructor(id = 0, timeout = 0) {\r\n\t\tsuper();\r\n\t\tthis.#id = id;\r\n\t\tthis.#timeout = timeout;\r\n\t}\r\n\r\n\t/**\r\n\t * Return generted API structure and callers\r\n\t */\r\n\tget api() {\r\n\t\treturn this.#model;\r\n\t}\r\n\r\n\t/**\r\n\t * Disconnect generator from API callers\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\t\tme.off('call');\r\n\t\tme.off('api');\r\n\t\tme.off('raw');\r\n\t\tme.off('error');\r\n\t\tme.#detach();\r\n\t}\r\n\r\n\t#cleanup(obj, id) {\r\n\t\tfor (let k in obj) {\r\n\t\t\tlet el = obj[k];\r\n\t\t\tif (typeof el === 'object') {\r\n\t\t\t\tif (this.#cleanup(el, id)) obj[k] = null;\r\n\t\t\t} else if (el._id_ === id) {\r\n\t\t\t\tobj[k] = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Object.values(obj).filter(o => o != null).length === 0;\r\n\t}\r\n\r\n\t#detach() {\r\n\t\tconst me = this;\r\n\t\tme.#cleanup(me.#model, me.#id);\r\n\t\tme.#model = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Build JS object with callable functions that maps to Java side methods\r\n\t * Data is retrieved from API service\r\n\t *\r\n\t * @param {String} url || api object\r\n\t * \t\t  URL Address for API service definitions\r\n\t */\r\n\tbuild(o) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst data = o ? o.api || o : null;\r\n\r\n\t\tif (data) me.#buildAPI(data);\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * From API tree generate namespace tree and\r\n\t * links generated functions to WebScoket api calls\r\n\t *\r\n\t * @param {Object} cfg\r\n\t * \t\tAlternative definition to API\r\n\t */\r\n\t#buildAPI(cfg) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (Array.isArray(cfg)) {\r\n\t\t\tcfg.forEach(v => me.#buildInstance(v));\r\n\t\t} else {\r\n\t\t\tme.#buildInstance(cfg);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Build from single definition\r\n\t *\r\n\t * @param {Object} api\r\n\t * \t\t  Java Class/Method definition\r\n\t */\r\n\t#buildInstance(api) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet tree = null;\r\n\t\tlet action = null;\r\n\r\n\t\ttree = me.#buildNamespace(api.namespace);\r\n\r\n\t\tif (!tree[api.action]) {\r\n\t\t\ttree[api.action] = {};\r\n\t\t}\r\n\t\taction = tree[api.action];\r\n\r\n\t\tme.#reduce(api.methods)?.forEach(v => me.#buildMethod(api.namespace, api.action, action, v, me.#id));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Reduce duplicate methods with parameters overrides\r\n\t * @param {Array<Object>} list \r\n\t * @returns \r\n\t */\r\n\t#reduce(list) {\r\n\t\treturn list.reduce((a, v, i, ar) => {\r\n\r\n\t\t\tif (a.filter(r => r.name == v.name).length == 1) return a;\r\n\r\n\t\t\tconst objs = ar.filter(r => r.name == v.name);\r\n\t\t\tif (objs.length === 1) {\r\n\t\t\t\ta.push(v);\r\n\t\t\t\treturn a;\r\n\t\t\t}\r\n\r\n\t\t\tconst obj = objs.filter(r => r.name === v.name).reduce((a, v) => {\r\n\t\t\t\ta.len.push(v.len);\r\n\t\t\t\ta.async[v.len] = v.async;\r\n\t\t\t\treturn a;\r\n\t\t\t}, { name: v.name, len: [], async: {} });\r\n\r\n\t\t\ta.push(obj);\r\n\t\t\treturn a\r\n\t\t}, []);\r\n\t}\r\n\r\n\t/**\r\n\t * Generate namespace object structure from string version\r\n\t *\r\n\t * @param  {String} namespace\r\n\t * \t\t\tTree structure delimited with dots\r\n\t *\r\n\t * @return {Object}\r\n\t * \t\t\tObject tree structure\r\n\t */\r\n\t#buildNamespace(namespace) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tlet tmp = globalThis;\r\n\t\tlet tmp2 = me.#model;\r\n\r\n\t\tnamespace.split('.').every(v => {\r\n\r\n\t\t\tif (!tmp[v]) tmp[v] = {};\r\n\t\t\ttmp = tmp[v];\r\n\r\n\t\t\tif (!tmp2[v]) tmp2[v] = tmp;\r\n\t\t\ttmp2 = tmp;\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn tmp;\r\n\t}\r\n\r\n\t/**\r\n\t * Build instance methods\r\n\t *\r\n\t * @param {String} namespace\r\n\t * @param {String} action\r\n\t * @param {String} instance\r\n\t * @param {Array} api\r\n\t */\r\n\t#buildMethod(namespace, action, instance, api, id) {\r\n\r\n\t\tconst enc = api.encrypt === false ? false : true;\r\n\t\tconst cfg = {\r\n\t\t\tn: namespace,\r\n\t\t\tc: action,\r\n\t\t\tm: api.name,\r\n\t\t\tl: api.len,\r\n\t\t\ta: api.async,\r\n\t\t\te: enc,\r\n\t\t\ti: id\r\n\t\t};\r\n\r\n\t\tinstance[api.name] = this.#apiFn(cfg);\r\n\t\tinstance[api.name]._id_ = id;\r\n\t\t// Object.freeze(instance[api.name]);\r\n\t}\r\n\r\n\t/**\r\n\t * Generic function used to attach for generated API\r\n\t *\r\n\t * @param {Array} params List of arguments from caller\r\n\t */\r\n\t#apiFn(params) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst prop = params;\r\n\r\n\t\tconst fn = function () {\r\n\r\n\t\t\tconst args = Array.prototype.slice.call(arguments);\r\n\r\n\t\t\t// overriden function with multiple param lengths\r\n\t\t\tconst isOverride = Array.isArray(prop.l);\r\n\r\n\t\t\tconst len = isOverride ? prop.l.filter(v => v === args.length).pop() : prop.l;\r\n\t\t\tif (args.length != len) throw new Error(`Invalid arguments length. Required (${prop.l})`);\r\n\r\n\t\t\tconst isAsync = isOverride ? prop.a[args.length] : prop.a;\r\n\t\t\tconst timeout = isAsync ? 0 : me.#timeout;\r\n\r\n\t\t\tconst req = {\r\n\t\t\t\t\"namespace\": prop.n,\r\n\t\t\t\t\"action\": prop.c,\r\n\t\t\t\t\"method\": prop.m,\r\n\t\t\t\t\"id\": prop.i,\r\n\t\t\t\t\"enc\": prop.e,\r\n\t\t\t\t\"data\": args,\r\n\t\t\t\t\"key\": ++me.#cnt,\r\n\t\t\t\t\"tid\": 0,\r\n\t\t\t\t\"ts\": Date.now()\r\n\t\t\t};\r\n\t\t\tObject.seal(req);\r\n\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst proxy = Request.wrap(req, timeout, (obj) => {\r\n\t\t\t\t\t\tme.#onResponse(obj, resolve, reject);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tme.emit('call', proxy);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.log(e);\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn fn;\r\n\t}\r\n\r\n\t/**\r\n\t * Process remote response\r\n\t */\r\n\t#onResponse(obj, resolve, reject) {\r\n\r\n\t\tif (obj instanceof Error) return reject(obj);\r\n\r\n\t\tconst result = obj.result || obj;\r\n\r\n\t\tif (result.success) {\r\n\t\t\tresolve(result);\r\n\t\t} else {\r\n\t\t\treject(result);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Static instance builder\r\n\t * @param {object} cfg Api list from server side Quark engine\r\n\t * @param {number} id Unique Quark Engine ID - to link functions to the engine instance\r\n\t * @returns \r\n\t */\r\n\tstatic build(cfg, id, timeout) {\r\n\t\tconst generator = new Generator(id, timeout);\r\n\t\tgenerator.build(cfg);\r\n\t\treturn generator;\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport EventExt from \"./EventExt.mjs\";\r\nimport Queue from \"./Queue.mjs\";\r\nimport Streams from \"./Streams.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to call remote services.\r\n * All Direct functions linked to io.greenscreens namespace\r\n */\r\nexport default class SocketChannel extends EventExt {\r\n\r\n\t#queue = new Queue();\r\n\t#webSocket = null;\r\n\t#engine = null;\r\n\t#iid = 0;\r\n\r\n\t/**\r\n\t * Initialize Socket channel\r\n\t */\r\n\tasync init(engine) {\r\n\r\n\t\tconst me = this;\r\n\t\tme.stop();\r\n\t\tme.#engine = engine;\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tme.#startSocket(resolve, reject);\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tget isOpen() {\r\n\t\tconst me = this;\r\n\t\tif (me.#webSocket == null) return false;\r\n\t\treturn me.#webSocket.readyState === me.#webSocket.OPEN;\r\n\t}\r\n\r\n\t/**\r\n\t * Close WebSocket channel if available\r\n\t */\r\n\tstop() {\r\n\t\tconst me = this;\r\n\t\tif (me.#webSocket == null) return false;\r\n\t\tme.#webSocket.close();\r\n\t\tme.#webSocket = null;\r\n\t\tme.#engine = null;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Must be here, if encryption and compression is not available, \r\n\t * for server to regoznize Quark data format.\r\n\t * @param {*} req \r\n\t * @returns \r\n\t */\r\n\t#wrap(cmd, req) {\r\n\t\tconst data = {\r\n\t\t\ttype: 'GS',\r\n\t\t\tcmd: cmd,\r\n\t\t\tdata: req ? [req] : null\r\n\t\t};\r\n\t\treturn JSON.stringify(data);\r\n\t}\r\n\r\n\tget #ping() {\r\n\t\treturn this.#wrap('ping');\r\n\t}\r\n\r\n\t/**\r\n\t * Prepare remote call, encrypt if available\r\n\t *\r\n\t * @param {Object} req\r\n\t *         Data to send (optionaly encrypt)\r\n\t */\r\n\tasync #onCall(req) {\r\n\r\n\t\treq = req.detail;\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (req.id !== me.#engine.id) return;\r\n\r\n\t\tme.#queue.updateRequest(req);\r\n\r\n\t\tconst msg = me.#wrap('data', req);\r\n\t\tconst raw = await Streams.wrap(msg, me.#engine.Security);\r\n\t\tme.#webSocket.send(raw);\r\n\t}\r\n\r\n\tasync #startSocket(resolve, reject) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tconst challenge = Date.now();\r\n\t\tconst url = new URL(engine.serviceURL);\r\n\r\n\t\t// const headers = Object.assign({}, engine.headers || {});\r\n\t\tconst querys = Object.assign({}, engine.querys || {});\r\n\t\tquerys.q = challenge;\r\n\t\tquerys.c = Streams.isAvailable;\r\n\r\n\t\tObject.entries(querys || {}).forEach((v) => {\r\n\t\t\tif (v[1]) url.searchParams.append(v[0], encodeURIComponent(v[1]));\r\n\t\t});\r\n\r\n\t\tengine.Security.updateCookie();\r\n\r\n\t\tme.#webSocket = new WebSocket(url.toString(), ['quark']);\r\n\t\tme.#webSocket.binaryType = \"arraybuffer\";\r\n\r\n\t\tconst onCall = me.#onCall.bind(me);\r\n\r\n\t\tme.#webSocket.onopen = (event) => {\r\n\r\n\t\t\tme.emit('online', event);\r\n\t\t\tgenerator.on('call', onCall);\r\n\t\t\tme.#initPing();\r\n\r\n\t\t\tif (!engine.isWSAPI) {\r\n\t\t\t\treturn resolve(true);\r\n\t\t\t}\r\n\r\n\t\t\tgenerator.once('api', async (e) => {\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst data = e.detail;\r\n\t\t\t\t\tdata.challenge = challenge;\r\n\t\t\t\t\tawait engine.registerAPI(data);\r\n\t\t\t\t\tresolve(true);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\r\n\t\t};\r\n\r\n\t\tme.#webSocket.onclose = (event) => {\r\n\t\t\tgenerator.off('call', onCall);\r\n\t\t\tclearInterval(me.#iid);\r\n\t\t\tme.stop();\r\n\t\t\tme.emit('offline', event);\r\n\t\t}\r\n\r\n\t\tme.#webSocket.onerror = (event) => {\r\n\t\t\tgenerator.off('call', onCall);\r\n\t\t\treject(event);\r\n\t\t\tme.stop();\r\n\t\t\tme.emit('error', event);\r\n\t\t};\r\n\r\n\t\tme.#webSocket.onmessage = async (event) => {\r\n\t\t\ttry {\r\n\t\t\t\tif (event.data instanceof ArrayBuffer) {\r\n\t\t\t\t\tawait me.#prepareBinaryMessage(event.data);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tawait me.#prepareTextMessage(event.data);\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\te.data = event;\r\n\t\t\t\tgenerator.emit('error', e);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t#initPing() {\r\n\t\tconst me = this;\r\n\t\tme.#iid = setInterval(() => {\r\n\t\t\tme.send(me.#ping);\r\n\t\t}, 15 * 1000);\r\n\t}\r\n\r\n\tasync #prepareBinaryMessage(message) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst security = engine.Security;\r\n\r\n\t\tmessage = await Streams.unwrap(message, security);\r\n\r\n\t\tconst isJSON = Streams.isJson(message);\r\n\t\tif (!isJSON) return generator.emit('raw', message);\r\n\r\n\t\tif (Array.isArray(message)) {\r\n\t\t\tmessage.forEach(m => me.#onMessage(m));\r\n\t\t} else {\r\n\t\t\tme.#onMessage(message);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Parse and prepare received message for processing\r\n\t *\r\n\t * @param {String} mesasge\r\n\t *\r\n\t */\r\n\tasync #prepareTextMessage(message) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\ttry {\r\n\t\t\tconst isJSON = Streams.isJson(message);\r\n\r\n\t\t\tif (!isJSON) return generator.emit('raw', message);\r\n\r\n\t\t\tmessage = JSON.parse(message);\r\n\t\t\tif (Array.isArray(message)) {\r\n\t\t\t\tmessage.forEach(m => me.#onMessage(m));\r\n\t\t\t} else {\r\n\t\t\t\tme.#onMessage(message);\r\n\t\t\t}\r\n\r\n\t\t} catch (e) {\r\n\t\t\tgenerator.emit('error', e);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Process received message\r\n\t *\r\n\t * @param {*} msg\r\n\t *\r\n\t */\r\n\tasync #onMessage(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet data = null;\r\n\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tif (obj.cmd === 'api') {\r\n\t\t\treturn generator.emit('api', obj.data);\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'err') {\r\n\t\t\treturn generator.emit('error', obj.result);\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'data') {\r\n\t\t\tdata = obj.data;\r\n\t\t}\r\n\r\n\t\tif (data) {\r\n\t\t\tconst unknown = me.#queue.process(data);\r\n\t\t\tunknown.forEach((obj) => me.emit('message', obj));\r\n\t\t} else {\r\n\t\t\tme.emit('message', data);\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport Security from \"./Security.mjs\";\r\nimport Streams from \"./Streams.mjs\";\r\n\r\n/**\r\n * Web Requester Engine\r\n * Used to call remote services through HTTP/S\r\n */\r\nexport default class WebChannel {\r\n\r\n\tstatic #MIME_BINARY = 'application/octet-stream';\r\n\tstatic #MIME_JSON = 'application/json';\r\n\r\n\t#engine = null;\r\n\r\n\t/**\r\n\t * If http/s used in url, make standard fetch call to the defined service\r\n\t */\r\n\tasync init(engine) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (me.#engine) me.stop();\r\n\r\n\t\tme.#engine = engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tconst data = await me.#getAPI(engine.apiURL);\r\n\t\tawait engine.registerAPI(data);\r\n\r\n\t\tif (engine.isSocketChannel) return;\r\n\r\n\t\tgenerator.on('call', me.#onRequest.bind(me));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Disengage listeners and links\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tme.#engine = null;\r\n\r\n\t\tengine.Generator.off('call');\r\n\t\tif (engine.isSocketChannel) return;\r\n\t\ttry {\r\n\t\t\tfetch(engine.serviceURL, {\r\n\t\t\t\tmethod: 'delete'\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Callback for API call request,\r\n\t * here we make remote API call\r\n\t */\r\n\tasync #onRequest(req) {\r\n\r\n\t\treq = req.detail;\r\n\t\tconst me = this;\r\n\t\tlet o = null;\r\n\r\n\t\tif (req.id !== me.#engine.id) return;\r\n\r\n\t\ttry {\r\n\t\t\to = await me.#onCall(me.#engine, req);\r\n\t\t\treq.finish(o);\r\n\t\t} catch (err) {\r\n\t\t\treq.finish(err);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Get API definition through HTTP/s channel\r\n\t *\r\n\t * @param {String} url\r\n\t * \t\t  URL Address for API service definitions\r\n\t */\r\n\tasync #getAPI(url) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst service = url;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst id = Date.now();\r\n\r\n\t\tconst headers = Object.assign({}, engine.headers || {}, { 'x-time': id });\r\n\r\n\t\tconst resp = await fetch(service, {\r\n\t\t\tmethod: 'get',\r\n\t\t\theaders: headers,\r\n\t\t\tcredentials: 'same-origin'\r\n\t\t});\r\n\r\n\t\tconst data = await resp.json();\r\n\r\n\t\t// update local challenge for signature verificator\r\n\t\tdata.challenge = id.toString();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tget #accept() {\r\n\t\treturn `${WebChannel.#MIME_BINARY}, ${WebChannel.#MIME_JSON}`;\r\n\t}\r\n\r\n\t#mime(data) {\r\n\t\tconst isBinary = typeof data === 'string' ? false : true;\r\n\t\treturn isBinary ? WebChannel.#MIME_BINARY : WebChannel.#MIME_JSON;\r\n\t}\r\n\r\n\t/**\r\n\t * Send data to server with http/s channel\r\n\t */\r\n\tasync #fetchCall(url, data, head, isCompress) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst CONTENT_TYPE = me.#mime(data);\r\n\r\n\t\tconst HEADERS_ = {\r\n\t\t\t'Accept': me.#accept,\r\n\t\t\t'Content-Type': CONTENT_TYPE,\r\n\t\t\t'Accept-Encoding': 'gzip,deflate,br'\r\n\t\t};\r\n\r\n\t\tif (isCompress && Streams.isAvailable) {\r\n\t\t\tdata = Streams.toBinary(data);\r\n\t\t\tdata = await Streams.compressOrDefault(data);\r\n\t\t\tHEADERS_['Content-Encoding'] = 'gzip';\r\n\t\t}\r\n\r\n\t\tconst service = new URL(url);\r\n\t\tconst headers = Object.assign({}, engine.headers || {}, HEADERS_, head || {});\r\n\t\tconst querys = Object.assign({}, engine.querys || {});\r\n\r\n\t\tconst req = {\r\n\t\t\tmethod: 'post',\r\n\t\t\theaders: headers,\r\n\t\t\tbody: data\r\n\t\t};\r\n\t\tObject.entries(querys || {}).forEach((v) => {\r\n\t\t\tservice.searchParams.append(v[0], encodeURIComponent(v[1]));\r\n\t\t});\r\n\r\n\t\treturn await fetch(service.toString(), req);\r\n\r\n\t}\r\n\r\n\tasync #onResponse(res) {\r\n\t\tconst mime = res.headers.get('content-type') || '';\r\n\t\tconst isBin = mime.includes(WebChannel.#MIME_BINARY);\r\n\t\tconst isJson = mime.includes(WebChannel.#MIME_JSON);\r\n\t\tconst isPlain = !isBin && !isJson;\r\n\r\n\t\tif (isJson) return await res.json();\r\n\t\tif (isPlain) {\r\n\t\t\tconst txt = await res.text();\r\n\t\t\tif (!Streams.isJson(txt)) throw new Error('Invalid response');\r\n\t\t\treturn JSON.parse(txt);\r\n\t\t}\r\n\r\n\r\n\t\tconst raw = await res.arrayBuffer();\r\n\t\tconst obj = await Streams.unwrap(raw, this.#engine.Security);\r\n\r\n\t\tif (obj && obj.type == 'ws' && obj.cmd === 'data') {\r\n\t\t\treturn obj.data;\r\n\t\t}\r\n\t\treturn obj;\r\n\t}\r\n\r\n\t/**\r\n\t * Prepare remote call, encrypt if available\r\n\t *\r\n\t * @param {String} url\r\n\t *        Service URL to receive data\r\n\t *\r\n\t * @param {Object} req\r\n\t *         Data to send (optionally encrypt)\r\n\t */\r\n\tasync #onCall(engine, req) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst security = engine.Security;\r\n\t\tconst url = engine.serviceURL;\r\n\r\n\t\tconst isEncrypt = security?.isValid;\r\n\t\tlet isCompress = false;\r\n\t\tlet raw = null;\r\n\r\n\t\tif (isEncrypt) {\r\n\t\t\traw = await Streams.wrap(req, me.#engine.Security);\r\n\t\t} else {\r\n\t\t\traw = JSON.stringify(raw);\r\n\t\t\tisCompress = true;\r\n\t\t}\r\n\r\n\t\tconst head = {};\r\n\r\n\t\tif (isEncrypt) {\r\n\t\t\thead['gs-public-key'] = security.publicKey;\r\n\t\t}\r\n\r\n\t\t// send and wait for response\r\n\t\tconst res = await me.#fetchCall(url, raw, head, isCompress);\r\n\t\tconst data = await me.#onResponse(res);\r\n\r\n\t\t// if error throw\r\n\t\tif (data.cmd == 'err') {\r\n\t\t\tthrow new Error(data.result.msg);\r\n\t\t}\r\n\r\n\t\t// return server response\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport Generator from \"./Generator.mjs\";\r\nimport Security from \"./Security.mjs\";\r\nimport SocketChannel from \"./SocketChannel.mjs\";\r\nimport WebChannel from \"./WebChannel.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to initialize remote API and remote services.\r\n */\r\nconst ERROR_MESSAGE = 'Invalid definition for Engine Remote Service';\r\nconst ERROR_API_UNDEFINED = 'API Url not defined!';\r\nconst ERROR_SVC_UNDEFINED = 'Service Url not defined!';\r\n\r\n/**\r\n * Main class for Quark Engine Client\r\n */\r\nexport default class QuarkEngine {\r\n\r\n\t#cfg = null;\r\n\t#isWSAPI = false;\r\n\t#isWebChannel = false;\r\n\t#isSocketChannel = false;\r\n\r\n\t#Security = null;\r\n\t#Generator = null;\r\n\t#WebChannel = null;\r\n\t#SocketChannel = null;\r\n\r\n\t#headers = null;\r\n\t#querys = null;\r\n\r\n\t#id = null;\r\n\r\n\tconstructor(cfg) {\r\n\r\n\t\tcfg = cfg || {};\r\n\r\n\t\tif (!cfg.api) {\r\n\t\t\tthrow new Error(ERROR_API_UNDEFINED);\r\n\t\t}\r\n\r\n\t\tif (!cfg.service) {\r\n\t\t\tthrow new Error(ERROR_SVC_UNDEFINED);\r\n\t\t}\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tme.#cfg = null;\r\n\t\tme.#isWSAPI = false;\r\n\t\tme.#isWebChannel = false;\r\n\t\tme.#isSocketChannel = false;\r\n\r\n\t\tme.#Security = null;\r\n\t\tme.#Generator = null;\r\n\t\tme.#WebChannel = null;\r\n\t\tme.#SocketChannel = null;\r\n\t\tme.#id = Date.now();\r\n\r\n\t\tme.#cfg = cfg;\r\n\t\tme.#isWSAPI = cfg.api === cfg.service && cfg.api.indexOf('ws') == 0;\r\n\r\n\t\tme.#headers = cfg.headers || {};\r\n\t\tme.#querys = cfg.querys || {};\r\n\r\n\t\tme.#isWebChannel = cfg.service.indexOf('http') === 0;\r\n\t\tme.#isSocketChannel = cfg.service.indexOf('ws') === 0;\r\n\r\n\t\tif ((me.isWebChannel || me.isSocketChannel) === false) {\r\n\t\t\tthrow new Error(ERROR_MESSAGE);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/*\r\n\t * Initialize engine, throws error,\r\n\t */\r\n\tasync init() {\r\n\r\n\t\tconst me = this;\r\n\t\tif (me.isActive) return;\r\n\r\n\t\tme.#Security = await Security.create();\r\n\t\tme.#Generator = new Generator(me.id);\r\n\r\n\t\tif (me.isWebChannel || me.isWSAPI == false) {\r\n\t\t\tme.#WebChannel = new WebChannel();\r\n\t\t\tawait me.WebChannel.init(me);\r\n\t\t}\r\n\r\n\t\tif (me.isSocketChannel) {\r\n\t\t\tme.#SocketChannel = new SocketChannel();\r\n\t\t\tawait me.SocketChannel.init(me);\r\n\t\t}\r\n\r\n\t\treturn me;\r\n\t}\r\n\r\n\t/**\r\n\t * Use internaly from channel to register received\r\n\t * API definitiona and security data\r\n\t */\r\n\tasync registerAPI(data) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\t// initialize encryption if provided\r\n\t\tif (data.signature) {\r\n\t\t\tawait me.Security?.init(data);\r\n\t\t}\r\n\r\n\t\tme.Generator?.build(data.api);\r\n\t}\r\n\r\n\t/**\r\n\t * Stop engine instance by clearing all references\r\n\t * stoping listeners, stoping socket is avaialble\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tme.WebChannel?.stop();\r\n\t\tme.SocketChannel?.stop();\r\n\t\tme.Generator?.stop();\r\n\r\n\t\tme.#WebChannel = null;\r\n\t\tme.#SocketChannel = null;\r\n\t\tme.#Generator = null;\r\n\t\tme.#Security = null;\r\n\t\tme.#cfg = null;\r\n\t}\r\n\r\n\t/*\r\n\t * Return generated API\r\n\t */\r\n\tget api() {\r\n\t\treturn this.Generator?.api || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Check if engine is active\r\n\t */\r\n\tget isActive() {\r\n\t\tconst me = this;\r\n\t\tif (me.SocketChannel && !me.SocketChannel.isOpen) return false;\r\n\t\treturn me.api && me.Security ? true : false;\r\n\t}\r\n\r\n\t/*\r\n\t * Return API URL address\r\n\t */\r\n\tget apiURL() {\r\n\t\treturn this.cfg?.api || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Return Service URL address\r\n\t */\r\n\tget serviceURL() {\r\n\t\treturn this.cfg?.service || null;\r\n\t}\r\n\r\n\tget cfg() { return this.#cfg };\r\n\tget isWSAPI() { return this.#isWSAPI };\r\n\tget isWebChannel() { return this.#isWebChannel };\r\n\tget isSocketChannel() { return this.#isSocketChannel };\r\n\r\n\tget Security() { return this.#Security; }\r\n\tget Generator() { return this.#Generator; }\r\n\tget WebChannel() { return this.#WebChannel; }\r\n\tget SocketChannel() { return this.#SocketChannel; }\r\n\r\n\tget headers() { return this.#headers; }\r\n\tget querys() { return this.#querys; }\r\n\tget id() { return this.#id; }\r\n\r\n\t/*\r\n\t * Static instance builder\r\n\t */\r\n\tstatic async init(cfg) {\r\n\t\tconst engine = new QuarkEngine(cfg);\r\n\t\treturn engine.init();\r\n\t}\r\n}\r\n"],"names":["Buffer","static","TextEncoder","TextDecoder","src","data","Array","Uint8Array","ArrayBuffer","String","fromText","toArrayBuffer","isString","test","b64","me","fromBase64","isHexString","fromHex","validateData","val","isText","decoder","decode","encoder","encode","value","arry","i","length","push","parseInt","substr","buffer","prototype","map","call","x","toString","slice","join","strbin","atob","bufView","strLen","charCodeAt","globalThis","btoa","EventExt","EventTarget","listeners","Set","list","type","listener","from","this","isFunction","filter","o","addEventListener","opt","add","super","removeEventListener","forEach","delete","unbind","clear","on","once","wrap","e","off","emit","evt","CustomEvent","detail","dispatchEvent","send","listen","unlisten","wait","Promise","r","fn","preventDefault","stopPropagation","Object","freeze","Event","Streams","isAvailable","CompressionStream","DecompressionStream","raw","encrypted","compressed","dataType","dv","DataView","setUint8","setUint32","set","security","toBinary","compressOrDefault","encrypt","toGS","isValid","isGS","getUint8","len","getUint32","byteLength","isCompress","isCompressFlag","isEncryptFlag","decrypt","decompress","arrayBuffer","isJson","Error","JSON","parse","toText","getUint16","isEncrypt","stream","byteArray","writer","writable","getWriter","write","close","Response","readable","encoding","compress","stringify","isGzip","isZlib","at","indexOf","first","trim","last","isJsonArray","isJsonObj","Security","name","namedCurve","publicKey","keyPair","aesKey","size","array","crypto","getRandomValues","subtle","generateKey","ECDH_TYPE","key","mode","der","use","split","importKey","ab","exportKey","toHex","signature","challenge","toBuffer","verify","hash","cookie","path","updateCookie","document","getChallenge","cfg","keyEnc","keyVer","async","verKey","initPublic","deriveAES","priv","pub","pubDef","public","derivedKey","AES_TYPE","deriveKey","toAlgo","iv","assign","counter","databin","result","decryptRaw","encryptRaw","initVerify","privateKey","getRandom","d","encryptAsBuffer","decryptAsBuffer","initKeyPair","preInit","init","Queue","Map","up","down","tid","updateRequest","req","reset","process","obj","unknown","isArray","res","execute","unkown","has","get","finish","Request","id","timeout","callback","constructor","object","property","bind","clearTimeout","setTimeout","Proxy","Generator","model","cnt","api","stop","detach","cleanup","k","el","_id_","values","build","buildAPI","v","buildInstance","tree","action","buildNamespace","namespace","reduce","methods","buildMethod","a","ar","objs","tmp","tmp2","every","instance","enc","n","c","m","l","apiFn","params","prop","args","arguments","isOverride","pop","isAsync","method","ts","Date","now","seal","resolve","reject","proxy","onResponse","success","generator","SocketChannel","queue","webSocket","engine","iid","startSocket","isOpen","readyState","OPEN","cmd","ping","msg","url","URL","serviceURL","querys","q","entries","searchParams","append","encodeURIComponent","WebSocket","binaryType","onCall","onopen","event","initPing","isWSAPI","registerAPI","onclose","clearInterval","onerror","onmessage","prepareBinaryMessage","prepareTextMessage","setInterval","message","unwrap","onMessage","WebChannel","getAPI","apiURL","isSocketChannel","onRequest","fetch","err","service","headers","resp","credentials","json","accept","MIME_BINARY","MIME_JSON","mime","head","CONTENT_TYPE","HEADERS_","Accept","body","isBin","includes","isPlain","txt","text","fetchCall","QuarkEngine","isWebChannel","isActive","create"],"mappings":"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"}