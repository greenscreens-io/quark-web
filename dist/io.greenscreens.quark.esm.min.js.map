{"version":3,"file":"io.greenscreens.quark.esm.min.js","sources":["../modules/core/Error.mjs","../modules/core/Buffer.mjs","../modules/core/Event.mjs","../modules/core/Streams.mjs","../modules/core/Security.mjs","../modules/core/Queue.mjs","../modules/core/Request.mjs","../modules/core/Generator.mjs","../modules/core/SocketChannel.mjs","../modules/core/WebChannel.mjs","../modules/core/QuarkEngine.mjs"],"sourcesContent":["/*\r\n * Copyright (C) 2015, 2024 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Custom Error to handle reponse structure\r\n */\r\nexport default class QuarkError extends Error {\r\n    \r\n    constructor(msg, data) {\r\n       super(msg);\r\n       const me = this;\r\n       me.name = me.constructor.name;\r\n       me.message = msg;       \r\n       me.data = data;\r\n       if (Error.captureStackTrace) {\r\n         Error.captureStackTrace(me, me.constructor);\r\n       }       \r\n    }\r\n    \r\n    static create(data) {\r\n\t\tlet msg = data.message || data.msg || data.error || '';\r\n\t\tif (data.code && msg.indexOf(data.code) < 0) msg = `${data.code} : ${msg}`;\r\n\t\treturn new QuarkError(msg, data);\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2023 Green Screens Ltd.\r\n */\r\n\r\nexport default class QuarkBuffer {\r\n\r\n\tstatic #encoder = new TextEncoder();\r\n\tstatic #decoder = new TextDecoder();\r\n\r\n\t/**\r\n\t * Detect data and convert to Uint8Array\r\n\t * \r\n\t * @param {variant}\r\n\t * @returns {variant}\r\n\t */\r\n\tstatic validateData(src) {\r\n\t\tlet data = null;\r\n\t\tif (src instanceof Array) {\r\n\t\t\tdata = new Uint8Array(src);\r\n\t\t} else if (src instanceof ArrayBuffer) {\r\n\t\t\tdata = new Uint8Array(src);\r\n\t\t} else if (src instanceof Uint8Array) {\r\n\t\t\tdata = src;\r\n\t\t} else if (src instanceof String || typeof src === 'string') {\r\n\t\t\tdata = QuarkBuffer.fromText(src);\r\n\t\t} else if (src.toArrayBuffer) {\r\n\t\t\tdata = new Uint8Array(src.toArrayBuffer());\r\n\t\t} else {\r\n\t\t\tthrow \"Invalid input, must be String or ArrayBuffer or Uint8Array\";\r\n\t\t}\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * Verify if data is string\r\n\t * @param {*} data \r\n\t * @returns \r\n\t */\r\n\tstatic isString(data) {\r\n\t\treturn typeof data === 'string';\r\n\t}\r\n\r\n\t/**\r\n\t * Check if string is hex string\r\n\t * @param {*} data \r\n\t * @returns \r\n\t */\r\n\tstatic isHexString(data) {\r\n\t\treturn QuarkBuffer.isString(data) ? (/^[0-9A-Fa-f]+$/g).test(data) : false;\r\n\t}\r\n\r\n\tstatic toBuffer(data, b64 = false) {\r\n\t\tconst me = QuarkBuffer;\r\n\t\tif (me.isString(data)) {\r\n\t\t\tif (b64) {\r\n\t\t\t\tdata = me.fromBase64(data);\r\n\t\t\t} else if (me.isHexString(data)) {\r\n\t\t\t\tdata = me.fromHex(data);\r\n\t\t\t} else {\r\n\t\t\t\tdata = me.fromText(data);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn me.validateData(data);\r\n\t}\r\n\r\n\tstatic toText(val) {\r\n\t\treturn QuarkBuffer.isText(val) ? val : QuarkBuffer.#decoder.decode(val);\r\n\t}\r\n\r\n\tstatic fromText(val) {\r\n\t\treturn QuarkBuffer.isText(val) ? QuarkBuffer.#encoder.encode(val) : val;\r\n\t}\r\n\r\n\tstatic isText(val) {\r\n\t\treturn typeof val === 'string';\r\n\t}\r\n\r\n\tstatic fromHex(value) {\r\n\r\n\t\tconst arry = [];\r\n\r\n\t\tfor (let i = 0; i < value.length; i += 2) {\r\n\t\t\tarry.push(parseInt(\"0x\" + value.substr(i, 2), 16));\r\n\t\t}\r\n\r\n\t\treturn new Uint8Array(arry);\r\n\t}\r\n\r\n\tstatic toHex(buffer) {\r\n\t\treturn Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('');\r\n\t}\r\n\r\n\tstatic fromBase64(value) {\r\n\r\n\t\tconst strbin = atob(value);\r\n\t\tconst buffer = new ArrayBuffer(strbin.length);\r\n\t\tconst bufView = new Uint8Array(buffer);\r\n\r\n\t\tfor (let i = 0, strLen = strbin.length; i < strLen; i++) {\r\n\t\t\tbufView[i] = strbin.charCodeAt(i);\r\n\t\t}\r\n\r\n\t\treturn bufView;\r\n\t}\r\n\r\n\tstatic toBase64(buffer) {\r\n\t\tbuffer = QuarkBuffer.toBuffer(buffer);\r\n\t\treturn btoa(buffer.reduce((data, val) => {\r\n\t\t\treturn data + String.fromCharCode(val);\r\n\t\t}, ''));\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * A module loading Event class\r\n * @module Events\r\n */\r\n\r\n/**\r\n * Extends native event by adding helper functions\r\n */\r\nexport default class QuarkEvent extends EventTarget {\r\n\r\n    #listeners = new Set();\r\n\r\n    #list(type = '', listener) {\r\n        const me = this;\r\n        const list = Array.from(me.#listeners);\r\n        return QuarkEvent.#isFunction(listener) ?\r\n            list.filter(o => o.type === type && o.listener === listener)\r\n            :\r\n            list.filter(o => o.type === type);\r\n    }\r\n\r\n    addEventListener(type, listener, opt) {\r\n        const me = this;\r\n        if (!QuarkEvent.#isFunction(listener)) return false;\r\n        me.#listeners.add({ type: type, listener: listener });\r\n        return super.addEventListener(type, listener, opt);\r\n    }\r\n\r\n    removeEventListener(type, listener) {\r\n        const me = this;\r\n        const list = me.#list(type, listener);\r\n        list.forEach(o => super.removeEventListener(o.type, o.listener))\r\n        list.forEach(o => me.#listeners.delete(o));\r\n    }\r\n\r\n    /**\r\n     * Remove all listeners\r\n     */\r\n    unbind() {\r\n        const me = this;\r\n        Array.from(me.#listeners).forEach(o => {\r\n            super.removeEventListener(o.type, o.listener);\r\n        });\r\n        me.#listeners.clear();\r\n    }\r\n\r\n    /**\r\n     * Listen for events\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    on(type = '', listener) {\r\n        return this.addEventListener(type, listener);\r\n    }\r\n\r\n    /**\r\n     * Listen for events only once\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    once(type, listener) {\r\n        const me = this;\r\n        let wrap = (e) => {\r\n            listener(e);\r\n            wrap = null;\r\n        }\r\n        wrap.type = type;\r\n        wrap.listener = listener;\r\n        return me.addEventListener(type, wrap, { once: true });\r\n    }\r\n\r\n    /**\r\n     * Stop listening for events\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    off(type = '', listener) {\r\n        return this.removeEventListener(type, listener);\r\n    }\r\n\r\n    /**\r\n     * Send event to listeners\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {object} data  Data to send \r\n     */\r\n    emit(type, data) {\r\n        if (!type) return false;\r\n        const evt = new CustomEvent(type, { detail: data });\r\n        return this.dispatchEvent(evt);\r\n    }\r\n\r\n    send(type, data) { this.emit(type, data); }\r\n    listen(type, listener) { this.on(type, listener); }\r\n    unlisten(type, listener) { this.off(type, listener); }\r\n\r\n    /**\r\n     * Wait for an event \r\n     * @param {string} type Event name to be listened\r\n     * @returns {Event}\r\n     */\r\n    wait(type = '') {\r\n        if (!type) return e('Event undefined!');\r\n        const me = this;\r\n        return new Promise((r, e) => {\r\n            me.once(type, (e) => r(e));\r\n        });\r\n    }\r\n\r\n    static #isFunction(fn) {\r\n        return typeof fn === 'function';\r\n    }\r\n\r\n    /**\r\n     * Generic prevent event bubling\r\n     * \r\n     * @param {Event} e \r\n     */\r\n    static prevent(e) {\r\n        if (QuarkEvent.#isFunction(e, 'preventDefault')) e.preventDefault();\r\n        if (QuarkEvent.#isFunction(e, 'stopPropagation')) e.stopPropagation();\r\n    }\r\n\r\n    static {\r\n        Object.freeze(QuarkEvent);\r\n    }\r\n\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport QuarkBuffer from './Buffer.mjs';\r\n\r\n/**\r\n * Browser native compression\r\n */\r\nexport default class QuarkStreams {\r\n\r\n\tstatic get isAvailable() {\r\n\t\treturn typeof CompressionStream !== 'undefined' &&\r\n\t\t\ttypeof DecompressionStream !== 'undefined';\r\n\t}\r\n\r\n\t/**\r\n\t * Stream header GS[version(5)][type(0|1|2|3)][len]\r\n\t * type: 0 - utf8 binary string, 1 - compressed, 2 - encrypted, 3 - 1 & 2\r\n\t * new Uint8Array([71, 83, 5, type, 0, 0, 0, 0]);\r\n\t * @param {Uint8Array} data\r\n\t * @returns {Uint8Array}\r\n\t */\r\n\tstatic #toGS(raw, encrypted = false, compressed = false) {\r\n\t\tif (!(raw instanceof Uint8Array)) return raw;\r\n\t\tconst type = QuarkStreams.#dataType(encrypted, compressed);\r\n\r\n\t\tconst data = new Uint8Array(8 + raw.length);\r\n\t\tconst dv = new DataView(data.buffer);\r\n\t\tdv.setUint8(0, 71);\r\n\t\tdv.setUint8(1, 83);\r\n\t\tdv.setUint8(2, 5);\r\n\t\tdv.setUint8(3, type);\r\n\t\tdv.setUint32(4, raw.length);\r\n\t\tdata.set(raw, 8);\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * Encode binary message to GS binary format\r\n\t * @param {*} raw \r\n\t * @param {*} security \r\n\t */\r\n\tstatic async wrap(raw, security) {\r\n\t\tconst me = QuarkStreams;\r\n\t\traw = me.toBinary(raw);\r\n\t\traw = await me.compressOrDefault(raw);\r\n\t\traw = await security.encrypt(raw);\r\n\t\traw = me.#toGS(raw, security.isValid, me.isAvailable);\r\n\t\t/*\r\n\t\tif (globalThis.QUARK_DEBUG) {\r\n\t\t\tconsole.log('DEBUG: Output :', QuarkBuffer.toHex(raw));\r\n\t\t}\r\n\t\t*/\r\n\t\treturn raw;\r\n\t}\r\n\r\n\t/**\r\n\t * Decode binary message from GS binary format\r\n\t * @param {*} raw \r\n\t * @param {*} security \r\n\t */\r\n\tstatic async unwrap(raw, security, challenge) {\r\n\r\n\t\tif (raw instanceof Uint8Array) raw = raw.buffer;\r\n\r\n\t\t/*\r\n\t\tif (globalThis.QUARK_DEBUG) {\r\n\t\t\tconsole.log('DEBUG: Input :', QuarkBuffer.toHex(raw));\r\n\t\t}\r\n\t\t*/\r\n\t\tconst me = QuarkStreams;\r\n\t\tconst dv = new DataView(raw);\r\n\t\tconst isGS = me.#isGS(dv);\r\n\r\n\t\traw = me.toBinary(raw);\r\n\t\tif (!isGS) return raw;\r\n\r\n\t\tconst type = dv.getUint8(3);\r\n\t\tconst len = dv.getUint32(4);\r\n\r\n\t\tif (dv.byteLength !== len + 8) return raw;\r\n\r\n\t\traw = raw.slice(8);\r\n\r\n\t\tconst isCompress = me.isCompressFlag(type);\r\n\t\tconst isEncrypt = me.isEncryptFlag(type);\r\n\t\tconst isApi = me.isApiFlag(type);\r\n\r\n\t\tlet api = null;\r\n\t\tif (isApi) {\r\n\t\t\tconst encLen = dv.getUint32(8);\r\n\t\t\tconst verLen = dv.getUint32(8 + 4 + encLen);\r\n\t\t\tconst sgnLen = dv.getUint32(8 + 4 + encLen + 4 + verLen);\r\n\r\n\t\t\tapi = {\r\n\t\t\t\tchallenge: challenge,\r\n\t\t\t\tkeyEnc: (raw.slice(4, 4 + encLen)),\r\n\t\t\t\tkeyVer: (raw.slice(4 + encLen + 4, 4 + encLen + 4 + verLen)),\r\n\t\t\t\tsignature: (raw.slice(4 + encLen + 4 + verLen + 4, 4 + encLen + 4 + verLen + 4 + sgnLen))\r\n\t\t\t};\r\n\r\n\t\t\tawait security.init(api);\r\n\t\t\traw = raw.slice((4 * 3) + encLen + verLen + sgnLen);\r\n\t\t}\r\n\r\n\r\n\t\tif (isEncrypt) {\r\n\t\t\traw = await security?.decrypt(raw);\r\n\t\t}\r\n\r\n\t\tif (isCompress) {\r\n\t\t\traw = await me.decompress(raw).arrayBuffer();\r\n\t\t}\r\n\r\n\t\traw = me.toBinary(raw);\r\n\t\tif (!me.isJson(raw)) throw new Error('Invalid response');\r\n\r\n\t\treturn JSON.parse(QuarkBuffer.toText(raw));\r\n\t}\r\n\r\n\t/**\r\n\t * Check if DataView id GS data format\r\n\t * @param {*} dv \r\n\t * @returns \r\n\t */\r\n\tstatic #isGS(dv) {\r\n\t\treturn dv.byteLength > 8 && dv.getUint16(0) === 18259 && dv.getUint8(2) === 5;\r\n\t}\r\n\r\n\tstatic isCompressFlag(type) {\r\n\t\treturn (type & 1) === 1;\r\n\t}\r\n\r\n\tstatic isEncryptFlag(type) {\r\n\t\treturn (type & 2) === 2;\r\n\t}\r\n\r\n\tstatic isApiFlag(type) {\r\n\t\treturn (type & 4) === 4;\r\n\t}\r\n\r\n\tstatic #dataType(isEncrypt, isCompress) {\r\n\t\tconst type = isCompress ? 1 : 0;\r\n\t\treturn type | (isEncrypt ? 2 : 0);\r\n\t}\r\n\r\n\tstatic #stream(data, stream) {\r\n\t\tconst me = QuarkStreams;\r\n\t\tconst byteArray = me.toBinary(data);\r\n\t\tconst writer = stream.writable.getWriter();\r\n\t\twriter.write(byteArray);\r\n\t\twriter.close();\r\n\t\treturn new Response(stream.readable);\r\n\t}\r\n\r\n\t/**\r\n\t * If compression available, compress, \r\n\t * else return original value\r\n\t * @param {*} data \r\n\t * @param {*} encoding \r\n\t */\r\n\tstatic async compressOrDefault(data, encoding = 'gzip') {\r\n\t\tconst me = QuarkStreams;\r\n\t\tif (!me.isAvailable) return data;\r\n\t\ttry {\r\n\t\t\tconst raw = await me.compress(data, encoding).arrayBuffer();\r\n\t\t\treturn me.toBinary(raw);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Compression failed:', error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If decompression available, decompress, \r\n\t * else return original value\r\n\t * @param {*} data \r\n\t * @param {*} encoding \r\n\t */\r\n\tstatic async decompressOrDefault(data, encoding = 'gzip') {\r\n\t\tconst me = QuarkStreams;\r\n\t\tif (!me.isAvailable) return data;\r\n\t\ttry {\r\n\t\t\tconst raw = await me.decompress(data, encoding).arrayBuffer();\r\n\t\t\treturn me.toBinary(raw);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Decompression failed:', error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Compress to gzip format\r\n\t * @param {*} data \r\n\t * @param {*} encoding gzip | deflate (zlib)\r\n\t * @returns {Response} \r\n\t */\r\n\tstatic compress(data, encoding = 'gzip') {\r\n\t\tconst stream = new CompressionStream(encoding);\r\n\t\treturn QuarkStreams.#stream(data, stream);\r\n\t}\r\n\r\n\t/**\r\n\t * Decompress from gzip format\r\n\t * @param {*} data \r\n\t * @param {*} encoding gzip | deflate (zlib)\r\n\t * @returns {Response} \r\n\t */\r\n\tstatic decompress(data, encoding = 'gzip') {\r\n\t\tconst stream = new DecompressionStream(encoding);\r\n\t\treturn QuarkStreams.#stream(data, stream);\r\n\t}\r\n\r\n\tstatic toBinary(data) {\r\n\t\tif (data instanceof Uint8Array) return data;\r\n\t\tif (data instanceof ArrayBuffer) return new Uint8Array(data);\r\n\t\tif (typeof data === 'string') return QuarkBuffer.fromText(data);\r\n\t\treturn QuarkStreams.toBinary(JSON.stringify(data));\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 2 bytes mathes gzip/deflate header signature\r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\r\n\tstatic isCompressed(data) {\r\n\t\tconst me = QuarkStreams;\r\n\t\tdata = me.toBinary(data);\r\n\t\treturn me.isGzip(data); // || me.isZlib(data);\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 3 bytes matches gzip header signature\r\n\t * \r\n\t * zlib\r\n\t * 1F 8B 08\r\n\t * 31 139 8\r\n\t * \r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\r\n\tstatic isGzip(data) {\r\n\t\treturn data.at(0) === 31 && data.at(1) === 139 && data.at(2) === 8;\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 2 bytes matches deflate (zlib) header signature\r\n\t * \r\n\t * deflate\r\n\t * 78  (01, 5e,9c, da) \r\n\t * 120 (1, 94, 156, 218)\r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\r\n\tstatic isZlib(data) {\r\n\t\treturn data.at(0) === 120 && [1, 94, 156, 218].indexOf(data.at(1)) > -1;\r\n\t}\r\n\r\n\tstatic isJson(data) {\r\n\t\tconst me = QuarkStreams;\r\n\t\tdata = typeof data === 'string' ? data.trim() : me.toBinary(data);\r\n\t\tconst first = data.at(0);\r\n\t\tconst last = data.at(data.length - 1);\r\n\t\treturn me.#isJsonArray(first, last) || me.#isJsonObj(first, last);\r\n\t}\r\n\r\n\tstatic #isJsonObj(first, last) {\r\n\t\treturn (first === '{' || first === 123) && (last === '}' || last === 125);\r\n\t}\r\n\r\n\tstatic #isJsonArray(first, last) {\r\n\t\treturn (first === '[' || first === 91) && (last === ']' || last === 93);\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2023 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Security engine using Web Crypto API to encrypt / decrypt\r\n * messages between browser and server.\r\n *\r\n */\r\n\r\nimport QuarkBuffer from \"./Buffer.mjs\";\r\n\r\nexport default class QuarkSecurity {\r\n\r\n    static #ECDH_TYPE = { name: 'ECDH', namedCurve: \"P-256\" };\r\n    static #ECDSA_TYPE = { name: 'ECDSA', namedCurve: \"P-384\" };\r\n    static #VERIFY = { name: 'ECDSA', hash: \"SHA-384\" };\r\n    static #AES_TYPE = { name: \"AES-CTR\", length: 256 };\r\n    static #COOKIE_KEY = 'gs-public-key';\r\n\r\n    #publicKey = null;\r\n    #keyPair = null;\r\n    #aesKey = null;\r\n\r\n    /**\r\n     * Create random bytes\r\n     *\r\n     * @param {int} size\r\n     *     length of data (required)\r\n     */\r\n    static getRandom(size) {\r\n        const array = new Uint8Array(size);\r\n        crypto.getRandomValues(array);\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * Initialize browser ECDH key pair \r\n     */\r\n    static initKeyPair() {\r\n        const use = ['deriveKey', 'deriveBits'];\r\n        return crypto.subtle.generateKey(Security.#ECDH_TYPE, true, use);\r\n    }\r\n\r\n    /**\r\n     * Import Async key received from server\r\n     * Key is publicKey used to send encrypted AES key\r\n     *\r\n     * @param {String} key PEM encoded key\r\n     * @param {Object} type Crypto API key definition format\r\n     * @param {String} mode Comma separted list of key usages \r\n     */\r\n    static async importKey(key, type, mode) {\r\n        const der = QuarkBuffer.toBuffer(key, true);\r\n        const use = mode ? mode.split(',') : [];\r\n        return crypto.subtle.importKey('spki', der, type, true, use);\r\n    }\r\n\r\n    /**\r\n     * Export key in hex form\r\n     * @param {CryptoKey} key\r\n     * @returns {string}\r\n     */\r\n    static async exportKey(key) {\r\n        const ab = await crypto.subtle.exportKey('raw', key);\r\n        return QuarkBuffer.toHex(ab);\r\n    }\r\n\r\n    /**\r\n     * Verify signature\r\n     *\r\n     * @param {CryptoKey} Public key used for verification\r\n     * @param {ArrayBuffer} signature Signature of received data\r\n     * @param {ArrayBuffer} challenge Challenge to verify with signature (ts + pemENCDEC + pemVERSGN)\r\n     */\r\n    static async verify(key, signature, challenge) {\r\n        signature = QuarkBuffer.toBuffer(signature, true);\r\n        challenge = QuarkBuffer.toBuffer(challenge);\r\n        const type = QuarkSecurity.#VERIFY;\r\n        return crypto.subtle.verify(type, key, signature, challenge);\r\n    }\r\n\r\n    /**\r\n     * Sign data with HMAC\r\n     * @param {CryptoKey} Private key used for verification\r\n     * @param {ArrayBuffer} data Data to sign\r\n     */\r\n    static async sign(key, data) {\r\n        data = QuarkBuffer.toBuffer(data);\r\n        return crypto.subtle.sign('ECDSA', key, data);\r\n    }\r\n\r\n    get publicKey() { return this.#publicKey; }\r\n\r\n    setCookie(name, value) {\r\n\t\tconst cookie = this.isSecure ? '; SameSite=None; Secure' : '; SameSite=Lax';\r\n\t\tdocument.cookie = `${name}=${value}${cookie}`;\t\t\r\n\t}\r\n\t\r\n    cookie(path = \"/\") {\r\n        return `${QuarkSecurity.#COOKIE_KEY}=${this.cookieValue(path)}`;\r\n    }\r\n\r\n    cookieValue(path = \"/\") {\r\n        return `${this.#publicKey||''};path=${path}`;\r\n    }\r\n    \r\n    updateCookie(path = \"/\") {\r\n\t\tthis.setCookie(QuarkSecurity.#COOKIE_KEY, this.cookieValue(path));\r\n    }\r\n\r\n    /**\r\n     *  Use local challenge, to verify received data signature\r\n     *\r\n     *  @param {Object} cfg Data received from server contins public key and signature\r\n     */\r\n    #getChallenge(cfg) {\r\n        const me = this;\r\n        return [cfg.challenge || '', me.#toChallenge(cfg.keyEnc) || '', me.#toChallenge(cfg.keyVer) || ''].join('');\r\n    }\r\n\r\n    #toChallenge(val) {\r\n        return QuarkBuffer.isText(val) ? val : QuarkBuffer.toBase64(val);\r\n    }\r\n\r\n    async #initVerify(cfg) {\r\n        const me = this;\r\n        const type = QuarkSecurity.#ECDSA_TYPE;\r\n        const verKey = await QuarkSecurity.importKey(cfg.keyVer, type, 'verify');\r\n        const status = await QuarkSecurity.verify(verKey, cfg.signature, me.#getChallenge(cfg));\r\n        if (!status) throw new Error('Signature invalid');\r\n    }\r\n\r\n    /**\r\n     * Initialize server public key\r\n     * @param {object} cfg \r\n     */\r\n    #initPublic(cfg) {\r\n        return QuarkSecurity.importKey(cfg.keyEnc, QuarkSecurity.#ECDH_TYPE, '');\r\n    }\r\n\r\n    /**\r\n     * Derive shared secret from server public ECDH and browser keypair.private ECDH\r\n     * @returns {CryptoKey}\r\n     */\r\n    #deriveAES(priv, pub) {\r\n        const pubDef = { name: \"ECDH\", public: pub };\r\n        const use = ['encrypt', 'decrypt'];\r\n        const derivedKey = QuarkSecurity.#AES_TYPE;\r\n        const dbg = false; // globalThis.QUARK_DEBUG === true;\r\n        return crypto.subtle.deriveKey(pubDef, priv, derivedKey, dbg, use);\r\n    }\r\n\r\n    #toAlgo(iv) {\r\n        iv = QuarkBuffer.toBuffer(iv);\r\n        const type = Object.assign({ counter: iv }, QuarkSecurity.#AES_TYPE);\r\n        type.length = 128;\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Encrypt message with AES\r\n     * @param {CryptoKey} key \r\n     * @param {ArrayBuffer} iv IV as Hex string \r\n     * @param {ArrayBuffer} data as Hex string \r\n     */\r\n    async encryptRaw(key, iv, data) {\r\n        const databin = QuarkBuffer.toBuffer(data);\r\n        const type = this.#toAlgo(iv);\r\n        return crypto.subtle.encrypt(type, key, databin);\r\n    }\r\n\r\n    /**\r\n     * Decrypt AES encrypted message\r\n     * @param {CryptoKey} key \r\n     * @param {ArrayBuffer} iv IV as Hex string \r\n     * @param {ArrayBuffer} data as Hex string \r\n     */\r\n    async decryptRaw(key, iv, data) {\r\n        const databin = QuarkBuffer.toBuffer(data);\r\n        const type = this.#toAlgo(iv);\r\n        return crypto.subtle.decrypt(type, key, databin);\r\n    }\r\n\r\n    async decryptAsBuffer(key, iv, data) {\r\n        const result = await this.decryptRaw(key, iv, data);\r\n        return QuarkBuffer.toBuffer(result);\r\n    }\r\n\r\n    async encryptAsBuffer(key, iv, data) {\r\n        const result = await this.encryptRaw(key, iv, data);\r\n        return QuarkBuffer.toBuffer(result);\r\n    }\r\n\r\n    async decryptAsString(key, iv, data) {\r\n        const result = await this.decryptRaw(key, iv, data);\r\n        return QuarkBuffer.toText(result);\r\n    }\r\n\r\n    async encryptAsHex(key, iv, data) {\r\n        const result = await this.encryptRaw(key, iv, data);\r\n        return QuarkBuffer.toHex(result);\r\n    }\r\n\r\n    get isValid() {\r\n        const me = this;\r\n        return me.#publicKey !== null && me.#aesKey !== null;\r\n    }\r\n\r\n    get isSecure() {\r\n\t\treturn ['https:', 'wss:'].indexOf(location.protocol) > -1;\r\n\t}\r\n    \r\n    static get isAvailable() {\r\n        return crypto.subtle ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Initialize encryption and verification keys\r\n     * Verifies data signatures to prevent tampering\r\n     */\r\n    async init(cfg) {\r\n        if (!QuarkSecurity.isAvailable) {\r\n            console.log('Security mode not available, TLS protocol required.');\r\n            return;\r\n        }\r\n\r\n        console.log('Security Initializing...');\r\n        const me = this;\r\n\r\n        try {\r\n            await me.#initVerify(cfg);\r\n            const publicKey = await me.#initPublic(cfg);\r\n            me.#aesKey = await me.#deriveAES(me.#keyPair.privateKey, publicKey);\r\n            me.#keyPair = null;\r\n            console.log('Security Initialized!');\r\n        } catch (error) {\r\n            console.error('Security initialization failed:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Encrypt provided data\r\n     * @param {Uint8Array} data Data to encrypt\r\n     * @returns {Uint8Array} [head+iv+data]\r\n     */\r\n    async encrypt(data) {\r\n        const me = this;\r\n        if (!me.isValid) return data;\r\n        if (!(data instanceof Uint8Array)) return data;\r\n        const iv = QuarkSecurity.getRandom(16);\r\n        const d = await me.encryptAsBuffer(me.#aesKey, iv, data);\r\n\r\n        const raw = new Uint8Array(iv.length + d.length);\r\n        raw.set(iv, 0);\r\n        raw.set(d, iv.length);\r\n        return raw;\r\n    }\r\n\r\n    /**\r\n     * Decrypt received data in format {d:.., k:...}\r\n     *\r\n     * @param {ArrayBuffer|Uint8Array} data\r\n     * @param {ArrayBuffer|Uint8Array} iv\r\n     * @return \r\n     */\r\n    async decrypt(data, iv) {\r\n\r\n        const me = this;\r\n\r\n        if (!iv) {\r\n            iv = data.slice(0, 16);\r\n            data = data.slice(16);\r\n        }\r\n\r\n        return await me.decryptAsBuffer(me.#aesKey, iv, data);\r\n    }\r\n\r\n    async #preInit() {\r\n        const me = this;\r\n        me.#keyPair = await QuarkSecurity.initKeyPair();\r\n        me.#publicKey = await QuarkSecurity.exportKey(me.#keyPair.publicKey);\r\n    }\r\n\r\n    static async create(cfg) {\r\n        const security = new QuarkSecurity();\r\n        await security.#preInit();\r\n        if (cfg) await security.init(cfg);\r\n        return security;\r\n    }\r\n\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Queue to handle requests\r\n */\r\nexport default class QuarkQueue extends Map {\r\n\r\n\t#up = 0;\r\n\t#down = 0;\r\n\t#tid = 0;\r\n\r\n\t/**\r\n\t * Update counters and queue to link resposnes to requests\r\n\t * @param {Object} req\r\n\t *      Request data\r\n\t */\r\n\tupdateRequest(req) {\r\n\t\tconst me = this;\r\n\t\tme.#tid++;\r\n\t\tme.#up++;\r\n\t\treq.tid = me.#tid.toString();\r\n\t\tme.set(req.tid, req);\r\n\t}\r\n\r\n\t/**\r\n\t * Reset queue to remove old stalled elements\r\n\t */\r\n\treset() {\r\n\t\tconst me = this;\r\n\t\tif (me.#up > 50 && me.#down >= me.#up) {\r\n\t\t\tme.#up = 0;\r\n\t\t\tme.#down = 0;\r\n\t\t\tme.clear();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Process array of response records\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\tprocess(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst unknown = [];\r\n\r\n\t\tif (Array.isArray(obj)) {\r\n\t\t\tobj.forEach((o) => {\r\n\t\t\t\tconst res = me.execute(o);\r\n\t\t\t\tif (res) unknown.push(res);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconst o = me.execute(obj);\r\n\t\t\tif (o) unknown.push(o);\r\n\t\t}\r\n\r\n\t\treturn unknown;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Process single response record\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\texecute(obj) {\r\n\t\tconst me = this;\r\n\t\tconst tid = obj.tid;\r\n\t\tlet unknown = null;\r\n\r\n\t\tme.#down++;\r\n\r\n\t\tif (me.has(tid)) {\r\n\t\t\tconst req = me.get(tid);\r\n\t\t\ttry {\r\n\t\t\t\treq.finish(obj);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log(e);\r\n\t\t\t\treq.finish(e);\r\n\t\t\t} finally {\r\n\t\t\t\tme.delete(tid);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tunknown = obj;\r\n\t\t}\r\n\r\n\t\tme.reset();\r\n\r\n\t\treturn unknown;\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * API engine asynchronous request\r\n */\r\nexport default class QuarkRequest {\r\n\r\n    #id = 0;\r\n    #timeout = 0;\r\n    #callback;\r\n\r\n    constructor(timeout, callback) {\r\n        const me = this;\r\n        me.#callback = callback;\r\n        me.#timeout = timeout;\r\n        me.#init();\r\n    }\r\n\r\n    get(object, property) {\r\n        const me = this;\r\n        if (property === 'timeout') return me.timeout;\r\n        if (property === 'finish') return me.callback.bind(me);\r\n        return object[property];\r\n    }\r\n\r\n    callback(o) {\r\n        const me = this;\r\n        if (me.timeout) return;\r\n        me.#clear();\r\n        return me.#callback(o);\r\n    }\r\n\r\n    get timeout() {\r\n        return this.#timeout === true;\r\n    }\r\n\r\n    #clear() {\r\n        const me = this;\r\n        if (me.#id === 0) return;\r\n        clearTimeout(me.#id);\r\n    }\r\n\r\n    #init() {\r\n        const me = this;\r\n        if (me.#timeout === 0) return;\r\n        me.#id = setTimeout(() => {\r\n            me.#timeout = true;\r\n            try {\r\n                me.#callback(new Error('Call timeouted!'));\r\n            } catch (error) {\r\n                console.error('Callback execution failed:', error);\r\n            }\r\n        }, me.#timeout);\r\n    }\r\n\r\n    static wrap(data, timeout, callback) {\r\n        return new Proxy(data, new QuarkRequest(timeout, callback));\r\n    }\r\n}","/*\r\n * Copyright (C) 2015, 2024 Green Screens Ltd.\r\n */\r\n\r\nimport QuarkEvent from \"./Event.mjs\";\r\nimport Request from \"./Request.mjs\";\r\nimport QuarkError from './Error.mjs';\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to call remote services.\r\n * All Direct functions linked to defiend namespace\r\n */\r\nexport default class QuarkGenerator extends QuarkEvent {\r\n\r\n\t#model = {};\r\n\t#id = null;\r\n\t#cnt = 0;\r\n\t#timeout = 0;\r\n\r\n\tconstructor(id = 0, timeout = 0) {\r\n\t\tsuper();\r\n\t\tthis.#id = id;\r\n\t\tthis.#timeout = timeout;\r\n\t}\r\n\r\n\t/**\r\n\t * Return generated API structure and callers\r\n\t */\r\n\tget api() {\r\n\t\treturn this.#model;\r\n\t}\r\n\r\n\t/**\r\n\t * Disconnect generator from API callers\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\t\tme.off('call');\r\n\t\tme.off('api');\r\n\t\tme.off('raw');\r\n\t\tme.off('error');\r\n\t\tme.#detach();\r\n\t}\r\n\r\n\t#cleanup(obj, id) {\r\n\t\tfor (let k in obj) {\r\n\t\t\tlet el = obj[k];\r\n\t\t\tif (typeof el === 'object') {\r\n\t\t\t\tif (this.#cleanup(el, id)) obj[k] = null;\r\n\t\t\t} else if (el._id_ === id) {\r\n\t\t\t\tobj[k] = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Object.values(obj).filter(o => o != null).length === 0;\r\n\t}\r\n\r\n\t#detach() {\r\n\t\tconst me = this;\r\n\t\tme.#cleanup(me.#model, me.#id);\r\n\t\tme.#model = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Build JS object with callable functions that maps to Java side methods\r\n\t * Data is retrieved from API service\r\n\t *\r\n\t * @param {String} url || api object\r\n\t * \t\t  URL Address for API service definitions\r\n\t */\r\n\tbuild(o) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst data = o ? o.api || o : null;\r\n\r\n\t\tif (data) me.#buildAPI(data);\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * From API tree generate namespace tree and\r\n\t * links generated functions to WebScoket api calls\r\n\t *\r\n\t * @param {Object} cfg\r\n\t * \t\tAlternative definition to API\r\n\t */\r\n\t#buildAPI(cfg) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (Array.isArray(cfg)) {\r\n\t\t\tcfg.forEach(v => me.#buildInstance(v));\r\n\t\t} else {\r\n\t\t\tme.#buildInstance(cfg);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Build from single definition\r\n\t *\r\n\t * @param {Object} api\r\n\t * \t\t  Java Class/Method definition\r\n\t */\r\n\t#buildInstance(api) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet tree = null;\r\n\t\tlet action = null;\r\n\r\n\t\ttree = me.#buildNamespace(api.namespace);\r\n\r\n\t\tif (!tree[api.action]) {\r\n\t\t\ttree[api.action] = {};\r\n\t\t}\r\n\t\taction = tree[api.action];\r\n\r\n\t\tme.#reduce(api.methods)?.forEach(v => me.#buildMethod(action, v, me.#id));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Reduce duplicate methods with parameters overrides\r\n\t * @param {Array<Object>} list \r\n\t * @returns \r\n\t */\r\n\t#reduce(list) {\r\n\t\treturn list.reduce((a, v, i, ar) => {\r\n\r\n\t\t\tif (a.filter(r => r.name == v.name).length == 1) return a;\r\n\r\n\t\t\tconst objs = ar.filter(r => r.name == v.name);\r\n\t\t\tif (objs.length === 1) {\r\n\t\t\t\ta.push(v);\r\n\t\t\t\treturn a;\r\n\t\t\t}\r\n\r\n\t\t\tconst obj = objs.filter(r => r.name === v.name).reduce((a, v) => {\r\n\t\t\t\ta.mid.push(v.mid);\r\n\t\t\t\ta.len.push(v.len);\r\n\t\t\t\ta.async[v.len] = v.async;\r\n\t\t\t\treturn a;\r\n\t\t\t}, { name: v.name, mid: [], len: [], async: {} });\r\n\r\n\t\t\ta.push(obj);\r\n\t\t\treturn a\r\n\t\t}, []);\r\n\t}\r\n\r\n\t/**\r\n\t * Generate namespace object structure from string version\r\n\t *\r\n\t * @param  {String} namespace\r\n\t * \t\t\tTree structure delimited with dots\r\n\t *\r\n\t * @return {Object}\r\n\t * \t\t\tObject tree structure\r\n\t */\r\n\t#buildNamespace(namespace) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tlet tmp = globalThis;\r\n\t\tlet tmp2 = me.#model;\r\n\r\n\t\tnamespace.split('.').every(v => {\r\n\r\n\t\t\tif (!tmp[v]) tmp[v] = {};\r\n\t\t\ttmp = tmp[v];\r\n\r\n\t\t\tif (!tmp2[v]) tmp2[v] = tmp;\r\n\t\t\ttmp2 = tmp;\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn tmp;\r\n\t}\r\n\r\n\t/**\r\n\t * Build instance methods\r\n\t *\r\n\t * @param {String} instance\r\n\t * @param {Array} api\r\n\t * @param {String} id\r\n\t */\r\n\t#buildMethod(instance, api, id) {\r\n\r\n\t\tconst enc = api.encrypt === false ? false : true;\r\n\t\tconst cfg = {\r\n\t\t\tl: api.len,\r\n\t\t\ta: api.async || false,\r\n\t\t\tx: api.mid,\r\n\t\t\te: enc,\r\n\t\t\ti: id\r\n\t\t};\r\n\r\n\t\tinstance[api.name] = this.#apiFn(cfg);\r\n\t\tinstance[api.name]._id_ = id;\r\n\t\t// Object.freeze(instance[api.name]);\r\n\t}\r\n\r\n\t/**\r\n\t * Generic function used to attach for generated API\r\n\t *\r\n\t * @param {Array} params List of arguments from caller\r\n\t */\r\n\t#apiFn(params) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst prop = params;\r\n\r\n\t\tconst fn = function () {\r\n\r\n\t\t\tconst args = Array.prototype.slice.call(arguments);\r\n\r\n\t\t\t// overriden function with multiple param lengths\r\n\t\t\tconst isOverride = Array.isArray(prop.l);\r\n\r\n\t\t\tconst idx = isOverride ? prop.l.indexOf(args.length) : -1;\r\n\t\t\t\r\n\t\t\tconst handle = isOverride ? prop.x[idx] : prop.x;\t\t\t\r\n\t\t\tconst len = isOverride ? prop.l[idx] : prop.l;\r\n\t\t\tconst isAsync = isOverride ? prop.a[idx] : prop.a;\r\n\t\t\tconst timeout = isAsync ? 0 : me.#timeout;\r\n\t\t\t\r\n\t\t\tif (args.length != len) throw new Error(`Invalid arguments length. Required (${prop.l})`);\r\n\t\t\tif (!handle) throw new Error('Invalid remote caller handle.');\r\n\r\n\t\t\tconst req = {\r\n\t\t\t\t\"handle\": handle,\r\n\t\t\t\t\"id\": prop.i,\r\n\t\t\t\t\"enc\": prop.e,\r\n\t\t\t\t\"data\": args,\r\n\t\t\t\t\"key\": ++me.#cnt,\r\n\t\t\t\t\"tid\": 0,\r\n\t\t\t\t\"ts\": Date.now()\r\n\t\t\t};\r\n\t\t\tObject.seal(req);\r\n\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst proxy = Request.wrap(req, timeout, (obj) => {\r\n\t\t\t\t\t\tme.#onResponse(obj, resolve, reject);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tme.emit('call', proxy);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.log(e);\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn fn;\r\n\t}\r\n\r\n\t/**\r\n\t * Process remote response\r\n\t */\r\n\t#onResponse(obj, resolve, reject) {\r\n\r\n\t\tif (obj instanceof Error) return reject(obj);\r\n\r\n\t\tconst result = obj.result || obj;\r\n\r\n\t\tif (result.success) {\r\n\t\t\tresolve(result);\r\n\t\t} else {\r\n\t\t\treject(QuarkError.create(result));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Static instance builder\r\n\t * @param {object} cfg Api list from server side Quark engine\r\n\t * @param {number} id Unique Quark Engine ID - to link functions to the engine instance\r\n\t * @returns \r\n\t */\r\n\tstatic build(cfg, id, timeout) {\r\n\t\tconst generator = new QuarkGenerator(id, timeout);\r\n\t\tgenerator.build(cfg);\r\n\t\treturn generator;\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport QuarkEvent from \"./Event.mjs\";\r\nimport QuarkQueue from \"./Queue.mjs\";\r\nimport QuarkStreams from \"./Streams.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to call remote services.\r\n * All Direct functions linked to io.greenscreens namespace\r\n */\r\nexport default class QuarkSocketChannel extends QuarkEvent {\r\n\r\n\t#challenge = Date.now();\r\n\t#queue = new QuarkQueue();\r\n\t#webSocket = null;\r\n\t#engine = null;\r\n\t#iid = 0;\r\n\r\n\t/**\r\n\t * Initialize Socket channel\r\n\t */\r\n\tasync init(engine) {\r\n\r\n\t\tconst me = this;\r\n\t\tme.stop();\r\n\t\tme.#engine = engine;\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tme.#startSocket(resolve, reject);\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tget isOpen() {\r\n\t\tconst me = this;\r\n\t\tif (me.#webSocket == null) return false;\r\n\t\treturn me.#webSocket.readyState === me.#webSocket.OPEN;\r\n\t}\r\n\r\n\t/**\r\n\t * Close WebSocket channel if available\r\n\t */\r\n\tstop() {\r\n\t\tconst me = this;\r\n\t\tif (me.#webSocket == null) return false;\r\n\t\tme.#webSocket.close();\r\n\t\tme.#webSocket = null;\r\n\t\tme.#engine = null;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Must be here, if encryption and compression is not available, \r\n\t * for server to regoznize Quark data format.\r\n\t * @param {*} req \r\n\t * @returns \r\n\t */\r\n\t#wrap(cmd, req) {\r\n\t\tconst data = {\r\n\t\t\ttype: 'GS',\r\n\t\t\tcmd: cmd,\r\n\t\t\tdata: req ? [req] : null\r\n\t\t};\r\n\t\treturn JSON.stringify(data);\r\n\t}\r\n\r\n\tget #ping() {\r\n\t\treturn this.#wrap('ping');\r\n\t}\r\n\r\n\t/**\r\n\t * Prepare remote call, encrypt if available\r\n\t *\r\n\t * @param {Object} req\r\n\t *         Data to send (optionaly encrypt)\r\n\t */\r\n\tasync #onCall(req) {\r\n\r\n\t\treq = req.detail;\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (req.id !== me.#engine.id) return;\r\n\r\n\t\tme.#queue.updateRequest(req);\r\n\r\n\t\tconst msg = me.#wrap('data', req);\r\n\t\tconst raw = await QuarkStreams.wrap(msg, me.#engine.Security);\r\n\t\tme.#webSocket.send(raw);\r\n\t}\r\n\r\n\tasync #startSocket(resolve, reject) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tconst url = new URL(engine.serviceURL);\r\n\r\n\t\t// const headers = Object.assign({}, engine.headers || {});\r\n\t\tconst querys = Object.assign({}, engine.querys || {});\r\n\t\tquerys.q = me.#challenge;\r\n\t\tquerys.c = QuarkStreams.isAvailable;\r\n\r\n\t\tObject.entries(querys || {}).forEach((v) => {\r\n\t\t\tif (v[1]) url.searchParams.append(v[0], encodeURIComponent(v[1]));\r\n\t\t});\r\n\r\n\t\tengine.Security.updateCookie();\r\n\r\n\t\tme.#webSocket = new WebSocket(url.toString(), ['quark']);\r\n\t\tme.#webSocket.binaryType = \"arraybuffer\";\r\n\r\n\t\tconst onCall = me.#onCall.bind(me);\r\n\r\n\t\tme.#webSocket.onopen = (event) => {\r\n\r\n\t\t\tme.emit('online', event);\r\n\t\t\tgenerator.on('call', onCall);\r\n\t\t\tme.#initPing();\r\n\r\n\t\t\tif (!engine.isWSAPI) {\r\n\t\t\t\treturn resolve(true);\r\n\t\t\t}\r\n\r\n\t\t\tgenerator.once('api', async (e) => {\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst data = e.detail;\r\n\t\t\t\t\tdata.challenge = me.#challenge;\r\n\t\t\t\t\tawait engine.registerAPI(data);\r\n\t\t\t\t\tresolve(true);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\r\n\t\t};\r\n\r\n\t\tme.#webSocket.onclose = (event) => {\r\n\t\t\tgenerator.off('call', onCall);\r\n\t\t\tclearInterval(me.#iid);\r\n\t\t\tme.stop();\r\n\t\t\tme.emit('offline', event);\r\n\t\t}\r\n\r\n\t\tme.#webSocket.onerror = (event) => {\r\n\t\t\tgenerator.off('call', onCall);\r\n\t\t\treject(event);\r\n\t\t\tme.stop();\r\n\t\t\tme.emit('error', event);\r\n\t\t};\r\n\r\n\t\tme.#webSocket.onmessage = async (event) => {\r\n\t\t\ttry {\r\n\t\t\t\tif (event.data instanceof ArrayBuffer) {\r\n\t\t\t\t\tawait me.#prepareBinaryMessage(event.data);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tawait me.#prepareTextMessage(event.data);\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\te.data = event;\r\n\t\t\t\tgenerator.emit('error', e);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t#initPing() {\r\n\t\tconst me = this;\r\n\t\tme.#iid = setInterval(() => {\r\n\t\t\tme.send(me.#ping);\r\n\t\t}, 15 * 1000);\r\n\t}\r\n\r\n\tasync #prepareBinaryMessage(message) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst security = engine.Security;\r\n\r\n\t\ttry {\r\n\t\t\tmessage = await QuarkStreams.unwrap(message, security, me.#challenge);\r\n\t\t\tconst isJSON = QuarkStreams.isJson(message);\r\n\t\t\tif (!isJSON) return generator.emit('raw', message);\r\n\r\n\t\t\tif (Array.isArray(message)) {\r\n\t\t\t\tmessage.forEach(m => me.#onMessage(m));\r\n\t\t\t} else {\r\n\t\t\t\tme.#onMessage(message);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Failed to prepare binary message:', error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Parse and prepare received message for processing\r\n\t *\r\n\t * @param {String} mesasge\r\n\t *\r\n\t */\r\n\tasync #prepareTextMessage(message) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\ttry {\r\n\t\t\tconst isJSON = QuarkStreams.isJson(message);\r\n\t\t\tif (!isJSON) return generator.emit('raw', message);\r\n\r\n\t\t\tmessage = JSON.parse(message);\r\n\t\t\tif (Array.isArray(message)) {\r\n\t\t\t\tmessage.forEach(m => me.#onMessage(m));\r\n\t\t\t} else {\r\n\t\t\t\tme.#onMessage(message);\r\n\t\t\t}\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Failed to prepare text message:', error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Process received message\r\n\t *\r\n\t * @param {*} msg\r\n\t *\r\n\t */\r\n\tasync #onMessage(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet data = null;\r\n\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tif (obj.cmd === 'api') {\r\n\t\t\treturn generator.emit('api', obj.data);\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'err') {\r\n\t\t\treturn generator.emit('error', obj.result);\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'data') {\r\n\t\t\tdata = obj.data;\r\n\t\t}\r\n\r\n\t\tif (data) {\r\n\t\t\tconst unknown = me.#queue.process(data);\r\n\t\t\tunknown.forEach((obj) => me.emit('message', obj));\r\n\t\t} else {\r\n\t\t\tme.emit('message', data);\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport QuarkStreams from \"./Streams.mjs\";\r\n\r\n/**\r\n * Web Requester Engine\r\n * Used to call remote services through HTTP/S\r\n */\r\nexport default class QuarkWebChannel {\r\n\r\n\tstatic #MIME_BINARY = 'application/octet-stream';\r\n\tstatic #MIME_JSON = 'application/json';\r\n\r\n\t#engine = null;\r\n\r\n\t/**\r\n\t * If http/s used in url, make standard fetch call to the defined service\r\n\t */\r\n\tasync init(engine) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (me.#engine) me.stop();\r\n\r\n\t\tme.#engine = engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tconst data = await me.#getAPI(engine.apiURL);\r\n\t\tawait engine.registerAPI(data);\r\n\r\n\t\tif (engine.isSocketChannel) return;\r\n\r\n\t\tgenerator.on('call', me.#onRequest.bind(me));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Disengage listeners and links\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tme.#engine = null;\r\n\r\n\t\tengine.Generator.off('call');\r\n\t\tif (engine.isSocketChannel) return;\r\n\t\ttry {\r\n\t\t\tfetch(engine.serviceURL, {\r\n\t\t\t\tmethod: 'delete'\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Callback for API call request,\r\n\t * here we make remote API call\r\n\t */\r\n\tasync #onRequest(req) {\r\n\r\n\t\treq = req.detail;\r\n\t\tconst me = this;\r\n\t\tlet o = null;\r\n\r\n\t\tif (req.id !== me.#engine.id) return;\r\n\r\n\t\ttry {\r\n\t\t\to = await me.#onCall(me.#engine, req);\r\n\t\t\treq.finish(o);\r\n\t\t} catch (err) {\r\n\t\t\treq.finish(err);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Get API definition through HTTP/s channel\r\n\t *\r\n\t * @param {String} url\r\n\t * \t\t  URL Address for API service definitions\r\n\t */\r\n\tasync #getAPI(url) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst security = engine.Security;\r\n\t\tconst id = Date.now();\r\n\r\n\t\tconst headers = Object.assign({}, engine.headers || {}, { 'gs-challenge': id });\r\n\r\n\t\tif (security.publicKey) {\r\n\t\t\theaders['gs-public-key'] = security.publicKey;\r\n\t\t}\r\n\r\n\t\tconst res = await me.#fetchCall(url, null, headers, false, 'get');\r\n\t\tconst data = await me.#onResponse(res, id);\r\n\r\n\t\t// update local challenge for signature verificator\r\n\t\tdata.challenge = id.toString();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tget #accept() {\r\n\t\treturn `${QuarkWebChannel.#MIME_BINARY}, ${QuarkWebChannel.#MIME_JSON}`;\r\n\t}\r\n\r\n\t#mime(data) {\r\n\t\tconst isBinary = typeof data === 'string' ? false : true;\r\n\t\treturn isBinary ? QuarkWebChannel.#MIME_BINARY : QuarkWebChannel.#MIME_JSON;\r\n\t}\r\n\r\n\t/**\r\n\t * Send data to server with http/s channel\r\n\t */\r\n\tasync #fetchCall(url, data, head, isCompress, method = 'post') {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst CONTENT_TYPE = me.#mime(data);\r\n\r\n\t\tconst HEADERS_ = {\r\n\t\t\t'Accept': me.#accept,\r\n\t\t\t'Content-Type': CONTENT_TYPE,\r\n\t\t\t'Accept-Encoding': 'gzip,deflate,br'\r\n\t\t};\r\n\r\n\t\tif (isCompress && QuarkStreams.isAvailable) {\r\n\t\t\tdata = QuarkStreams.toBinary(data);\r\n\t\t\tdata = await QuarkStreams.compressOrDefault(data);\r\n\t\t\tHEADERS_['Content-Encoding'] = 'gzip';\r\n\t\t}\r\n\r\n\t\tconst service = new URL(url);\r\n\t\tconst headers = Object.assign({}, engine.headers || {}, HEADERS_, head || {});\r\n\t\tconst querys = Object.assign({}, engine.querys || {});\r\n\r\n\t\tconst req = {\r\n\t\t\tmethod: method,\r\n\t\t\theaders: headers\r\n\t\t};\r\n\r\n\t\tif (data) req.body = data;\r\n\r\n\t\tObject.entries(querys || {}).forEach((v) => {\r\n\t\t\tservice.searchParams.append(v[0], encodeURIComponent(v[1]));\r\n\t\t});\r\n\r\n\t\ttry {\r\n\t\t\treturn await fetch(service.toString(), req);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Fetch call failed:', error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tasync #onResponse(res, id) {\r\n\r\n\t\tlet obj = await QuarkWebChannel.fromResponse(res);\r\n\t\tif (obj instanceof Uint8Array) {\r\n\t\t\tobj = await QuarkStreams.unwrap(obj, this.#engine.Security, id);\r\n\t\t}\r\n\r\n\t\tif (obj && obj.type == 'ws' && obj.cmd === 'data') {\r\n\t\t\treturn obj.data;\r\n\t\t}\r\n\t\treturn obj;\r\n\t}\r\n\r\n\t/**\r\n\t * Prepare remote call, encrypt if available\r\n\t *\r\n\t * @param {String} url\r\n\t *        Service URL to receive data\r\n\t *\r\n\t * @param {Object} req\r\n\t *         Data to send (optionally encrypt)\r\n\t */\r\n\tasync #onCall(engine, req) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst security = engine.Security;\r\n\t\tconst url = engine.serviceURL;\r\n\r\n\t\tconst isEncrypt = security?.isValid;\r\n\t\tlet isCompress = false;\r\n\t\tlet raw = null;\r\n\r\n\t\tif (req) {\r\n\t\t\tif (isEncrypt) {\r\n\t\t\t\traw = await QuarkStreams.wrap(req, me.#engine.Security);\r\n\t\t\t} else {\r\n\t\t\t\traw = JSON.stringify(raw);\r\n\t\t\t\tisCompress = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst head = {};\r\n\r\n\t\tif (isEncrypt) {\r\n\t\t\thead['gs-public-key'] = security.publicKey;\r\n\t\t}\r\n\r\n\t\t// send and wait for response\r\n\t\tconst res = await me.#fetchCall(url, raw, head, isCompress);\r\n\t\tconst data = await me.#onResponse(res);\r\n\r\n\t\t// if error throw\r\n\t\tif (data.cmd == 'err') {\r\n\t\t\tthrow new Error(data.result.msg);\r\n\t\t}\r\n\r\n\t\t// return server response\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tstatic async fromResponse(res) {\r\n\r\n\t\tif (!res.ok) {\r\n\t\t\tthrow new Error(`${res.status} : ${res.statusText}`);\r\n\t\t}\r\n\r\n\t\tconst mime = res.headers.get('content-type') || '';\r\n\t\tconst isBin = mime.includes(QuarkWebChannel.#MIME_BINARY);\r\n\t\tconst isJson = mime.includes(QuarkWebChannel.#MIME_JSON);\r\n\t\tconst isPlain = !isBin && !isJson;\r\n\r\n\t\tif (isJson) return await res.json();\r\n\t\tif (isPlain) return await res.text();\r\n\r\n\t\tconst raw = await res.arrayBuffer();\r\n\t\treturn new Uint8Array(raw);\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport QuarkGenerator from \"./Generator.mjs\";\r\nimport QuarkSecurity from \"./Security.mjs\";\r\nimport QuarkSocketChannel from \"./SocketChannel.mjs\";\r\nimport QuarkWebChannel from \"./WebChannel.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to initialize remote API and remote services.\r\n */\r\nconst ERROR_MESSAGE = 'Invalid definition for Engine Remote Service';\r\nconst ERROR_API_UNDEFINED = 'API Url not defined!';\r\nconst ERROR_SVC_UNDEFINED = 'Service Url not defined!';\r\n\r\n/**\r\n * Main class for Quark Engine Client\r\n */\r\nexport default class QuarkEngine {\r\n\r\n\t#cfg = null;\r\n\t#isWSAPI = false;\r\n\t#isWebChannel = false;\r\n\t#isSocketChannel = false;\r\n\r\n\t#Security = null;\r\n\t#Generator = null;\r\n\t#WebChannel = null;\r\n\t#SocketChannel = null;\r\n\r\n\t#headers = null;\r\n\t#querys = null;\r\n\r\n\t#id = null;\r\n\r\n\tconstructor(cfg) {\r\n\r\n\t\tcfg = cfg || {};\r\n\r\n\t\tif (!cfg.api) {\r\n\t\t\tthrow new Error(ERROR_API_UNDEFINED);\r\n\t\t}\r\n\r\n\t\tif (!cfg.service) {\r\n\t\t\tthrow new Error(ERROR_SVC_UNDEFINED);\r\n\t\t}\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tme.#cfg = null;\r\n\t\tme.#isWSAPI = false;\r\n\t\tme.#isWebChannel = false;\r\n\t\tme.#isSocketChannel = false;\r\n\r\n\t\tme.#Security = null;\r\n\t\tme.#Generator = null;\r\n\t\tme.#WebChannel = null;\r\n\t\tme.#SocketChannel = null;\r\n\t\tme.#id = Date.now();\r\n\r\n\t\tme.#cfg = cfg;\r\n\t\tme.#isWSAPI = cfg.api === cfg.service && cfg.api.indexOf('ws') == 0;\r\n\r\n\t\tme.#headers = cfg.headers || {};\r\n\t\tme.#querys = cfg.querys || {};\r\n\r\n\t\tme.#Security = cfg.security instanceof QuarkSecurity ? cfg.security : null;\r\n\t\tme.#isWebChannel = cfg.service.indexOf('http') === 0;\r\n\t\tme.#isSocketChannel = cfg.service.indexOf('ws') === 0;\r\n\r\n\t\tif ((me.isWebChannel || me.isSocketChannel) === false) {\r\n\t\t\tthrow new Error(ERROR_MESSAGE);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/*\r\n\t * Initialize engine, throws error,\r\n\t */\r\n\tasync init() {\r\n\r\n\t\tconst me = this;\r\n\t\tif (me.isActive) return;\r\n\r\n\t\ttry {\r\n\t\t\tif (!me.#Security) me.#Security = await QuarkSecurity.create();\r\n\t\t\tme.#Generator = new QuarkGenerator(me.id);\r\n\r\n\t\t\tif (me.isWebChannel || me.isWSAPI == false) {\r\n\t\t\t\tme.#WebChannel = new QuarkWebChannel();\r\n\t\t\t\tawait me.WebChannel.init(me);\r\n\t\t\t}\r\n\r\n\t\t\tif (me.isSocketChannel) {\r\n\t\t\t\tme.#SocketChannel = new QuarkSocketChannel();\r\n\t\t\t\tawait me.SocketChannel.init(me);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Engine initialization failed:', error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\r\n\t\treturn me;\r\n\t}\r\n\r\n\t/**\r\n\t * Use internaly from channel to register received\r\n\t * API definitions and security data\r\n\t */\r\n\tasync registerAPI(data) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\t// initialize encryption if provided\r\n\t\tif (data.signature && !me.Security?.isValid) {\r\n\t\t\tawait me.Security?.init(data);\r\n\t\t}\r\n\r\n\t\tme.Generator?.build(data.api);\r\n\t}\r\n\r\n\t/**\r\n\t * Stop engine instance by clearing all references\r\n\t * stoping listeners, stoping socket is avaialble\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tme.WebChannel?.stop();\r\n\t\tme.SocketChannel?.stop();\r\n\t\tme.Generator?.stop();\r\n\r\n\t\tme.#WebChannel = null;\r\n\t\tme.#SocketChannel = null;\r\n\t\tme.#Generator = null;\r\n\t\tme.#Security = null;\r\n\t\tme.#cfg = null;\r\n\t}\r\n\r\n\t/*\r\n\t * Return generated API\r\n\t */\r\n\tget api() {\r\n\t\treturn this.Generator?.api || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Check if engine is active\r\n\t */\r\n\tget isActive() {\r\n\t\tconst me = this;\r\n\t\tif (me.SocketChannel && !me.SocketChannel.isOpen) return false;\r\n\t\treturn me.api && me.Security ? true : false;\r\n\t}\r\n\r\n\t/*\r\n\t * Return API URL address\r\n\t */\r\n\tget apiURL() {\r\n\t\treturn this.cfg?.api || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Return Service URL address\r\n\t */\r\n\tget serviceURL() {\r\n\t\treturn this.cfg?.service || null;\r\n\t}\r\n\r\n\tget cfg() { return this.#cfg };\r\n\tget isWSAPI() { return this.#isWSAPI };\r\n\tget isWebChannel() { return this.#isWebChannel };\r\n\tget isSocketChannel() { return this.#isSocketChannel };\r\n\r\n\tget Security() { return this.#Security; }\r\n\tget Generator() { return this.#Generator; }\r\n\tget WebChannel() { return this.#WebChannel; }\r\n\tget SocketChannel() { return this.#SocketChannel; }\r\n\r\n\tget headers() { return this.#headers; }\r\n\tget querys() { return this.#querys; }\r\n\tget id() { return this.#id; }\r\n\r\n\t/*\r\n\t * Static instance builder\r\n\t */\r\n\tstatic async init(cfg) {\r\n\t\tconst engine = new QuarkEngine(cfg);\r\n\t\treturn engine.init();\r\n\t}\r\n}\r\n"],"names":["QuarkError","Error","constructor","msg","data","super","me","this","name","message","captureStackTrace","static","error","code","indexOf","QuarkBuffer","TextEncoder","TextDecoder","src","Array","Uint8Array","ArrayBuffer","String","fromText","toArrayBuffer","isString","test","b64","fromBase64","isHexString","fromHex","validateData","val","isText","decoder","decode","encoder","encode","value","arry","i","length","push","parseInt","substr","buffer","prototype","map","call","x","toString","slice","join","strbin","atob","bufView","strLen","charCodeAt","toBuffer","btoa","reduce","fromCharCode","QuarkEvent","EventTarget","listeners","Set","list","type","listener","from","isFunction","filter","o","addEventListener","opt","add","removeEventListener","forEach","delete","unbind","clear","on","once","wrap","e","off","emit","evt","CustomEvent","detail","dispatchEvent","send","listen","unlisten","wait","Promise","r","fn","preventDefault","stopPropagation","Object","freeze","QuarkStreams","isAvailable","CompressionStream","DecompressionStream","raw","encrypted","compressed","dataType","dv","DataView","setUint8","setUint32","set","security","toBinary","compressOrDefault","encrypt","toGS","isValid","challenge","isGS","getUint8","len","getUint32","byteLength","isCompress","isCompressFlag","isEncrypt","isEncryptFlag","api","isApiFlag","encLen","verLen","sgnLen","keyEnc","keyVer","signature","init","decrypt","decompress","arrayBuffer","isJson","JSON","parse","toText","getUint16","stream","byteArray","writer","writable","getWriter","write","close","Response","readable","encoding","compress","stringify","isGzip","at","first","trim","last","isJsonArray","isJsonObj","QuarkSecurity","namedCurve","hash","publicKey","keyPair","aesKey","size","array","crypto","getRandomValues","subtle","generateKey","Security","ECDH_TYPE","key","mode","der","use","split","importKey","ab","exportKey","toHex","VERIFY","verify","sign","setCookie","cookie","isSecure","document","path","COOKIE_KEY","cookieValue","updateCookie","getChallenge","cfg","toChallenge","toBase64","async","ECDSA_TYPE","verKey","initPublic","deriveAES","priv","pub","pubDef","public","derivedKey","AES_TYPE","deriveKey","toAlgo","iv","assign","counter","databin","result","decryptRaw","encryptRaw","location","protocol","initVerify","privateKey","getRandom","d","encryptAsBuffer","decryptAsBuffer","initKeyPair","preInit","QuarkQueue","Map","up","down","tid","updateRequest","req","reset","process","obj","unknown","isArray","res","execute","has","get","finish","QuarkRequest","id","timeout","callback","object","property","bind","clearTimeout","setTimeout","Proxy","QuarkGenerator","model","cnt","stop","detach","cleanup","k","el","_id_","values","build","buildAPI","v","buildInstance","tree","action","buildNamespace","namespace","methods","buildMethod","a","ar","objs","mid","tmp","globalThis","tmp2","every","instance","enc","l","apiFn","params","prop","args","arguments","isOverride","idx","handle","isAsync","ts","Date","now","seal","resolve","reject","proxy","Request","onResponse","success","create","generator","QuarkSocketChannel","queue","webSocket","engine","iid","startSocket","isOpen","readyState","OPEN","cmd","ping","Generator","url","URL","serviceURL","querys","q","c","entries","searchParams","append","encodeURIComponent","WebSocket","binaryType","onCall","onopen","event","initPing","isWSAPI","registerAPI","onclose","clearInterval","onerror","onmessage","prepareBinaryMessage","prepareTextMessage","setInterval","unwrap","m","onMessage","QuarkWebChannel","getAPI","apiURL","isSocketChannel","onRequest","fetch","method","err","headers","fetchCall","accept","MIME_BINARY","MIME_JSON","mime","head","CONTENT_TYPE","HEADERS_","Accept","service","body","fromResponse","ok","status","statusText","isBin","includes","isPlain","json","text","QuarkEngine","isWebChannel","WebChannel","SocketChannel","isActive"],"mappings":"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"}