{"version":3,"file":"io.greenscreens.quark.min.js","sources":["../modules/core/Buffer.mjs","../modules/core/EventExt.mjs","../modules/core/Streams.mjs","../modules/core/Security.mjs","../modules/core/Queue.mjs","../modules/core/Request.mjs","../modules/core/Generator.mjs","../modules/core/SocketChannel.mjs","../modules/core/WebChannel.mjs","../modules/core/QuarkEngine.mjs","../modules/index.mjs"],"sourcesContent":["/*\r\n * Copyright (C) 2015, 2023 Green Screens Ltd.\r\n */\r\n\r\nexport default class Buffer {\r\n\r\n\tstatic #encoder = new TextEncoder();\r\n\tstatic #decoder = new TextDecoder(); \r\n\r\n    /**\r\n     * Detect data and convert to Uint8Array\r\n     * \r\n     * @param {variant}\r\n     * @returns {variant}\r\n     */\r\n    static validateData(src) {\r\n        let data = null;\r\n        if (src instanceof Array) {\r\n            data = new Uint8Array(src);\r\n        } else if (src instanceof ArrayBuffer) {\r\n            data = new Uint8Array(src);\r\n        } else if (src instanceof Uint8Array) {\r\n            data = src;\r\n        } else if (src instanceof String || typeof src === 'string') {\r\n            data = Buffer.fromText(src);\r\n        } else if (src.toArrayBuffer) {\r\n            data = new Uint8Array(src.toArrayBuffer());\r\n        } else {\r\n            throw \"Invalid input, must be String or ArrayBuffer or Uint8Array\";\r\n        }\r\n        return data;\r\n    }\r\n    \r\n    /**\r\n     * Verify if data is string\r\n     * @param {*} data \r\n     * @returns \r\n     */\r\n     static isString(data) {\r\n        return typeof data === 'string';\r\n    }\r\n\r\n    /**\r\n     * Check if string is hex string\r\n     * @param {*} data \r\n     * @returns \r\n     */\r\n    static isHexString(data) {\r\n        return Buffer.isString(data) ? (/^[0-9A-Fa-f]+$/g).test(data) : false;\r\n    }\r\n    \r\n    static toBuffer(data, b64 = false) {\r\n        const me = Buffer;\r\n        if (me.isString(data)) {\r\n            if (b64) {\r\n                data = me.fromBase64(data);\r\n            } else  if (me.isHexString(data)) {\r\n                data = me.fromHex(data);\r\n            } else {\r\n                data = me.fromText(data);\r\n            }   \r\n        }  \r\n        return me.validateData(data);\r\n    }\r\n    \r\n\tstatic fromText(value) {\r\n\t\treturn Buffer.#encoder.encode(value);\r\n\t}\r\n\t\r\n\tstatic toText(value) {\r\n\t\treturn Buffer.#decoder.decode(value);\r\n\t}\r\n\t\r\n\tstatic fromHex(value) {\r\n\r\n\t\tconst arry = [];\r\n\r\n\t\tfor (let i = 0; i < value.length; i += 2) {\r\n\t\t\tarry.push(parseInt(\"0x\" + value.substr(i, 2), 16));\r\n\t\t}\r\n\r\n\t\treturn new Uint8Array(arry);\r\n\t}\r\n\r\n\tstatic toHex(buffer) {\r\n\t\treturn Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('');\r\n\t}\r\n\t\r\n\tstatic fromBase64(value) {\r\n\r\n\t\tconst strbin = atob(value);\r\n\t\tconst buffer = new ArrayBuffer(strbin.length);\r\n\t\tconst bufView = new Uint8Array(buffer);\r\n\r\n\t\tfor (let i = 0, strLen = strbin.length; i < strLen; i++) {\r\n\t\t\tbufView[i] = strbin.charCodeAt(i);\r\n\t\t}\r\n\r\n\t\treturn bufView;\r\n\t}\r\n\r\n\tstatic toBase64(buffer) {\r\n\t\treturn globalThis.btoa(new Uint8Array(buffer));\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * A module loading Event class\r\n * @module Events\r\n */\r\n\r\n/**\r\n * Extends native event by adding helper functions\r\n */\r\nexport default class EventExt extends EventTarget {\r\n\r\n    #listeners = new Set();\r\n\r\n    #list(type = '', listener) {\r\n        const me = this;\r\n        const list = Array.from(me.#listeners);\r\n        return EventExt.#isFunction(listener) ? \r\n            list.filter(o => o.type === type && o.listener === listener)\r\n            :\r\n            list.filter(o => o.type === type);\r\n    }\r\n\r\n    addEventListener(type, listener, opt) {\r\n        const me = this;\r\n        if (!EventExt.#isFunction(listener)) return false;\r\n        me.#listeners.add({ type: type, listener: listener });        \r\n        return super.addEventListener(type, listener, opt);\r\n    }\r\n\r\n    removeEventListener(type, listener) {\r\n        const me = this;\r\n        const list = me.#list(type, listener);\r\n        list.forEach(o => super.removeEventListener(o.type, o.listener))\r\n        list.forEach(o => me.#listeners.delete(o)); \r\n    }\r\n\r\n    /**\r\n     * Remove all listeners\r\n     */\r\n    unbind() {\r\n        const me = this;\r\n        Array.from(me.#listeners).forEach(o => {\r\n            super.removeEventListener(o.type, o.listener);\r\n        });\r\n        me.#listeners.clear();\r\n    }\r\n\r\n    /**\r\n     * Listen for events\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    on(type = '', listener) {\r\n        return this.addEventListener(type, listener);\r\n    }\r\n\r\n    /**\r\n     * Listen for events only once\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    once(type, listener) {\r\n        const me = this;\r\n        let wrap = (e) => {\r\n            listener(e);\r\n            wrap = null;\r\n        }\r\n        wrap.type = type;\r\n        wrap.listener = listener;\r\n        return me.addEventListener(type, wrap, { once: true });\r\n    }\r\n\r\n    /**\r\n     * Stop listening for events\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    off(type = '', listener) {\r\n        return this.removeEventListener(type, listener);\r\n    }\r\n\r\n    /**\r\n     * Send event to listeners\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {object} data  Data to send \r\n     */\r\n    emit(type, data) {\r\n        if (!type) return false;\r\n        const evt = new CustomEvent(type, { detail: data });\r\n        return this.dispatchEvent(evt);\r\n    }\r\n\r\n    send(type, data) {this.emit(type, data);}\r\n    listen(type, listener) {this.on(type, listener);}\r\n    unlisten(type, listener) {this.off(type, listener);}\r\n\r\n    /**\r\n     * Wait for an event \r\n     * @param {string} type Event name to be listened\r\n     * @returns {Event}\r\n     */\r\n\twait(type = '') {\r\n        if (!type) return e('Event undefined!');\r\n\t\tconst me = this;\r\n\t\treturn new Promise((r, e) => {\r\n\t\t\tme.once(type, (e) => r(e));\r\n\t\t});\r\n\t}\r\n \r\n    static #isFunction(fn) {\r\n        return typeof fn === 'function';\r\n    }\r\n\r\n\t/**\r\n\t * Generic prevent event bubling\r\n\t * \r\n\t * @param {Event} e \r\n\t */\r\n\tstatic prevent(e) {\r\n\t\tif (EventExt.#isFunction(e, 'preventDefault')) e.preventDefault();\r\n\t\tif (EventExt.#isFunction(e, 'stopPropagation')) e.stopPropagation();\r\n\t}\r\n\r\n    static {\r\n        Object.freeze(Event);\r\n    }\r\n\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Browser native compression\r\n */\r\nexport default class Streams {\r\n\r\n\tstatic get isAvailable() {\r\n\t\treturn typeof CompressionStream !== 'undefined' &&\r\n\t\t\ttypeof DecompressionStream !== 'undefined';\r\n\t}\r\n\r\n\tstatic convert(data) {\r\n\t\tif (data instanceof Uint8Array) return data;\r\n\t\tif (data instanceof ArrayBuffer) return new Uint8Array(data);\r\n\t\tif (typeof data === 'string' ) return new TextEncoder().encode(data);\r\n\t\tif (Array.isArray(data)) return new Uint8Array(data);\r\n\t\treturn this.convert(JSON.stringify(data));\r\n\t}\r\n\r\n\tstatic #stream(data, stream, decompress) {\r\n\t\tconst byteArray = this.convert(data);\r\n\t\tif (decompress && !this.isCompressed(byteArray)) return data;\r\n\t\tconst writer = stream.writable.getWriter();\r\n\t\twriter.write(byteArray);\r\n\t\twriter.close();\r\n\t\treturn new Response(stream.readable);\r\n\t}\r\n\r\n\t/**\r\n\t * Compress to gzip format\r\n\t * @param {*} data \r\n\t * @param {*} encoding gzip | deflate (zlib)\r\n\t * @returns {Response} \r\n\t */\t\r\n\tstatic compress(data, encoding = 'gzip') {\r\n\t\tconst stream = new CompressionStream(encoding);\r\n\t\treturn this.#stream(data, stream, false);\r\n\t}\r\n\r\n\t/**\r\n\t * Decompress from gzip format\r\n\t * @param {*} data \r\n\t * @param {*} encoding gzip | deflate (zlib)\r\n\t * @returns {Response} \r\n\t */\r\n\tstatic decompress(data, encoding = 'gzip') {\r\n\t\tconst stream = new DecompressionStream(encoding);\r\n\t\treturn this.#stream(data, stream, true);\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 2 bytes mathes gzip/deflate header signature\r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\r\n\tstatic isCompressed(data) {\r\n\t\tconst me = this;\r\n\t\tdata = me.convert(data);\r\n\t\treturn me.isGzip(data) || me.isZlib(data);\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 3 bytes matches gzip header signature\r\n\t * \r\n\t * zlib\r\n\t * 1F 8B 08\r\n\t * 31 139 8\r\n\t * \r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\t\r\n\tstatic isGzip(data) {\r\n\t\treturn data.at(0) === 31 && data.at(1) === 139 && data.at(2) === 8;\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 2 bytes matches deflate (zlib) header signature\r\n\t * \r\n\t * deflate\r\n\t * 78  (01, 5e,9c, da) \r\n\t * 120 (1, 94, 156, 218)\r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\t\r\n\tstatic isZlib(data) {\r\n\t\treturn data.at(0) === 120 && [1, 94, 156, 218].indexOf(data.at(1)) > -1;\r\n\t}\r\n\r\n\tstatic isJson(data) {\r\n\t\tconst me = this;\r\n\t\tdata = typeof data === 'string' ? data.trim() : me.convert(data);\r\n\t\tconst first = data.at(0);\r\n\t\tconst last = data.at(data.length - 1);\t\t\r\n\t\treturn me.#isJsonArray(first, last) || me.#isJsonObj(first, last);\r\n\t}\r\n\r\n\tstatic #isJsonObj(first, last) {\r\n\t\treturn (first === '{' || first === 123)  && (last === '}' || last === 125);\r\n\t}\r\n\r\n\tstatic #isJsonArray(first, last) {\r\n\t\treturn (first === '[' || first === 91)  && (last === ']' || last === 93);\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Security engine using Web Crypto API to encrypt / decrypt\r\n * messages between browser and server.\r\n *\r\n */\r\n\r\nimport Buffer from \"./Buffer.mjs\";\r\n\r\nexport default class Security {\r\n\r\n    static #ECDH_TYPE = { name: 'ECDH', namedCurve: \"P-256\" };\r\n    static #AES_TYPE= { name: \"AES-CTR\", length: 128 };\r\n    \r\n    #publicKey = null;\r\n    #aesKey = null;\r\n\r\n    get publicKey() { return this.#publicKey;}\r\n\r\n    cookie(path = \"/\") {\r\n        return `gs-public-key=${this.#publicKey||''};path=${path}`;\r\n    }\r\n\r\n    updateCookie(path = \"/\") {\r\n        document.cookie = this.cookie(path);\r\n    }\r\n\r\n    /**\r\n     *  Use local challenge, to verify received data signature\r\n     *\r\n     *  @param {Object} cfg Data received from server contins public key and signature\r\n     */\r\n    #getChallenge(cfg) {\r\n        return [cfg.challenge || '', cfg.keyEnc || '', cfg.keyVer || ''].join('');\r\n    }\r\n    \r\n    /**\r\n     * Import Async key received from server\r\n     * Key is publicKey used to send encrypted AES key\r\n     *\r\n     * @param {String} key PEM encoded key\r\n     * @param {Object} type Crypto API key definition format\r\n     * @param {String} mode Comma separted list of key usages \r\n     */\r\n    async importKey(key, type, mode) {\r\n        const der = Buffer.fromBase64(key);\r\n        const use = mode ? mode.split(',') : [];\r\n        return crypto.subtle.importKey('spki', der, type, true, use);\r\n    }\r\n    \r\n    /**\r\n     * Export key in hex form\r\n     * @param {CryptoKey} key\r\n     * @returns {string}\r\n     */\r\n    async exportKey(key) {\r\n        const ab = await crypto.subtle.exportKey('raw',  key);\r\n        return Buffer.toHex(ab);\r\n    }\r\n\r\n    /**\r\n     * Verify signature\r\n     *\r\n     * @param {CryptoKey} Public key used for verification\r\n     * @param {ArrayBuffer} signature Signature of received data\r\n     * @param {ArrayBuffer} challenge Challenge to verify with signature (ts + pemENCDEC + pemVERSGN)\r\n     */\r\n    async verify(key, signature, challenge) {\r\n        signature = Buffer.fromBase64(signature);\r\n        challenge = Buffer.toBuffer(challenge);\r\n        const type = { name: \"ECDSA\", hash: { name: \"SHA-384\" } };\r\n        return crypto.subtle.verify(type, key, signature, challenge);\r\n    }\r\n\r\n    async #initVerify(cfg) {\r\n        const me = this;\r\n        const type = { name: 'ECDSA', namedCurve: \"P-384\" };\r\n        const verKey = await me.importKey(cfg.keyVer, type, 'verify');\r\n        const status = await me.verify(verKey, cfg.signature, me.#getChallenge(cfg));\r\n        if (!status) throw new Error('Signature invalid');\r\n    }\r\n\r\n    /**\r\n     * Initialize server public key\r\n     * @param {object} cfg \r\n     */\r\n    #initPublic(cfg) {        \r\n        return this.importKey(cfg.keyEnc, Security.#ECDH_TYPE, '');\r\n    }\r\n\r\n    /**\r\n     * Initialize browser ECDH key pair \r\n     */\r\n    #initKeyPair() {\r\n        const use = ['deriveKey','deriveBits'];\r\n        return crypto.subtle.generateKey(Security.#ECDH_TYPE, true, use);\r\n    }\r\n\r\n    /**\r\n     * Derive shared secret from server public ECDH and browser keypair.private ECDH\r\n     * @returns {CryptoKey}\r\n     */\r\n    #deriveAES(priv, pub) {\r\n        const pubDef = { name: \"ECDH\", public: pub };\r\n        const use = ['encrypt', 'decrypt'];\r\n        const derivedKey = {name:'AES-CTR', length: 128};\r\n        return crypto.subtle.deriveKey(pubDef, priv, derivedKey, false, use);\r\n    }\r\n\r\n    /**\r\n\t * Create random bytes\r\n\t *\r\n\t * @param {int} size\r\n\t *     length of data (required)\r\n\t */\r\n\tgetRandom(size) {\r\n\t\tconst array = new Uint8Array(size);\r\n\t\tcrypto.getRandomValues(array);\r\n\t\treturn array;\r\n\t}\r\n\r\n    /**\r\n     * Encrypt message with AES\r\n     * @param {CryptoKey} key \r\n     * @param {String|ArrayBuffer} iv IV as Hex string \r\n     * @param {String|ArrayBuffer} data as Hex string \r\n     */\r\n    async encryptRaw(key, iv, data) {        \r\n        const ivbin = Buffer.toBuffer(iv);\r\n        const databin = Buffer.toBuffer(data);\r\n        const type = Object.assign({counter: ivbin}, Security.#AES_TYPE);\r\n        return crypto.subtle.encrypt(type, key, databin);\r\n    }\r\n\r\n    /**\r\n     * Decrypt AES encrypted message\r\n     * @param {CryptoKey} key \r\n     * @param {String|ArrayBuffer} iv IV as Hex string \r\n     * @param {String|ArrayBuffer} data as Hex string \r\n     */\r\n    async decryptRaw(key, iv, data) {\r\n        const ivbin = Buffer.toBuffer(iv);\r\n        const databin = Buffer.toBuffer(data);\r\n        const type = Object.assign({counter: ivbin}, Security.#AES_TYPE);\r\n        return crypto.subtle.decrypt(type, key, databin);\r\n    }\r\n\r\n    async decryptAsString(key, iv, data) {\r\n        const result = await this.decryptRaw(key, iv, data);\r\n        return Buffer.toText(result);\r\n    }\r\n\r\n    async encryptAsHex(key, iv, data) {   \r\n        const result = await this.encryptRaw(key, iv, data);\r\n        return Buffer.toHex(result);\r\n    }\r\n\r\n\tget isValid() {\r\n\t\tconst me = this;\r\n\t\treturn me.#publicKey !== null && me.#aesKey !== null;\r\n\t}\r\n\r\n\tstatic get isAvailable() {\r\n\t\treturn crypto.subtle ? true : false;\r\n\t}\r\n\r\n    /**\r\n     * Initialize encryption and verification keys\r\n     * Verifies data signatures to prevent tampering\r\n     */\r\n    async init(cfg) {\r\n\r\n\t\tif (!Security.isAvailable) {\r\n\t\t\tconsole.log('Security mode not available, TLS protocol required.');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconsole.log('Security Initializing...');\t\t\r\n        const me = this;\r\n\r\n        await me.#initVerify(cfg);\r\n\r\n        const publicKey = await me.#initPublic(cfg);\r\n        const keyPair = await me.#initKeyPair();\r\n        \r\n        me.#publicKey = await me.exportKey(keyPair.publicKey);\r\n        me.#aesKey = await me.#deriveAES(keyPair.privateKey, publicKey);\r\n        \r\n\t\tconsole.log('Security Initialized!');\r\n        \r\n    }\r\n\r\n    /**\r\n     * Data encryptor, encrypt aes with async and data with aes\r\n     */    \r\n    async encrypt(data) {\r\n\r\n\t\tdata = (typeof data === 'string') ? data : JSON.stringify(data);\r\n\r\n        const me = this;\r\n        const iv = me.getRandom(16);\r\n        \r\n        const d = await me.encryptAsHex(me.#aesKey, iv, data);\r\n        const k = Buffer.toHex(iv);\r\n\r\n        return { d: d, k: k, t: 1, b:6};\r\n\r\n    }\r\n\r\n\t/**\r\n\t * Decrypt received data in format {d:.., k:...}\r\n\t *\r\n\t * @param\r\n\t * \t\tcfg  - data elements to decrypt\r\n\t * \t\tcfg.d - aes encrypted server resposne\r\n\t * \t\tcfg.k - aes IV used for masking\r\n\t *\r\n\t */\r\n\tasync decrypt(cfg) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst iv = cfg.iv;\r\n\t\tconst data = cfg.d;\r\n\r\n\t\tconst message = await me.decryptAsString(me.#aesKey, iv, data);\r\n\t\tconst obj = JSON.parse(message);\r\n\r\n\t\tif (obj && obj.type == 'ws' && obj.cmd === 'data') {\r\n\t\t\treturn obj.data;\r\n\t\t}\r\n\r\n\t\treturn obj;\r\n\t}\r\n\r\n\tstatic async init(cfg) {\r\n\t\tconst security = new Security();\r\n\t\tawait security.init(cfg);\r\n\t\treturn security;\r\n\t}\r\n\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Queue to handle requests\r\n */\r\nexport default class Queue extends Map {\r\n\r\n\t#up = 0;\r\n\t#down = 0;\r\n\t#tid = 0;\r\n\r\n\t/**\r\n\t * Update counters and queue to link resposnes to requests\r\n\t * @param {Object} req\r\n\t *      Request data\r\n\t */\r\n\tupdateRequest(req) {\r\n\t\tconst me = this;\r\n\t\tme.#tid++;\r\n\t\tme.#up++;\r\n\t\treq.tid = me.#tid.toString();\r\n\t\tme.set(req.tid, req);\r\n\t}\r\n\r\n\t/**\r\n\t * Reset queue to remove old stalled elements\r\n\t */\r\n\treset() {\r\n\t\tconst me = this;\r\n\t\tif (me.#up > 50 && me.#down >= me.#up) {\r\n\t\t\tme.#up = 0;\r\n\t\t\tme.#down = 0;\r\n\t\t\tme.clear();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Process array of response records\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\tprocess(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst unknown = [];\r\n\r\n\t\tif (Array.isArray(obj)) {\r\n\t\t\tobj.forEach((o) => {\r\n\t\t\t\tconst res = me.execute(o);\r\n\t\t\t\tif (res) unkown.push(res);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconst o = me.execute(obj);\r\n\t\t\tif (o) unknown.push(o);\r\n\t\t}\r\n\r\n\t\treturn unknown;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Process single response record\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\texecute(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst tid = obj.tid;\r\n\t\tlet unknown = null;\r\n\r\n\t\tme.#down++;\r\n\r\n\t\tif (me.has(tid)) {\r\n\t\t\tconst req = me.get(tid);\r\n\t\t\ttry {\r\n\t\t\t\treq.finish(obj);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log(e);\r\n\t\t\t\treq.finish(e);\r\n\t\t\t} finally {\r\n\t\t\t\tme.delete(tid);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tunknown = obj;\r\n\t\t}\r\n\r\n\t\tme.reset();\r\n\r\n\t\treturn unknown;\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * API engine asynchronous request\r\n */\r\nexport default class Request {\r\n\r\n    #id = 0;\r\n    #timeout = 0;\r\n    #callback;\r\n    \r\n    constructor(timeout , callback) {\r\n        const me = this;\r\n        me.#callback = callback;\r\n        me.#timeout = timeout;\r\n        me.#init();\r\n    }\r\n\r\n    get(object, property) {\r\n        const me = this;\r\n        if (property === 'timeout') return me.timeout;\r\n        if (property === 'finish') return me.callback.bind(me);\r\n        return object[property];\r\n    }\r\n\r\n    callback(o) {\r\n        const me = this;\r\n        if (me.timeout) return;\r\n        me.#clear();\r\n        return me.#callback(o);\r\n    }\r\n\r\n    get timeout() {\r\n        return this.#timeout === true;\r\n    }\r\n\r\n    #clear() {\r\n        const me = this;\r\n        if (me.#id === 0) return;\r\n        clearTimeout(me.#id);\r\n    }\r\n\r\n    #init() {\r\n        const me = this;\r\n        if (me.#timeout === 0) return;\r\n        me.#id = setTimeout(() => {\r\n            me.#timeout = true;\r\n            me.#callback(new Error('Call timeouted!'));\r\n        }, me.#timeout);\r\n    }\r\n\r\n    static wrap(data, timeout , callback) {\r\n        return new Proxy(data, new Request(timeout , callback));\r\n    }\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport EventExt from \"./EventExt.mjs\";\r\nimport Request from \"./Request.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to call remote services.\r\n * All Direct functions linked to defiend namespace\r\n */\r\nexport default class Generator extends EventExt {\r\n\r\n\t#model = {};\r\n\t#id = null;\r\n\t#cnt = 0;\r\n\t#timeout = 0;\r\n\r\n\tconstructor(id = 0, timeout = 0) {\r\n\t\tsuper();\r\n\t\tthis.#id = id;\r\n\t\tthis.#timeout = timeout;\r\n\t}\r\n\r\n\t/**\r\n\t * Return generted API structure and callers\r\n\t */\r\n\tget api() {\r\n\t\treturn this.#model;\r\n\t}\r\n\r\n\t/**\r\n\t * Disconnect generator from API callers\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\t\tme.off('call');\r\n\t\tme.off('api');\r\n\t\tme.off('raw');\r\n\t\tme.off('error');\r\n\t\tme.#detach();\r\n\t}\r\n\r\n\t#cleanup(obj, id) {\r\n\t\tfor (let k in obj) {\r\n\t\t\tlet el = obj[k];\r\n\t\t\tif (typeof el === 'object') {\r\n\t\t\t\tif (this.#cleanup(el, id)) obj[k] = null;\r\n\t\t\t} else if (el._id_ === id) {\r\n\t\t\t\tobj[k] = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Object.values(obj).filter(o => o != null).length === 0;\r\n\t}\r\n\r\n\t#detach() {\r\n\t\tconst me = this;\r\n\t\tme.#cleanup(me.#model, me.#id);\r\n\t\tme.#model = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Build JS object with callable functions that maps to Java side methods\r\n\t * Data is retrieved from API service\r\n\t *\r\n\t * @param {String} url || api object\r\n\t * \t\t  URL Address for API service definitions\r\n\t */\r\n\tbuild(o) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst data = o ? o.api || o : null;\r\n\r\n\t\tif (data) me.#buildAPI(data);\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * From API tree generate namespace tree and\r\n\t * links generated functions to WebScoket api calls\r\n\t *\r\n\t * @param {Object} cfg\r\n\t * \t\tAlternative definition to API\r\n\t */\r\n\t#buildAPI(cfg) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (Array.isArray(cfg)) {\r\n\t\t\tcfg.forEach(v => me.#buildInstance(v));\r\n\t\t} else {\r\n\t\t\tme.#buildInstance(cfg);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Build from single definition\r\n\t *\r\n\t * @param {Object} api\r\n\t * \t\t  Java Class/Method definition\r\n\t */\r\n\t#buildInstance(api) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet tree = null;\r\n\t\tlet action = null;\r\n\r\n\t\ttree = me.#buildNamespace(api.namespace);\r\n\r\n\t\tif (!tree[api.action]) {\r\n\t\t\ttree[api.action] = {};\r\n\t\t}\r\n\t\taction = tree[api.action];\r\n\r\n\t\tme.#reduce(api.methods)?.forEach(v => me.#buildMethod(api.namespace, api.action, action, v, me.#id));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Reduce duplicate methods with parameters overrides\r\n\t * @param {Array<Object>} list \r\n\t * @returns \r\n\t */\r\n\t#reduce(list) {\r\n\t\treturn list.reduce((a, v, i, ar) => {\r\n\r\n\t\t\tif (a.filter(r => r.name == v.name).length == 1) return a;\r\n\r\n\t\t\tconst objs = ar.filter(r => r.name == v.name);\r\n\t\t\tif (objs.length === 1) {\r\n\t\t\t\ta.push(v);\r\n\t\t\t\treturn a;\r\n\t\t\t}\r\n\r\n\t\t\tconst obj = objs.filter(r => r.name === v.name).reduce((a, v) => {\r\n\t\t\t\ta.len.push(v.len);\r\n\t\t\t\ta.async[v.len] = v.async;\r\n\t\t\t\treturn a;\r\n\t\t\t}, { name: v.name, len: [], async: {} });\r\n\r\n\t\t\ta.push(obj);\r\n\t\t\treturn a\r\n\t\t}, []);\r\n\t}\r\n\r\n\t/**\r\n\t * Generate namespace object structure from string version\r\n\t *\r\n\t * @param  {String} namespace\r\n\t * \t\t\tTree structure delimited with dots\r\n\t *\r\n\t * @return {Object}\r\n\t * \t\t\tObject tree structure\r\n\t */\r\n\t#buildNamespace(namespace) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tlet tmp = globalThis;\r\n\t\tlet tmp2 = me.#model;\r\n\r\n\t\tnamespace.split('.').every(v => {\r\n\r\n\t\t\tif (!tmp[v]) tmp[v] = {};\r\n\t\t\ttmp = tmp[v];\r\n\r\n\t\t\tif (!tmp2[v]) tmp2[v] = tmp;\r\n\t\t\ttmp2 = tmp;\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn tmp;\r\n\t}\r\n\r\n\t/**\r\n\t * Build instance methods\r\n\t *\r\n\t * @param {String} namespace\r\n\t * @param {String} action\r\n\t * @param {String} instance\r\n\t * @param {Array} api\r\n\t */\r\n\t#buildMethod(namespace, action, instance, api, id) {\r\n\r\n\t\tconst enc = api.encrypt === false ? false : true;\r\n\t\tconst cfg = {\r\n\t\t\tn: namespace,\r\n\t\t\tc: action,\r\n\t\t\tm: api.name,\r\n\t\t\tl: api.len,\r\n\t\t\ta: api.async,\r\n\t\t\te: enc,\r\n\t\t\ti: id\r\n\t\t};\r\n\r\n\t\tinstance[api.name] = this.#apiFn(cfg);\r\n\t\tinstance[api.name]._id_ = id;\r\n\t\t// Object.freeze(instance[api.name]);\r\n\t}\r\n\r\n\t/**\r\n\t * Generic function used to attach for generated API\r\n\t *\r\n\t * @param {Array} params List of arguments from caller\r\n\t */\r\n\t#apiFn(params) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst prop = params;\r\n\r\n\t\tconst fn = function () {\r\n\r\n\t\t\tconst args = Array.prototype.slice.call(arguments);\r\n\t\t\t\r\n\t\t\t// overriden function with multiple param lengths\r\n\t\t\tconst isOverride = Array.isArray(prop.l);\r\n\t\t\t\r\n\t\t\tconst len = isOverride ? prop.l.filter(v => v === args.length).pop() : prop.l;\r\n\t\t\tif (args.length != len) throw new Error(`Invalid arguments length. Required (${prop.l})`);\r\n\r\n\t\t\tconst isAsync = isOverride ? prop.a[args.length] : prop.a;\r\n\t\t\tconst timeout = isAsync ? 0 : me.#timeout;\r\n\r\n\t\t\tconst req = {\r\n\t\t\t\t\"namespace\": prop.n,\r\n\t\t\t\t\"action\": prop.c,\r\n\t\t\t\t\"method\": prop.m,\r\n\t\t\t\t\"id\": prop.i,\r\n\t\t\t\t\"enc\": prop.e,\r\n\t\t\t\t\"data\": args,\r\n\t\t\t\t\"key\": ++me.#cnt,\r\n\t\t\t\t\"tid\": 0,\r\n\t\t\t\t\"ts\": Date.now()\r\n\t\t\t};\r\n\t\t\tObject.seal(req);\r\n\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst proxy = Request.wrap(req, timeout, (obj) => {\r\n\t\t\t\t\t\tme.#onResponse(obj, resolve, reject);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tme.emit('call', proxy);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.log(e);\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn fn;\r\n\t}\r\n\r\n\t/**\r\n\t * Process remote response\r\n\t */\r\n\t#onResponse(obj, resolve, reject) {\r\n\r\n\t\tif (obj instanceof Error) return reject(obj);\r\n\r\n\t\tconst result = obj.result || obj;\r\n\r\n\t\tif (result.success) {\r\n\t\t\tresolve(result);\r\n\t\t} else {\r\n\t\t\treject(result);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Static instance builder\r\n\t * @param {object} cfg Api list from server side Quark engine\r\n\t * @param {number} id Unique Quark Engine ID - to link functions to the engine instance\r\n\t * @returns \r\n\t */\r\n\tstatic build(cfg, id, timeout) {\r\n\t\tconst generator = new Generator(id, timeout);\r\n\t\tgenerator.build(cfg);\r\n\t\treturn generator;\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport EventExt from \"./EventExt.mjs\";\r\nimport Queue from \"./Queue.mjs\";\r\nimport Streams from \"./Streams.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to call remote services.\r\n * All Direct functions linked to io.greenscreens namespace\r\n */\r\nexport default class SocketChannel extends EventExt {\r\n\r\n\t#queue = new Queue();\r\n\t#webSocket = null;\r\n\t#engine = null;\r\n\r\n\t/**\r\n\t * Initialize Socket channel\r\n\t */\r\n\tasync init(engine) {\r\n\r\n\t\tconst me = this;\r\n\t\tme.stop();\r\n\t\tme.#engine = engine;\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tme.#startSocket(resolve, reject);\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tget isOpen() {\r\n\t\tconst me = this;\r\n\t\tif (me.#webSocket == null) return false;\r\n\t\treturn me.#webSocket.readyState === me.#webSocket.OPEN;\r\n\t}\r\n\r\n\t/**\r\n\t * Close WebSocket channel if available\r\n\t */\r\n\tstop() {\r\n\t\tconst me = this;\r\n\t\tif (me.#webSocket == null) return false;\r\n\t\tme.#webSocket.close();\r\n\t\tme.#webSocket = null;\r\n\t\tme.#engine = null;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Check if data can be encrypted\r\n\t *\r\n\t * @param {Object} req\r\n\t */\r\n\t#canEncrypt(req) {\r\n\t\tconst hasArgs = Array.isArray(req.data) && req.data.length > 0 && req.enc;\r\n\t\treturn this.#engine.Security.isValid && hasArgs;\r\n\t}\r\n\r\n\t/**\r\n\t * Prepare remote call, encrypt if avaialble\r\n\t *\r\n\t * @param {Object} req\r\n\t *         Data to send (optionaly encrypt)\r\n\t */\r\n\tasync #onCall(req) {\r\n\r\n\t\treq = req.detail;\r\n\r\n\t\tconst me = this;\r\n\t\tlet msg = null;\r\n\r\n\t\tif (req.id !== me.#engine.id) return;\r\n\r\n\t\tconst isEncrypt = me.#canEncrypt(req);\r\n\r\n\t\tme.#queue.updateRequest(req);\r\n\r\n\t\t// encrypt if supported\r\n\t\tif (isEncrypt) {\r\n\t\t\tconst enc = await me.#engine.Security.encrypt(req.data);\r\n\t\t\tconst payload = Object.assign({}, me.#engine.querys || {}, enc || {});\r\n\t\t\treq.data = [payload];\r\n\t\t}\r\n\r\n\t\tconst data = {\r\n\t\t\tcmd: isEncrypt ? 'enc' : 'data',\r\n\t\t\ttype: 'ws',\r\n\t\t\tdata: [req]\r\n\t\t};\r\n\r\n\t\tmsg = JSON.stringify(data);\r\n\r\n\t\tif (!Streams.isAvailable) {\r\n\t\t\treturn me.#webSocket.send(msg);\r\n\t\t}\r\n\r\n\t\tmsg = await Streams.compress(msg).arrayBuffer();\r\n\t\tme.#webSocket.send(msg);\r\n\t}\r\n\r\n\tasync #startSocket(resolve, reject) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\t\tconst security = engine.Security;\r\n\r\n\t\tconst challenge = Date.now();\r\n\t\tconst url = new URL(engine.serviceURL);\r\n\r\n\t\t// const headers = Object.assign({}, engine.headers || {});\r\n\t\tconst querys = Object.assign({}, engine.querys || {});\r\n\t\tquerys.q = challenge;\r\n\t\tquerys.c = Streams.isAvailable;\r\n\r\n\t\tObject.entries(querys || {}).forEach((v) => {\r\n\t\t\tif (v[1]) url.searchParams.append(v[0], encodeURIComponent(v[1]));\r\n\t\t});\r\n\r\n\t\tsecurity.updateCookie();\r\n\r\n\t\tme.#webSocket = new WebSocket(url.toString(), ['ws4is']);\r\n\t\tme.#webSocket.binaryType = \"arraybuffer\";\r\n\r\n\t\tconst onCall = me.#onCall.bind(me);\r\n\r\n\t\tme.#webSocket.onopen = (event) => {\r\n\r\n\t\t\tme.emit('online', event);\r\n\t\t\tgenerator.on('call', onCall);\r\n\r\n\t\t\tif (!engine.isWSAPI) {\r\n\t\t\t\treturn resolve(true);\r\n\t\t\t}\r\n\r\n\t\t\tgenerator.once('api', async (data) => {\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tdata.challenge = challenge;\r\n\t\t\t\t\tawait engine.registerAPI(data);\r\n\t\t\t\t\tresolve(true);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\r\n\t\t};\r\n\r\n\t\tme.#webSocket.onclose = (event) => {\r\n\t\t\tgenerator.off('call', onCall);\r\n\t\t\tme.stop();\r\n\t\t\tme.emit('offline', event);\r\n\t\t}\r\n\r\n\t\tme.#webSocket.onerror = (event) => {\r\n\t\t\tgenerator.off('call', onCall);\r\n\t\t\treject(event);\r\n\t\t\tme.stop();\r\n\t\t\tme.emit('error', event);\r\n\t\t};\r\n\r\n\t\tme.#webSocket.onmessage = async (event) => {\r\n\t\t\ttry {\r\n\t\t\t\tif (event.data instanceof ArrayBuffer) {\r\n\t\t\t\t\tawait me.#prepareBinaryMessage(event.data);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tawait me.#prepareTextMessage(event.data);\r\n\t\t\t\t}\r\n\t\t\t} catch(e) {\r\n\t\t\t\tgenerator.emit('error', e);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tasync #prepareBinaryMessage(message) {\r\n\t\tconst me = this;\r\n\t\tif (Streams.isAvailable && Streams.isCompressed(message)) {\r\n\t\t\tconst resp = Streams.decompress(message);\r\n\t\t\tmessage = await resp.arrayBuffer();\r\n\t\t}\r\n\t\tconst isJSON = Streams.isJson(message);\r\n\t\tif (isJSON) {\r\n\t\t\tconst text = new TextDecoder().decode(message);\r\n\t\t\tme.#prepareTextMessage(text);\r\n\t\t} else {\r\n\t\t\tgenerator.emit('raw', message);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Parse and prepare received message for processing\r\n\t *\r\n\t * @param {String} mesasge\r\n\t *\r\n\t */\r\n\tasync #prepareTextMessage(message) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\ttry {\r\n\t\t\tconst isJSON = Streams.isJson(message);\r\n\r\n\t\t\tif (isJSON) {\r\n\t\t\t\tconst obj = JSON.parse(message);\r\n\t\t\t\tme.#onMessage(obj);\r\n\t\t\t} else {\r\n\t\t\t\tgenerator.emit('raw', message);\r\n\t\t\t}\r\n\r\n\t\t} catch (e) {\r\n\t\t\tgenerator.emit('error', e);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Process received message\r\n\t *\r\n\t * @param {*} msg\r\n\t *\r\n\t */\r\n\tasync #onMessage(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet data = null;\r\n\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\t\tconst security = engine.Security;\r\n\r\n\t\tif (obj.cmd === 'api') {\r\n\t\t\treturn generator.emit('api', obj.data);\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'err') {\r\n\t\t\treturn generator.emit('error', obj.result);\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'enc') {\r\n\t\t\tif (security.isValid) {\r\n\t\t\t\tdata = await security.decrypt(obj);\r\n\t\t\t} else {\r\n\t\t\t\treturn generator.emit('error', new Error('Security available on https/wss only'));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'data') {\r\n\t\t\tdata = obj.data;\r\n\t\t}\r\n\r\n\t\tif (data) {\r\n\t\t\tconst unknown = me.#queue.process(data);\r\n\t\t\tunknown.forEach((obj) => me.emit('message', obj));\r\n\t\t} else {\r\n\t\t\tme.emit('message', data);\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Web Requester Engine\r\n * Used to call remote services through HTTP/S\r\n */\r\nexport default class WebChannel {\r\n\r\n\t#engine = null;\r\n\r\n\t/**\r\n\t * If http/s used in url, make standard fetch call to the defined service\r\n\t */\r\n\tasync init(engine) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (me.#engine) me.stop();\r\n\r\n\t\tme.#engine = engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tconst data = await me.#getAPI(engine.apiURL);\r\n\t\tawait engine.registerAPI(data);\r\n\r\n\t\tif (engine.isSockChannel) return;\r\n\r\n\t\tgenerator.on('call', me.#onRequest.bind(me));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Disengage listeners and links\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tme.#engine = null;\r\n\r\n\t\tengine.Generator.off('call');\r\n\t\tif (engine.isSockChannel) return;\r\n\t\ttry {\r\n\t\t\tfetch(engine.serviceURL, {\r\n\t\t\t\tmethod: 'delete'\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Callback for API call request,\r\n\t * here we make remote API call\r\n\t */\r\n\tasync #onRequest(req) {\r\n\r\n\t\treq = req.detail;\r\n\t\tconst me = this;\r\n\t\tlet o = null;\r\n\r\n\t\tif (req.id !== me.#engine.id) return;\r\n\r\n\t\ttry {\r\n\t\t\to = await me.#onCall(me.#engine, req);\r\n\t\t\treq.finish(o);\r\n\t\t} catch (err) {\r\n\t\t\treq.finish(err);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Get API definition through HTTP/s channel\r\n\t *\r\n\t * @param {String} url\r\n\t * \t\t  URL Address for API service definitions\r\n\t */\r\n\tasync #getAPI(url) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst service = url;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst id = Date.now();\r\n\r\n\t\tconst headers = Object.assign({}, engine.headers || {}, { 'x-time': id });\r\n\r\n\t\tconst resp = await fetch(service, {\r\n\t\t\tmethod: 'get',\r\n\t\t\theaders: headers,\r\n\t\t\tcredentials: 'same-origin'\r\n\t\t});\r\n\r\n\t\tconst data = await resp.json();\r\n\r\n\t\t// update local challenge for signature verificator\r\n\t\tdata.challenge = id.toString();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Send data to server with http/s channel\r\n\t */\r\n\tasync #fetchCall(url, data, head) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst MIME = 'application/json';\r\n\t\tconst HEADERS_ = {\r\n\t\t\t'Accept': MIME,\r\n\t\t\t'Content-Type': MIME,\r\n\t\t\t'Accept-Encoding': 'gzip,deflate,br'\r\n\t\t};\r\n\r\n\t\tconst service = new URL(url);\r\n\t\tconst headers = Object.assign({}, engine.headers || {}, HEADERS_, head || {});\r\n\t\tconst querys = Object.assign({}, engine.querys || {});\r\n\t\tconst payload = Object.assign({}, engine.querys || {}, data || {});\r\n\t\tconst body = JSON.stringify(payload);\r\n\t\tconst req = {\r\n\t\t\tmethod: 'post',\r\n\t\t\theaders: headers,\r\n\t\t\tbody: body\r\n\t\t};\r\n\t\tObject.entries(querys || {}).forEach((v) => {\r\n\t\t\tservice.searchParams.append(v[0], encodeURIComponent(v[1]));\r\n\t\t});\r\n\t\tconst res = await fetch(service.toString(), req);\r\n\t\tconst json = await res.json();\r\n\r\n\t\treturn json;\r\n\t}\r\n\r\n\t/**\r\n\t * Prepare remote call, encrypt if available\r\n\t *\r\n\t * @param {String} url\r\n\t *        Service URL to receive data\r\n\t *\r\n\t * @param {Object} req\r\n\t *         Data to send (optionally encrypt)\r\n\t */\r\n\tasync #onCall(engine, req) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst security = engine.Security;\r\n\t\tconst url = engine.serviceURL;\r\n\r\n\t\tconst hasArgs = Array.isArray(req.data) && req.data.length > 0;\r\n\t\tconst shouldEncrypt = security.isValid && hasArgs && req.enc;\r\n\t\tlet data = req;\r\n\t\tlet head = {};\r\n\r\n\t\t// encrypt if supported\r\n\t\tif (shouldEncrypt) {\r\n\t\t\tdata = await security.encrypt(req);\r\n\t\t\thead['gs-public-key'] = security.publicKey;\r\n\t\t}\r\n\r\n\t\t// send and wait for response\r\n\t\tdata = await me.#fetchCall(url, data, head);\r\n\r\n\t\t// if error throw\r\n\t\tif (data.cmd == 'err') {\r\n\t\t\tthrow new Error(data.result.msg);\r\n\t\t}\r\n\r\n\t\t// if encrypted, decrypt\r\n\t\tif (data.cmd === 'enc') {\r\n\t\t\tif (security.isValid) {\r\n\t\t\t\tdata = await security.decrypt(data);\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error('Security available on https/wss only');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// return server response\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport Generator from \"./Generator.mjs\";\r\nimport Security from \"./Security.mjs\";\r\nimport SocketChannel from \"./SocketChannel.mjs\";\r\nimport WebChannel from \"./WebChannel.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to initialize remote API and remote services.\r\n */\r\nconst ERROR_MESSAGE = 'Invalid definition for Engine Remote Service';\r\nconst ERROR_API_UNDEFINED = 'API Url not defined!';\r\nconst ERROR_SVC_UNDEFINED = 'Service Url not defined!';\r\n\r\n/**\r\n * Main class for Quark Engine Client\r\n */\r\nexport default class QuarkEngine {\r\n\r\n\t#cfg = null;\r\n\t#isWSAPI = false;\r\n\t#isWebChannel = false;\r\n\t#isSocketChannel = false;\r\n\r\n\t#Security = null;\r\n\t#Generator = null;\r\n\t#WebChannel = null;\r\n\t#SocketChannel = null;\r\n\r\n\t#headers = null;\r\n\t#querys = null;\r\n\r\n\t#id = null;\r\n\r\n\tconstructor(cfg) {\r\n\r\n\t\tcfg = cfg || {};\r\n\r\n\t\tif (!cfg.api) {\r\n\t\t\tthrow new Error(ERROR_API_UNDEFINED);\r\n\t\t}\r\n\r\n\t\tif (!cfg.service) {\r\n\t\t\tthrow new Error(ERROR_SVC_UNDEFINED);\r\n\t\t}\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tme.#cfg = null;\r\n\t\tme.#isWSAPI = false;\r\n\t\tme.#isWebChannel = false;\r\n\t\tme.#isSocketChannel = false;\r\n\r\n\t\tme.#Security = null;\r\n\t\tme.#Generator = null;\r\n\t\tme.#WebChannel = null;\r\n\t\tme.#SocketChannel = null;\r\n\t\tme.#id = Date.now();\r\n\r\n\t\tme.#cfg = cfg;\r\n\t\tme.#isWSAPI = cfg.api === cfg.service && cfg.api.indexOf('ws') == 0;\r\n\r\n\t\tme.#headers = cfg.headers || {};\r\n\t\tme.#querys = cfg.querys || {};\r\n\r\n\t\tme.#isWebChannel = cfg.service.indexOf('http') === 0;\r\n\t\tme.#isSocketChannel = cfg.service.indexOf('ws') === 0;\r\n\r\n\t\tif ((me.isWebChannel || me.isSocketChannel) === false) {\r\n\t\t\tthrow new Error(ERROR_MESSAGE);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/*\r\n\t * Initialize engine, throws error,\r\n\t */\r\n\tasync init() {\r\n\r\n\t\tconst me = this;\r\n\t\tif (me.isActive) return;\r\n\r\n\t\tme.#Security = new Security();\r\n\t\tme.#Generator = new Generator(me.id);\r\n\r\n\t\tif (me.isWebChannel || me.isWSAPI == false) {\r\n\t\t\tme.#WebChannel = new WebChannel();\r\n\t\t\tawait me.WebChannel.init(me);\r\n\t\t}\r\n\r\n\t\tif (me.isSocketChannel) {\r\n\t\t\tme.#SocketChannel = new SocketChannel();\r\n\t\t\tawait me.SocketChannel.init(me);\r\n\t\t}\r\n\r\n\t\treturn me;\r\n\t}\r\n\r\n\t/**\r\n\t * Use internaly from channel to register received\r\n\t * API definitiona and security data\r\n\t */\r\n\tasync registerAPI(data) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\t// initialize encryption if provided\r\n\t\tif (data.signature) {\r\n\t\t\tawait me.Security?.init(data);\r\n\t\t}\r\n\r\n\t\tme.Generator?.build(data.api);\r\n\t}\r\n\r\n\t/**\r\n\t * Stop engine instance by clearing all references\r\n\t * stoping listeners, stoping socket is avaialble\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tme.WebChannel?.stop();\r\n\t\tme.SocketChannel?.stop();\r\n\t\tme.Generator?.stop();\r\n\r\n\t\tme.#WebChannel = null;\r\n\t\tme.#SocketChannel = null;\r\n\t\tme.#Generator = null;\r\n\t\tme.#Security = null;\r\n\t\tme.#cfg = null;\r\n\t}\r\n\r\n\t/*\r\n\t * Return generated API\r\n\t */\r\n\tget api() {\r\n\t\treturn this.Generator?.api || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Check if engine is active\r\n\t */\r\n\tget isActive() {\r\n\t\tconst me = this;\r\n\t\tif (me.SocketChannel && !me.SocketChannel.isOpen) return false;\r\n\t\treturn me.api && me.Security ? true : false;\r\n\t}\r\n\r\n\t/*\r\n\t * Return API URL address\r\n\t */\r\n\tget apiURL() {\r\n\t\treturn this.cfg?.api || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Return Service URL address\r\n\t */\r\n\tget serviceURL() {\r\n\t\treturn this.cfg?.service || null;\r\n\t}\r\n\r\n\tget cfg() { return this.#cfg };\r\n\tget isWSAPI() { return this.#isWSAPI };\r\n\tget isWebChannel() { return this.#isWebChannel };\r\n\tget isSocketChannel() { return this.#isSocketChannel };\r\n\r\n\tget Security() { return this.#Security };\r\n\tget Generator() { return this.#Generator };\r\n\tget WebChannel() { return this.#WebChannel };\r\n\tget SocketChannel() { return this.#SocketChannel };\r\n\r\n\tget headers() { return this.#headers };\r\n\tget querys() { return this.#querys };\r\n\tget id() { return this.#id };\r\n\r\n\t/*\r\n\t * Static instance builder\r\n\t */\r\n\tstatic async init(cfg) {\r\n\t\tconst engine = new QuarkEngine(cfg);\r\n\t\treturn engine.init();\r\n\t}\r\n}\r\n","\nimport * as QuarkEngine from './index.esm.mjs';\n\nglobalThis.QuarkEngine = QuarkEngine;"],"names":["Buffer","static","TextEncoder","TextDecoder","src","data","Array","Uint8Array","ArrayBuffer","String","fromText","toArrayBuffer","isString","test","b64","me","fromBase64","isHexString","fromHex","validateData","value","encoder","encode","decoder","decode","arry","i","length","push","parseInt","substr","buffer","prototype","map","call","x","toString","slice","join","strbin","atob","bufView","strLen","charCodeAt","globalThis","btoa","EventExt","EventTarget","listeners","Set","list","type","listener","from","this","isFunction","filter","o","addEventListener","opt","add","super","removeEventListener","forEach","delete","unbind","clear","on","once","wrap","e","off","emit","evt","CustomEvent","detail","dispatchEvent","send","listen","unlisten","wait","Promise","r","fn","preventDefault","stopPropagation","Object","freeze","Event","Streams","isAvailable","CompressionStream","DecompressionStream","isArray","convert","JSON","stringify","stream","decompress","byteArray","isCompressed","writer","writable","getWriter","write","close","Response","readable","encoding","isGzip","isZlib","at","indexOf","first","trim","last","isJsonArray","isJsonObj","Security","name","namedCurve","publicKey","aesKey","cookie","path","updateCookie","document","getChallenge","cfg","challenge","keyEnc","keyVer","async","key","mode","der","use","split","crypto","subtle","importKey","ab","exportKey","toHex","signature","toBuffer","verify","hash","verKey","Error","initPublic","ECDH_TYPE","initKeyPair","generateKey","deriveAES","priv","pub","pubDef","public","deriveKey","getRandom","size","array","getRandomValues","iv","ivbin","databin","assign","counter","AES_TYPE","encrypt","decrypt","result","decryptRaw","toText","encryptRaw","isValid","initVerify","keyPair","privateKey","d","encryptAsHex","k","t","b","message","decryptAsString","obj","parse","cmd","security","init","Queue","Map","up","down","tid","updateRequest","req","set","reset","process","unknown","res","execute","unkown","has","get","finish","Request","id","timeout","callback","constructor","object","property","bind","clearTimeout","setTimeout","Proxy","Generator","model","cnt","api","stop","detach","cleanup","el","_id_","values","build","buildAPI","v","buildInstance","tree","action","buildNamespace","namespace","reduce","methods","buildMethod","a","ar","objs","len","tmp","tmp2","every","instance","enc","n","c","m","l","apiFn","params","prop","args","arguments","isOverride","pop","isAsync","method","ts","Date","now","seal","resolve","reject","proxy","onResponse","success","generator","SocketChannel","queue","webSocket","engine","startSocket","isOpen","readyState","OPEN","canEncrypt","hasArgs","msg","isEncrypt","payload","querys","compress","arrayBuffer","url","URL","serviceURL","q","entries","searchParams","append","encodeURIComponent","WebSocket","binaryType","onCall","onopen","event","isWSAPI","registerAPI","onclose","onerror","onmessage","prepareBinaryMessage","prepareTextMessage","resp","isJson","text","onMessage","WebChannel","getAPI","apiURL","isSockChannel","onRequest","fetch","err","service","headers","credentials","json","head","MIME","HEADERS_","Accept","body","fetchCall","QuarkEngine","isWebChannel","isSocketChannel","isActive"],"mappings":"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"}