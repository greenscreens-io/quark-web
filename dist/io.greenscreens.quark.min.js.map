{"version":3,"file":"io.greenscreens.quark.min.js","sources":["../src/core/Buffer.mjs","../src/core/Event.mjs","../src/core/Security.mjs","../src/core/Queue.mjs","../src/core/Request.mjs","../src/core/Generator.mjs","../src/core/Socket.mjs","../src/core/Web.mjs","../src/core/Engine.mjs","../src/core/Streams.mjs","../src/index.mjs"],"sourcesContent":["/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/*\r\n * Simulate NoedJS Buffer, simple\r\n */\r\nexport default class Buffer {\r\n\r\n\tstatic from(value, type) {\r\n\t\tswitch (type) {\r\n\t\t\tcase 'base64':\r\n\t\t\t\treturn Buffer.fromBase64(value);\r\n\t\t\tcase 'hex':\r\n\t\t\t\treturn Buffer.fromHex(value);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\tstatic to(value, type) {\r\n\t\tswitch (type) {\r\n\t\t\tcase 'base64':\r\n\t\t\t\treturn Buffer.toBase64(value);\r\n\t\t\tcase 'hex':\r\n\t\t\t\treturn Buffer.toHex(value);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\tstatic fromHex(value) {\r\n\r\n\t\tconst arry = [];\r\n\r\n\t\tfor (let i = 0; i < value.length; i += 2) {\r\n\t\t\tarry.push(parseInt(\"0x\" + value.substr(i, 2), 16));\r\n\t\t}\r\n\r\n\t\treturn new Uint8Array(arry);\r\n\t}\r\n\r\n\tstatic fromBase64(value) {\r\n\r\n\t\tconst strbin = atob(value);\r\n\t\tconst buffer = new ArrayBuffer(strbin.length);\r\n\t\tconst bufView = new Uint8Array(buffer);\r\n\r\n\t\tfor (let i = 0, strLen = strbin.length; i < strLen; i++) {\r\n\t\t\tbufView[i] = strbin.charCodeAt(i);\r\n\t\t}\r\n\r\n\t\treturn bufView;\r\n\t}\r\n\r\n\tstatic toHex(buffer) {\r\n\t\treturn Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('');\r\n\t}\r\n\r\n\tstatic toBase64(buffer) {\r\n\t\treturn btoa(new Uint8Array(buffer));\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * A module loading Event class\r\n * @module Events\r\n */\r\n\r\n/**\r\n * Extends native event by adding helper functions\r\n */\r\nexport default class Event extends EventTarget {\r\n\r\n    #listeners = new Set();\r\n\r\n    #list(type = '', listener) {\r\n        const me = this;\r\n        const list = Array.from(me.#listeners);\r\n        return me.#isFunction(listener) ? \r\n            list.filter(o => o.type === type && o.listener === listener)\r\n            :\r\n            list.filter(o => o.type === type);\r\n    }\r\n\r\n    #isFunction(fn) {\r\n        return typeof fn === 'function';\r\n    }\r\n\r\n    addEventListener(type, listener, opt) {\r\n        const me = this;\r\n        if (!me.#isFunction(listener)) return false;\r\n        me.#listeners.add({ type: type, listener: listener });        \r\n        return super.addEventListener(type, listener, opt);\r\n    }\r\n\r\n    removeEventListener(type, listener) {\r\n        const me = this;\r\n        const list = me.#list(type, listener);\r\n        list.forEach(o => super.removeEventListener(o.type, o.listener))\r\n        list.forEach(o => me.#listeners.delete(o)); \r\n    }\r\n\r\n    /**\r\n     * Remove all listeners\r\n     */\r\n    unbind() {\r\n        const me = this;\r\n        Array.from(me.#listeners).forEach(o => {\r\n            super.removeEventListener(o.type, o.listener);\r\n        });\r\n        me.#listeners.clear();\r\n    }\r\n\r\n    /**\r\n     * Listen for events\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    on(type = '', listener) {\r\n        return this.addEventListener(type, listener);\r\n    }\r\n\r\n    /**\r\n     * Listen for events only once\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    once(type, listener) {\r\n        const me = this;\r\n        let wrap = (e) => {\r\n            listener(e);\r\n            wrap = null;\r\n        }\r\n        wrap.type = type;\r\n        wrap.listener = listener;\r\n        return me.addEventListener(type, wrap, { once: true });\r\n    }\r\n\r\n    /**\r\n     * Stop listening for events\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    off(type = '', listener) {\r\n        return this.removeEventListener(type, listener);\r\n    }\r\n\r\n    /**\r\n     * Send event to listeners\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {object} data  Data to send \r\n     */\r\n    emit(type, data) {\r\n        if (!type) return false;\r\n        const evt = new CustomEvent(type, { detail: data });\r\n        return this.dispatchEvent(evt);\r\n    }\r\n\r\n    send(type, data) {this.emit(type, data);}\r\n    listen(type, listener) {this.on(type, listener);}\r\n    unlisten(type, listener) {this.off(type, listener);}\r\n\r\n    /**\r\n     * Wait for an event \r\n     * @param {string} type Event name to be listened\r\n     * @returns {Event}\r\n     */\r\n\twait(type = '') {\r\n        if (!type) return e('Event undefined!');\r\n\t\tconst me = this;\r\n\t\treturn new Promise((r, e) => {\r\n\t\t\tme.once(type, (e) => r(e));\r\n\t\t});\r\n\t}\r\n \r\n\t/**\r\n\t * Generic prevent event bubling\r\n\t * \r\n\t * @param {Event} e \r\n\t */\r\n\tstatic prevent(e) {\r\n\t\tif (Event.#isFunction(e, 'preventDefault')) e.preventDefault();\r\n\t\tif (Event.#isFunction(e, 'stopPropagation')) e.stopPropagation();\r\n\t}\r\n\r\n    static {\r\n        Object.freeze(Event);\r\n    }\r\n\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Security engine using Web Crypto API to encrypt / decrypt\r\n * messages between browser and server.\r\n *\r\n * Received RSA public key is signed and verified at the\r\n * browser side to prevent tampering\r\n */\r\n\r\nexport default class Security {\r\n\r\n\t#VERSION = 0;\r\n\t#encKEY = null;\r\n\t#aesKEY = null;\r\n\t#exportedAES = null;\r\n\r\n\t#encoder = new TextEncoder();\r\n\t#decoder = new TextDecoder();\r\n\r\n\t/**\r\n\t *  Use local challenge, to verify received data signature\r\n\t *\r\n\t *  @param {Object} cfg\r\n\t *      Data received from server contins public key and signature\r\n\t */\r\n\tgetChallenge(cfg) {\r\n\t\treturn [cfg.challenge || '', cfg.keyEnc || '', cfg.keyVer || ''].join('');\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Create random bytes\r\n\t *\r\n\t * @param {int} size\r\n\t *     length of data (required)\r\n\t */\r\n\tgetRandom(size) {\r\n\t\tconst array = new Uint8Array(size);\r\n\t\tcrypto.getRandomValues(array);\r\n\t\treturn array;\r\n\t}\r\n\r\n\t/**\r\n\t * Create AES key for data encryption\r\n\t * @returns CryptoKey\r\n\t */\r\n\tasync generateAesKey() {\r\n\t\tconst type = {\r\n\t\t\tname: \"AES-CTR\",\r\n\t\t\tlength: 128\r\n\t\t};\r\n\t\tconst mode = [\"encrypt\", \"decrypt\"];\r\n\t\treturn crypto.subtle.generateKey(type, true, mode);\r\n\t}\r\n\r\n\t/**\r\n\t * Extract CryptoKey into RAW bytes\r\n\t * @param {CryptoKey} key\r\n\t * @returns Uin8Array\r\n\t */\r\n\tasync exportAesKey(key) {\r\n\t\tconst buffer = await crypto.subtle.exportKey(\"raw\", key);\r\n\t\treturn new Uint8Array(buffer);\r\n\t}\r\n\r\n\t/**\r\n\t * Import RSA key received from server\r\n\t * Key is publicKey used to send encrypted AES key\r\n\t *\r\n\t * @param {String} key\r\n\t *          PEM encoded key without headers,\r\n\t *          flattened in a single line\r\n\t *\r\n\t * @param {Object} type\r\n\t *          Crypto API key definition format\r\n\t *\r\n\t * @param {String} mode\r\n\t *          Key usage 'encrypt' or 'decrypt'\r\n\t */\r\n\tasync importRsaKey(key, type, mode) {\r\n\r\n\t\tconst binaryDer = Buffer.from(key, 'base64');\r\n\r\n\t\treturn crypto.subtle.importKey(\r\n\t\t\t\"spki\",\r\n\t\t\tbinaryDer,\r\n\t\t\ttype,\r\n\t\t\ttrue,\r\n\t\t\t[mode]\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Verify signature\r\n\t *\r\n\t * @param {CryptoKey}\r\n\t *      Public key used for verification\r\n\t *\r\n\t * @param {ArrayBuffer} signature\r\n\t *        Signature of received data\r\n\t *\r\n\t * @param {ArrayBuffer} challenge\r\n\t *        Challenge to verify with signature (ts + pemENCDEC + pemVERSGN)\r\n\t */\r\n\tasync verify(key, signature, challenge) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst binSignature = Buffer.from(signature, 'base64');\r\n\t\tconst binChallenge = me.#encoder.encode(challenge);\r\n\r\n\t\tconst type = {\r\n\t\t\tname: \"ECDSA\",\r\n\t\t\thash: {\r\n\t\t\t\tname: \"SHA-384\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\treturn crypto.subtle.verify(\r\n\t\t\ttype,\r\n\t\t\tkey,\r\n\t\t\tbinSignature,\r\n\t\t\tbinChallenge\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Encrypt message with RSA key\r\n\t *\r\n\t * @param {String || ArrayBuffer} data\r\n\t *        String or AraryBuffer to encrypt\r\n\t */\r\n\tasync encryptRSA(data) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet encoded = data;\r\n\r\n\t\tif (typeof data === 'string') {\r\n\t\t\tencoded = me.#encoder.encode(data);\r\n\t\t}\r\n\r\n\t\treturn crypto.subtle.encrypt(\r\n\t\t\t\"RSA-OAEP\",\r\n\t\t\tme.#encKEY,\r\n\t\t\tencoded\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Encrypt message with AES\r\n\t */\r\n\tasync encryptAesMessage(key, iv, data) {\r\n\r\n\t\tconst encoded = this.#encoder.encode(data);\r\n\t\tconst type = {\r\n\t\t\tname: \"AES-CTR\",\r\n\t\t\tcounter: iv,\r\n\t\t\tlength: 128\r\n\t\t};\r\n\r\n\t\treturn crypto.subtle.encrypt(type, key, encoded);\r\n\t}\r\n\r\n\t/**\r\n\t * Decrypt AES encrypted message\r\n\t */\r\n\tasync decryptAesMessage(key, iv, data) {\r\n\r\n\t\tconst databin = Buffer.from(data, \"hex\");\r\n\t\tconst counter = Buffer.from(iv, \"hex\");\r\n\r\n\t\tconst type = {\r\n\t\t\tname: \"AES-CTR\",\r\n\t\t\tcounter: counter,\r\n\t\t\tlength: 128\r\n\t\t};\r\n\r\n\t\treturn crypto.subtle.decrypt(type, key, databin);\r\n\t}\r\n\r\n\tget isValid() {\r\n\t\tconst me = this;\r\n\t\treturn me.#encKEY !== null && me.#aesKEY !== null;\r\n\t}\r\n\r\n\tstatic get isAvailable() {\r\n\t\treturn crypto.subtle != null;\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize encryption and verification keys\r\n\t * Verifies data signatures to prevent tampering\r\n\t */\r\n\tasync init(cfg) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (!Security.isAvailable) {\r\n\t\t\tconsole.log('Security mode not available, TLS protocol required.');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconsole.log('Security Initializing...');\r\n\r\n\t\tme.#VERSION++;\r\n\r\n\t\tme.#encKEY = await me.importRsaKey(cfg.keyEnc, {\r\n\t\t\tname: 'RSA-OAEP',\r\n\t\t\thash: 'SHA-256'\r\n\t\t}, 'encrypt');\r\n\r\n\t\tme.#aesKEY = await me.generateAesKey();\r\n\t\tme.#exportedAES = await me.exportAesKey(me.#aesKEY);\r\n\r\n\t\tconst verKey = await me.importRsaKey(cfg.keyVer, {\r\n\t\t\tname: 'ECDSA',\r\n\t\t\tnamedCurve: \"P-384\"\r\n\t\t}, 'verify');\r\n\r\n\t\tconst status = await me.verify(verKey, cfg.signature, me.getChallenge(cfg || {}));\r\n\r\n\t\tif (!status) {\r\n\t\t\tme.#encKEY = null;\r\n\t\t\tme.#aesKEY = null;\r\n\t\t\tme.#exportedAES = null;\r\n\t\t\tthrow new Error('Signature invalid');\r\n\t\t}\r\n\r\n\t\tconsole.log('Security Initialized!');\r\n\r\n\t}\r\n\r\n\t/**\r\n\t *  Ecnrypt received data in format {d:.., k:...}\r\n\t * @param\r\n\t * \t\tdata  - string to encrypt\r\n\t */\r\n\tasync encrypt(data, bin) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst iv = me.getRandom(16);\r\n\t\tconst key = new Uint8Array(iv.length + me.#exportedAES.length);\r\n\r\n\t\tkey.set(iv);\r\n\t\tkey.set(me.#exportedAES, iv.length);\r\n\r\n\t\tconst str = (typeof data === 'string') ? data : JSON.stringify(data);\r\n\t\tconst encryptedKey = await me.encryptRSA(key);\r\n\t\tconst encryptedData = await me.encryptAesMessage(me.#aesKEY, iv, str);\r\n\r\n\t\tif (bin === true) {\r\n\t\t\treturn {\r\n\t\t\t\tt: '1',\r\n\t\t\t\td: encryptedData,\r\n\t\t\t\tk: encryptedKey\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tt: '1',\r\n\t\t\td: Buffer.to(encryptedData, 'hex'),\r\n\t\t\tk: Buffer.to(encryptedKey, 'hex')\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decrypt received data in format {d:.., k:...}\r\n\t *\r\n\t * @param\r\n\t * \t\tcfg  - data elements to decrypt\r\n\t * \t\tcfg.d - aes encrypted server resposne\r\n\t * \t\tcfg.k - aes IV used for masking\r\n\t *\r\n\t */\r\n\tasync decrypt(cfg) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst iv = cfg.iv;\r\n\t\tconst data = cfg.d;\r\n\r\n\t\tconst message = await me.decryptAesMessage(me.#aesKEY, iv, data);\r\n\r\n\t\tconst str = me.#decoder.decode(message);\r\n\t\tconst obj = JSON.parse(str);\r\n\r\n\t\tif (obj && obj.type == 'ws' && obj.cmd === 'data') {\r\n\t\t\treturn obj.data;\r\n\t\t}\r\n\r\n\t\treturn obj;\r\n\t}\r\n\r\n\tstatic async init(cfg) {\r\n\t\tconst security = new Security();\r\n\t\tawait security.init(cfg);\r\n\t\treturn security;\r\n\t}\r\n\r\n};\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Queue to handle requests\r\n */\r\nexport default class Queue extends Map {\r\n\r\n\t#up = 0;\r\n\t#down = 0;\r\n\t#tid = 0;\r\n\r\n\t/**\r\n\t * Update counters and queue to link resposnes to requests\r\n\t * @param {Object} req\r\n\t *      Request data\r\n\t */\r\n\tupdateRequest(req) {\r\n\t\tconst me = this;\r\n\t\tme.#tid++;\r\n\t\tme.#up++;\r\n\t\treq.tid = me.#tid.toString();\r\n\t\tme.set(req.tid, req);\r\n\t}\r\n\r\n\t/**\r\n\t * Reset queue to remove old stalled elements\r\n\t */\r\n\treset() {\r\n\t\tconst me = this;\r\n\t\tif (me.#up > 50 && me.#down >= me.#up) {\r\n\t\t\tme.#up = 0;\r\n\t\t\tme.#down = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Process array of response records\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\tprocess(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst unknown = [];\r\n\r\n\t\tif (Array.isArray(obj)) {\r\n\t\t\tobj.forEach((o) => {\r\n\t\t\t\tconst res = me.execute(o);\r\n\t\t\t\tif (res) unkown.push(res);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconst o = me.execute(obj);\r\n\t\t\tif (o) unknown.push(o);\r\n\t\t}\r\n\r\n\t\treturn unknown;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Process single response record\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\texecute(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst tid = obj.tid;\r\n\t\tlet unknown = null;\r\n\r\n\t\tme.#down++;\r\n\r\n\t\tif (me.has(tid)) {\r\n\t\t\tconst req = me.get(tid);\r\n\t\t\ttry {\r\n\t\t\t\treq.finish(obj);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log(e);\r\n\t\t\t\treq.finish(e);\r\n\t\t\t} finally {\r\n\t\t\t\tme.delete(tid);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tunknown = obj;\r\n\t\t}\r\n\r\n\t\tme.reset();\r\n\r\n\t\treturn unknown;\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * API engine asynchronous request\r\n */\r\nexport default class Request {\r\n\r\n    #id = 0;\r\n    #timeout = 0;\r\n    #callback;\r\n    \r\n    constructor(timeout , callback) {\r\n        const me = this;\r\n        me.#callback = callback;\r\n        me.#timeout = timeout;\r\n        me.#init();\r\n    }\r\n\r\n    get(object, property, receiver) {\r\n        const me = this;\r\n        if (property === 'timeout') return me.timeout;\r\n        if (property === 'finish') return me.callback.bind(me);\r\n        return object[property];\r\n    }\r\n\r\n    callback(o) {\r\n        const me = this;\r\n        if (me.timeout) return;\r\n        me.#clear();\r\n        return me.#callback(o);\r\n    }\r\n\r\n    get timeout() {\r\n        return this.#timeout === true;\r\n    }\r\n\r\n    #clear() {\r\n        const me = this;\r\n        if (me.#id === 0) return;\r\n        clearTimeout(me.#id);\r\n    }\r\n\r\n    #init() {\r\n        const me = this;\r\n        if (me.#timeout === 0) return;\r\n        me.#id = setTimeout(() => {\r\n            me.#timeout = true;\r\n            me.#callback(new Error('Call timeouted!'));\r\n        }, me.#timeout);\r\n    }\r\n\r\n    static wrap(data, timeout , callback) {\r\n        return new Proxy(data, new Request(timeout , callback));\r\n    }\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport Event from \"./Event.mjs\";\r\nimport Request from \"./Request.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to call remote services.\r\n * All Direct functions linked to defiend namespace\r\n */\r\nexport default class Generator extends Event {\r\n\r\n\t#model = {};\r\n\t#id = null;\r\n\t#cnt = 0;\r\n\t#timeout = 0;\r\n\r\n\tconstructor(id = 0, timeout = 0) {\r\n\t\tsuper();\r\n\t\tthis.#id = id;\r\n\t\tthis.#timeout = timeout;\r\n\t}\r\n\r\n\t/**\r\n\t * Return generted API structure and callers\r\n\t */\r\n\tget api() {\r\n\t\treturn this.#model;\r\n\t}\r\n\r\n\t/**\r\n\t * Disconnect generator from API callers\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\t\tme.off('call');\r\n\t\tme.off('api');\r\n\t\tme.off('raw');\r\n\t\tme.off('error');\r\n\t\tme.#detach();\r\n\t}\r\n\r\n\t#cleanup(obj, id) {\r\n\t\tfor (let k in obj) {\r\n\t\t\tlet el = obj[k];\r\n\t\t\tif (typeof el === 'object') {\r\n\t\t\t\tif (this.#cleanup(el, id)) obj[k] = null;\r\n\t\t\t} else if (el._id_ === id) {\r\n\t\t\t\tobj[k] = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Object.values(obj).filter(o => o != null).length === 0;\r\n\t}\r\n\r\n\t#detach() {\r\n\t\tconst me = this;\r\n\t\tme.#cleanup(me.#model, me.#id);\r\n\t\tme.#model = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Build JS object with callable functions that maps to Java side methods\r\n\t * Data is retrieved from API service\r\n\t *\r\n\t * @param {String} url || api object\r\n\t * \t\t  URL Address for API service definitions\r\n\t */\r\n\tbuild(o) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst data = o ? o.api || o : null;\r\n\r\n\t\tif (data) me.#buildAPI(data);\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * From API tree generate namespace tree and\r\n\t * links generated functions to WebScoket api calls\r\n\t *\r\n\t * @param {Object} cfg\r\n\t * \t\tAlternative definition to API\r\n\t */\r\n\t#buildAPI(cfg) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (Array.isArray(cfg)) {\r\n\t\t\tcfg.forEach(v => me.#buildInstance(v));\r\n\t\t} else {\r\n\t\t\tme.#buildInstance(cfg);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Build from single definition\r\n\t *\r\n\t * @param {Object} api\r\n\t * \t\t  Java Class/Method definition\r\n\t */\r\n\t#buildInstance(api) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet tree = null;\r\n\t\tlet action = null;\r\n\r\n\t\ttree = me.#buildNamespace(api.namespace);\r\n\r\n\t\tif (!tree[api.action]) {\r\n\t\t\ttree[api.action] = {};\r\n\t\t}\r\n\t\taction = tree[api.action];\r\n\r\n\t\tapi.methods?.forEach(v => me.#buildMethod(api.namespace, api.action, action, v, me.#id));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generate namespace object structure from string version\r\n\t *\r\n\t * @param  {String} namespace\r\n\t * \t\t\tTree structure delimited with dots\r\n\t *\r\n\t * @return {Object}\r\n\t * \t\t\tObject tree structure\r\n\t */\r\n\t#buildNamespace(namespace) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tlet tmp = globalThis;\r\n\t\tlet tmp2 = me.#model;\r\n\r\n\t\tnamespace.split('.').every(v => {\r\n\r\n\t\t\tif (!tmp[v]) tmp[v] = {};\r\n\t\t\ttmp = tmp[v];\r\n\r\n\t\t\tif (!tmp2[v]) tmp2[v] = tmp;\r\n\t\t\ttmp2 = tmp;\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn tmp;\r\n\t}\r\n\r\n\t/**\r\n\t * Build instance methods\r\n\t *\r\n\t * @param {String} namespace\r\n\t * @param {String} action\r\n\t * @param {String} instance\r\n\t * @param {Array} api\r\n\t */\r\n\t#buildMethod(namespace, action, instance, api, id) {\r\n\r\n\t\tconst enc = api.encrypt === false ? false : true;\r\n\t\tconst cfg = {\r\n\t\t\tn: namespace,\r\n\t\t\tc: action,\r\n\t\t\tm: api.name,\r\n\t\t\tl: api.len,\r\n\t\t\te: enc,\r\n\t\t\ti: id\r\n\t\t};\r\n\r\n\t\tinstance[api.name] = this.#apiFn(cfg);\r\n\t\tinstance[api.name]._id_ = id;\r\n\t\t// Object.freeze(instance[api.name]);\r\n\t}\r\n\r\n\t/**\r\n\t * Generic function used to attach for generated API\r\n\t *\r\n\t * @param {Array} params List of arguments from caller\r\n\t */\r\n\t#apiFn(params) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst prop = params;\r\n\r\n\t\tconst fn = function () {\r\n\r\n\t\t\tconst args = Array.prototype.slice.call(arguments);\r\n\r\n\t\t\tif (args.length != prop.l) throw new Error(`Invalid arguments length. Required (${prop.l})`);\r\n\r\n\t\t\tconst req = {\r\n\t\t\t\t\"namespace\": prop.n,\r\n\t\t\t\t\"action\": prop.c,\r\n\t\t\t\t\"method\": prop.m,\r\n\t\t\t\t\"id\": prop.i,\r\n\t\t\t\t\"e\": prop.e,\r\n\t\t\t\t\"data\": args,\r\n\t\t\t\t\"key\" : ++me.#cnt,\r\n\t\t\t\t\"tid\" : 0,\r\n\t\t\t\t\"ts\": Date.now()\r\n\t\t\t};\r\n\t\t\tObject.seal(req);\r\n\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst proxy = Request.wrap(req, me.#timeout, (obj) => {\r\n\t\t\t\t\t\tme.#onResponse(obj, resolve, reject);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tme.emit('call', proxy);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.log(e);\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn fn;\r\n\t}\r\n\r\n\t/**\r\n\t * Process remote response\r\n\t */\r\n\t#onResponse(obj, resolve, reject) {\r\n\r\n\t\tif (obj instanceof Error) return reject(obj);\r\n\r\n\t\tconst result = obj.result || obj;\r\n\r\n\t\tif (result.success) {\r\n\t\t\tresolve(result.data);\r\n\t\t} else {\r\n\t\t\treject(result);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Static instance builder\r\n\t * @param {object} cfg Api list from server side Quark engine\r\n\t * @param {number} id Unique Quark Engien ID - to link functions to the engine instance\r\n\t * @returns \r\n\t */\r\n\tstatic async build(cfg, id, timeout) {\r\n\t\tconst generator = new Generator(id, timeout);\r\n\t\tgenerator.build(cfg);\r\n\t\treturn generator;\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport Event from \"./Event.mjs\";\r\nimport Queue from \"./Queue.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to call remote services.\r\n * All Direct functions linked to io.greenscreens namespace\r\n */\r\nexport default class SocketChannel extends Event {\r\n\r\n\t#queue = new Queue();\r\n\t#webSocket = null;\r\n\t#engine = null;\r\n\r\n\t/**\r\n\t * Initialize Socket channel\r\n\t */\r\n\tasync init(engine) {\r\n\r\n\t\tconst me = this;\r\n\t\tme.stop();\r\n\t\tme.#engine = engine;\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tme.#startSocket(resolve, reject);\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tget isOpen() {\r\n\t\tconst me = this;\r\n\t\tif (me.#webSocket == null) return false;\r\n\t\treturn me.#webSocket.readyState === me.#webSocket.OPEN;\r\n\t}\r\n\r\n\t/**\r\n\t * Close WebSocket channel if available\r\n\t */\r\n\tstop() {\r\n\t\tconst me = this;\r\n\t\tif (me.#webSocket == null) return false;\r\n\t\tme.#webSocket.close();\r\n\t\tme.#webSocket = null;\r\n\t\tme.#engine = null;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Check if data can be encrypted\r\n\t *\r\n\t * @param {Object} req\r\n\t */\r\n\t#canEncrypt(req) {\r\n\t\tconst hasArgs = Array.isArray(req.data) && req.data.length > 0 && req.e !== false;\r\n\t\treturn this.#engine.Security.isValid && hasArgs;\r\n\t}\r\n\r\n\t/**\r\n\t * Prepare remote call, encrypt if avaialble\r\n\t *\r\n\t * @param {Object} req\r\n\t *         Data to send (optionaly encrypt)\r\n\t */\r\n\tasync #onCall(req) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet msg = null;\r\n\r\n\t\tif (req.id !== me.#engine.id) return;\r\n\r\n\t\tconst isEncrypt = me.#canEncrypt(req);\r\n\r\n\t\tme.#queue.updateRequest(req);\r\n\r\n\t\t// encrypt if supported\r\n\t\tif (isEncrypt) {\r\n\t\t\tconst enc = await me.#engine.Security.encrypt(req.data);\r\n\t\t\tconst payload = Object.assign({}, me.#engine.querys || {}, enc || {});\r\n\t\t\treq.data = [payload];\r\n\t\t}\r\n\r\n\t\tconst data = {\r\n\t\t\tcmd: isEncrypt ? 'enc' : 'data',\r\n\t\t\ttype: 'ws',\r\n\t\t\tdata: [req]\r\n\t\t};\r\n\r\n\t\tmsg = JSON.stringify(data);\r\n\r\n\t\tif (!Streams.isAvailable) {\r\n\t\t\treturn me.#webSocket.send(msg);\r\n\t\t}\r\n\r\n\t\tmsg = await Streams.compress(msg);\r\n\t\tme.#webSocket.send(msg);\r\n\t}\r\n\r\n\tasync #startSocket(resolve, reject) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tconst challenge = Date.now();\r\n\t\tconst url = new URL(engine.serviceURL);\r\n\r\n\t\tconst headers = Object.assign({}, engine.headers || {});\r\n\t\tconst querys = Object.assign({}, engine.querys || {});\r\n\t\tquerys.q = challenge;\r\n\t\tquerys.c = Streams.isAvailable;\r\n\r\n\t\tObject.entries(querys || {}).forEach((v) => {\r\n\t\t\turl.searchParams.append(v[0], encodeURIComponent(v[1]));\r\n\t\t});\r\n\r\n\t\tme.#webSocket = new WebSocket(url.toString(), ['ws4is']);\r\n\t\tme.#webSocket.binaryType = \"arraybuffer\";\r\n\r\n\t\tconst onCall = me.#onCall.bind(me);\r\n\r\n\t\tme.#webSocket.onopen = (event) => {\r\n\r\n\t\t\tme.emit('online', event);\r\n\t\t\tgenerator.on('call', onCall);\r\n\r\n\t\t\tif (!engine.isWSAPI) {\r\n\t\t\t\treturn resolve(true);\r\n\t\t\t}\r\n\r\n\t\t\tgenerator.once('api', async (data) => {\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tdata.challenge = challenge;\r\n\t\t\t\t\tawait engine.registerAPI(data);\r\n\t\t\t\t\tresolve(true);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\r\n\t\t};\r\n\r\n\t\tme.#webSocket.onclose = (event) => {\r\n\t\t\tgenerator.off('call', onCall);\r\n\t\t\tme.stop();\r\n\t\t\tme.emit('offline', event);\r\n\t\t}\r\n\r\n\t\tme.#webSocket.onerror = (event) => {\r\n\t\t\tgenerator.off('call', onCall);\r\n\t\t\treject(event);\r\n\t\t\tme.stop();\r\n\t\t\tme.emit('error', event);\r\n\t\t};\r\n\r\n\t\tme.#webSocket.onmessage = (event) => {\r\n\t\t\tme.#prepareMessage(event.data);\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t#isJsonObj(msg) {\r\n\t\treturn msg.startsWith('{') && msg.endsWith('}');\r\n\t}\r\n\r\n\t#isJsonArray(msg) {\r\n\t\treturn msg.startsWith('[') && msg.endsWith(']');\r\n\t}\r\n\r\n\t/**\r\n\t * Parse and prepare received message for processing\r\n\t *\r\n\t * @param {String} mesasge\r\n\t *\r\n\t */\r\n\tasync #prepareMessage(message) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tlet obj = null;\r\n\t\tlet text = message;\r\n\r\n\t\ttry {\r\n\r\n\t\t\tif (message instanceof ArrayBuffer) {\r\n\t\t\t\ttext = await Streams.decompress(message);\r\n\t\t\t}\r\n\r\n\t\t\tconst msg = text.trim();\r\n\t\t\tconst isJSON = me.#isJsonObj(msg) || me.#isJsonArray(msg);\r\n\r\n\t\t\tif (isJSON) {\r\n\t\t\t\tobj = JSON.parse(text);\r\n\t\t\t\tme.#onMessage(obj);\r\n\t\t\t} else {\r\n\t\t\t\tgenerator.emit('raw', text);\r\n\t\t\t}\r\n\r\n\t\t} catch (e) {\r\n\t\t\tgenerator.emit('error', e);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Process received message\r\n\t *\r\n\t * @param {*} msg\r\n\t *\r\n\t */\r\n\tasync #onMessage(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet data = null;\r\n\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\t\tconst security = engine.Security;\r\n\r\n\t\tif (obj.cmd === 'api') {\r\n\t\t\treturn generator.emit('api', obj.data);\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'err') {\r\n\t\t\treturn generator.emit('error', obj.result);\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'enc') {\r\n\t\t\tif (security.isAvailable) {\r\n\t\t\t\tdata = await security.decrypt(obj);\r\n\t\t\t} else {\r\n\t\t\t\treturn generator.emit('error', new Error('Security available on https/wss only'));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'data') {\r\n\t\t\tdata = obj.data;\r\n\t\t}\r\n\r\n\t\tif (data) {\r\n\t\t\tconst unknown = me.#queue.process(data);\r\n\t\t\tunknown.forEach((obj) => me.emit('message', obj));\r\n\t\t} else {\r\n\t\t\tme.emit('message', data);\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Web Requester Engine\r\n * Used to call remote services through HTTP/S\r\n */\r\nexport default class WebChannel {\r\n\r\n\t#engine = null;\r\n\r\n\t/**\r\n\t * If http/s used in url, make standard fetch call to the defined service\r\n\t */\r\n\tasync init(engine) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (me.#engine) me.stop();\r\n\r\n\t\tme.#engine = engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tconst data = await me.#getAPI(engine.apiURL);\r\n\t\tawait engine.registerAPI(data);\r\n\r\n\t\tif (engine.isSockChannel) return;\r\n\r\n\t\tgenerator.on('call', me.#onRequest.bind(me));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Disengage listeners and links\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tme.#engine = null;\r\n\r\n\t\tengine.Generator.off('call');\r\n\t\tif (engine.isSockChannel) return;\r\n\t\ttry {\r\n\t\t\tfetch(engine.serviceURL, {\r\n\t\t\t\tmethod: 'delete'\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Callback for API call request,\r\n\t * here we make remote API call\r\n\t */\r\n\tasync #onRequest(req) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet o = null;\r\n\t\tlet e = null;\r\n\r\n\t\tif (req.id !== me.#engine.id) return;\r\n\r\n\t\ttry {\r\n\t\t\to = await me.#onCall(me.#engine, req);\r\n\t\t\treq.finish(o);\r\n\t\t} catch (err) {\r\n\t\t\treq.finish(err);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Get API definition through HTTP/s channel\r\n\t *\r\n\t * @param {String} url\r\n\t * \t\t  URL Address for API service definitions\r\n\t */\r\n\tasync #getAPI(url) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst service = url;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst id = Date.now();\r\n\r\n\t\tconst headers = Object.assign({}, engine.headers || {}, { 'x-time': id });\r\n\r\n\t\tconst resp = await fetch(service, {\r\n\t\t\tmethod: 'get',\r\n\t\t\theaders: headers,\r\n\t\t\tcredentials: 'same-origin'\r\n\t\t});\r\n\r\n\t\tconst data = await resp.json();\r\n\r\n\t\t// update local challenge for signature verificator\r\n\t\tdata.challenge = id.toString();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Send data to server with http/s channel\r\n\t */\r\n\tasync #fetchCall(url, data) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst MIME = 'application/json';\r\n\t\tconst HEADERS_ = {\r\n\t\t\t'Accept': MIME,\r\n\t\t\t'Content-Type': MIME\r\n\t\t};\r\n\r\n\t\tconst service = new URL(url);\r\n\t\tconst headers = Object.assign({}, engine.headers || {}, HEADERS_);\r\n\t\tconst querys = Object.assign({}, engine.querys || {});\r\n\t\tconst payload = Object.assign({}, engine.querys || {}, data || {});\r\n\t\tconst body = JSON.stringify(payload);\r\n\t\tconst req = {\r\n\t\t\tmethod: 'post',\r\n\t\t\theaders: headers,\r\n\t\t\tbody: body\r\n\t\t};\r\n\t\tObject.entries(querys || {}).forEach((v) => {\r\n\t\t\tservice.searchParams.append(v[0], encodeURIComponent(v[1]));\r\n\t\t});\r\n\t\tconst res = await fetch(service.toString(), req);\r\n\t\tconst json = await res.json();\r\n\r\n\t\treturn json;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Prepare remote call, encrypt if available\r\n\t *\r\n\t * @param {String} url\r\n\t *        Service URL to receive data\r\n\t *\r\n\t * @param {Object} req\r\n\t *         Data to send (optionally encrypt)\r\n\t */\r\n\tasync #onCall(engine, req) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst security = engine.Security;\r\n\t\tconst url = engine.serviceURL;\r\n\r\n\t\tconst hasArgs = Array.isArray(req.data) && req.data.length > 0;\r\n\t\tconst shouldEncrypt = security.isValid && hasArgs;\r\n\t\tlet data = req;\r\n\r\n\t\t// encrypt if supported\r\n\t\tif (shouldEncrypt) {\r\n\t\t\tdata = await security.encrypt(req);\r\n\t\t}\r\n\r\n\t\t// send and wait for response\r\n\t\tdata = await me.#fetchCall(url, data);\r\n\r\n\t\t// if error throw\r\n\t\tif (data.cmd == 'err') {\r\n\t\t\tthrow new Error(data.result.msg);\r\n\t\t}\r\n\r\n\t\t// if encrypted, decrypt\r\n\t\tif (data.cmd === 'enc') {\r\n\t\t\tif (security.isValid) {\r\n\t\t\t\tdata = await security.decrypt(data);\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error('Security available on https/wss only');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// return server response\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport Generator from \"./Generator.mjs\";\r\nimport Security from \"./Security.mjs\";\r\nimport SocketChannel from \"./Socket.mjs\";\r\nimport WebChannel from \"./Web.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to initialize remote API and remote services.\r\n */\r\nconst ERROR_MESSAGE = 'Invalid definition for Engine Remote Service';\r\nconst ERROR_API_UNDEFINED = 'API Url not defined!';\r\nconst ERROR_SVC_UNDEFINED = 'Service Url not defined!';\r\n\r\n/**\r\n * Main class for Quark Engine Client\r\n */\r\nexport default class Engine {\r\n\r\n\tconstructor(cfg) {\r\n\r\n\t\tcfg = cfg || {};\r\n\r\n\t\tif (!cfg.api) {\r\n\t\t\tthrow new Error(ERROR_API_UNDEFINED);\r\n\t\t}\r\n\r\n\t\tif (!cfg.service) {\r\n\t\t\tthrow new Error(ERROR_SVC_UNDEFINED);\r\n\t\t}\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tme.cfg = null;\r\n\t\tme.isWSAPI = false;\r\n\t\tme.isWebChannel = false;\r\n\t\tme.isSockChannel = false;\r\n\r\n\t\tme.Security = null;\r\n\t\tme.Generator = null;\r\n\t\tme.WebChannel = null;\r\n\t\tme.SocketChannel = null;\r\n\t\tme.id = Date.now();\r\n\r\n\t\tme.cfg = cfg;\r\n\t\tme.isWSAPI = cfg.api === cfg.service && cfg.api.indexOf('ws') == 0;\r\n\r\n\t\tme.headers = cfg.headers || {};\r\n\t\tme.querys = cfg.querys || {};\r\n\r\n\t\tme.isWebChannel = cfg.service.indexOf('http') === 0;\r\n\t\tme.isSockChannel = cfg.service.indexOf('ws') === 0;\r\n\r\n\t\tif ((me.isWebChannel || me.isSockChannel) === false) {\r\n\t\t\tthrow new Error(ERROR_MESSAGE);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/*\r\n\t * Initialize engine, throws error,\r\n\t */\r\n\tasync init() {\r\n\r\n\t\tconst me = this;\r\n\t\tif (me.isActive) return;\r\n\r\n\t\tme.Security = new Security();\r\n\t\tme.Generator = new Generator(me.id);\r\n\r\n\t\tif (me.isWebChannel || me.isWSAPI == false) {\r\n\t\t\tme.WebChannel = new WebChannel();\r\n\t\t\tawait me.WebChannel.init(me);\r\n\t\t}\r\n\r\n\t\tif (me.isSockChannel) {\r\n\t\t\tme.SocketChannel = new SocketChannel();\r\n\t\t\tawait me.SocketChannel.init(me);\r\n\t\t}\r\n\r\n\t\treturn me;\r\n\t}\r\n\r\n\t/**\r\n\t * Use internaly from channel to register received\r\n\t * API definitiona and security data\r\n\t */\r\n\tasync registerAPI(data) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\t// initialize encryption if provided\r\n\t\tif (data.signature) {\r\n\t\t\tif (!me.Security?.isActive) {\r\n\t\t\t\tawait me.Security.init(data);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tme.Generator?.build(data.api);\r\n\t}\r\n\r\n\t/**\r\n\t * Stop engine instance by clearing all references\r\n\t * stoping listeners, stoping socket is avaialble\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tme.WebChannel?.stop();\r\n\t\tme.SocketChannel?.stop();\r\n\t\tme.Generator?.stop();\r\n\r\n\t\tme.WebChannel = null;\r\n\t\tme.SocketChannel = null;\r\n\t\tme.Generator = null;\r\n\t\tme.Security = null;\r\n\t\tme.cfg = null;\r\n\t}\r\n\r\n\t/*\r\n\t * Return generated API\r\n\t */\r\n\tget api() {\r\n\t\treturn this.Generator?.api || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Check if engine is active\r\n\t */\r\n\tget isActive() {\r\n\t\tconst me = this;\r\n\t\tif (me.SocketChannel && !me.SocketChannel.isOpen) return false;\r\n\t\treturn me.api && me.Security ? true : false;\r\n\t}\r\n\r\n\t/*\r\n\t * Return API URL address\r\n\t */\r\n\tget apiURL() {\r\n\t\treturn this.cfg?.api || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Return Service URL address\r\n\t */\r\n\tget serviceURL() {\r\n\t\treturn this.cfg?.service || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Static instance builder\r\n\t */\r\n\tstatic async init(cfg) {\r\n\t\tconst engine = new Engine(cfg);\r\n\t\treturn engine.init();\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Browser native compression\r\n */\r\nexport default class Streams {\r\n\r\n\tstatic get isAvailable() {\r\n\t\treturn typeof CompressionStream !== 'undefined' &&\r\n\t\t\ttypeof DecompressionStream !== 'undefined';\r\n\t}\r\n\r\n\tstatic async compress(text, encoding = 'gzip') {\r\n\t\tconst byteArray = new TextEncoder().encode(text);\r\n\t\tconst cs = new CompressionStream(encoding);\r\n\t\tconst writer = cs.writable.getWriter();\r\n\t\twriter.write(byteArray);\r\n\t\twriter.close();\r\n\t\treturn new Response(cs.readable).arrayBuffer();\r\n\t}\r\n\r\n\tstatic async decompress(byteArray, encoding = 'gzip') {\r\n\t\tconst cs = new DecompressionStream(encoding);\r\n\t\tconst writer = cs.writable.getWriter();\r\n\t\twriter.write(byteArray);\r\n\t\twriter.close();\r\n\t\tconst arrayBuffer = await new Response(cs.readable).arrayBuffer();\r\n\t\treturn new TextDecoder().decode(arrayBuffer);\r\n\t}\r\n\r\n}\r\n","\nimport * as QuarkEngine from './index.esm.mjs';\n\nglobalThis.QuarkEngine = QuarkEngine;"],"names":["Buffer","static","value","type","fromBase64","fromHex","toBase64","toHex","arry","i","length","push","parseInt","substr","Uint8Array","strbin","atob","buffer","ArrayBuffer","bufView","strLen","charCodeAt","Array","prototype","map","call","x","toString","slice","join","btoa","Event","EventTarget","listeners","Set","list","listener","from","this","isFunction","filter","o","fn","addEventListener","opt","add","super","removeEventListener","me","forEach","delete","unbind","clear","on","once","wrap","e","off","emit","data","evt","CustomEvent","detail","dispatchEvent","send","listen","unlisten","wait","Promise","r","preventDefault","stopPropagation","Object","freeze","Security","VERSION","encKEY","aesKEY","exportedAES","encoder","TextEncoder","decoder","TextDecoder","getChallenge","cfg","challenge","keyEnc","keyVer","getRandom","size","array","crypto","getRandomValues","async","subtle","generateKey","name","key","exportKey","mode","binaryDer","importKey","signature","binSignature","binChallenge","encode","verify","hash","encoded","encrypt","iv","counter","databin","decrypt","isValid","isAvailable","importRsaKey","generateAesKey","exportAesKey","verKey","namedCurve","Error","bin","set","str","JSON","stringify","encryptedKey","encryptRSA","encryptedData","encryptAesMessage","t","d","k","to","message","decryptAesMessage","decode","obj","parse","cmd","security","init","Queue","Map","up","down","tid","updateRequest","req","reset","process","unknown","isArray","res","execute","unkown","has","get","finish","Request","id","timeout","callback","constructor","object","property","receiver","bind","clearTimeout","setTimeout","Proxy","Generator","model","cnt","api","stop","detach","cleanup","el","_id_","values","build","buildAPI","v","buildInstance","tree","action","buildNamespace","namespace","methods","buildMethod","tmp","globalThis","tmp2","split","every","instance","enc","n","c","m","l","len","apiFn","params","prop","args","arguments","method","ts","Date","now","seal","resolve","reject","proxy","onResponse","result","success","generator","SocketChannel","queue","webSocket","engine","startSocket","isOpen","readyState","OPEN","close","canEncrypt","hasArgs","msg","isEncrypt","payload","assign","querys","Streams","compress","url","URL","serviceURL","headers","q","entries","searchParams","append","encodeURIComponent","WebSocket","binaryType","onCall","onopen","event","isWSAPI","registerAPI","onclose","onerror","onmessage","prepareMessage","isJsonObj","startsWith","endsWith","isJsonArray","text","decompress","trim","onMessage","WebChannel","getAPI","apiURL","isSockChannel","onRequest","fetch","err","service","resp","credentials","json","MIME","HEADERS_","Accept","body","fetchCall","Engine","isWebChannel","indexOf","isActive","CompressionStream","DecompressionStream","encoding","byteArray","cs","writer","writable","getWriter","write","Response","readable","arrayBuffer","QuarkEngine"],"mappings":"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"}