{"version":3,"file":"io.greenscreens.quark.min.js","sources":["../src/core/Buffer.mjs","../src/core/Event.mjs","../src/core/Streams.mjs","../src/core/Security.mjs","../src/core/Queue.mjs","../src/core/Request.mjs","../src/core/Generator.mjs","../src/core/Socket.mjs","../src/core/Web.mjs","../src/core/Engine.mjs","../src/index.mjs"],"sourcesContent":["/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/*\r\n * Simulate NoedJS Buffer, simple\r\n */\r\nexport default class Buffer {\r\n\r\n\tstatic from(value, type) {\r\n\t\tswitch (type) {\r\n\t\t\tcase 'base64':\r\n\t\t\t\treturn Buffer.fromBase64(value);\r\n\t\t\tcase 'hex':\r\n\t\t\t\treturn Buffer.fromHex(value);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\tstatic to(value, type) {\r\n\t\tswitch (type) {\r\n\t\t\tcase 'base64':\r\n\t\t\t\treturn Buffer.toBase64(value);\r\n\t\t\tcase 'hex':\r\n\t\t\t\treturn Buffer.toHex(value);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\tstatic fromHex(value) {\r\n\r\n\t\tconst arry = [];\r\n\r\n\t\tfor (let i = 0; i < value.length; i += 2) {\r\n\t\t\tarry.push(parseInt(\"0x\" + value.substr(i, 2), 16));\r\n\t\t}\r\n\r\n\t\treturn new Uint8Array(arry);\r\n\t}\r\n\r\n\tstatic fromBase64(value) {\r\n\r\n\t\tconst strbin = atob(value);\r\n\t\tconst buffer = new ArrayBuffer(strbin.length);\r\n\t\tconst bufView = new Uint8Array(buffer);\r\n\r\n\t\tfor (let i = 0, strLen = strbin.length; i < strLen; i++) {\r\n\t\t\tbufView[i] = strbin.charCodeAt(i);\r\n\t\t}\r\n\r\n\t\treturn bufView;\r\n\t}\r\n\r\n\tstatic toHex(buffer) {\r\n\t\treturn Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('');\r\n\t}\r\n\r\n\tstatic toBase64(buffer) {\r\n\t\treturn btoa(new Uint8Array(buffer));\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * A module loading Event class\r\n * @module Events\r\n */\r\n\r\n/**\r\n * Extends native event by adding helper functions\r\n */\r\nexport default class Event extends EventTarget {\r\n\r\n    #listeners = new Set();\r\n\r\n    #list(type = '', listener) {\r\n        const me = this;\r\n        const list = Array.from(me.#listeners);\r\n        return me.#isFunction(listener) ? \r\n            list.filter(o => o.type === type && o.listener === listener)\r\n            :\r\n            list.filter(o => o.type === type);\r\n    }\r\n\r\n    #isFunction(fn) {\r\n        return typeof fn === 'function';\r\n    }\r\n\r\n    addEventListener(type, listener, opt) {\r\n        const me = this;\r\n        if (!me.#isFunction(listener)) return false;\r\n        me.#listeners.add({ type: type, listener: listener });        \r\n        return super.addEventListener(type, listener, opt);\r\n    }\r\n\r\n    removeEventListener(type, listener) {\r\n        const me = this;\r\n        const list = me.#list(type, listener);\r\n        list.forEach(o => super.removeEventListener(o.type, o.listener))\r\n        list.forEach(o => me.#listeners.delete(o)); \r\n    }\r\n\r\n    /**\r\n     * Remove all listeners\r\n     */\r\n    unbind() {\r\n        const me = this;\r\n        Array.from(me.#listeners).forEach(o => {\r\n            super.removeEventListener(o.type, o.listener);\r\n        });\r\n        me.#listeners.clear();\r\n    }\r\n\r\n    /**\r\n     * Listen for events\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    on(type = '', listener) {\r\n        return this.addEventListener(type, listener);\r\n    }\r\n\r\n    /**\r\n     * Listen for events only once\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    once(type, listener) {\r\n        const me = this;\r\n        let wrap = (e) => {\r\n            listener(e);\r\n            wrap = null;\r\n        }\r\n        wrap.type = type;\r\n        wrap.listener = listener;\r\n        return me.addEventListener(type, wrap, { once: true });\r\n    }\r\n\r\n    /**\r\n     * Stop listening for events\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {Function} listener  Callback to be called on event trigger\r\n     */\r\n    off(type = '', listener) {\r\n        return this.removeEventListener(type, listener);\r\n    }\r\n\r\n    /**\r\n     * Send event to listeners\r\n     * \r\n     * @param {string} type Event name to be listened\r\n     * @param {object} data  Data to send \r\n     */\r\n    emit(type, data) {\r\n        if (!type) return false;\r\n        const evt = new CustomEvent(type, { detail: data });\r\n        return this.dispatchEvent(evt);\r\n    }\r\n\r\n    send(type, data) {this.emit(type, data);}\r\n    listen(type, listener) {this.on(type, listener);}\r\n    unlisten(type, listener) {this.off(type, listener);}\r\n\r\n    /**\r\n     * Wait for an event \r\n     * @param {string} type Event name to be listened\r\n     * @returns {Event}\r\n     */\r\n\twait(type = '') {\r\n        if (!type) return e('Event undefined!');\r\n\t\tconst me = this;\r\n\t\treturn new Promise((r, e) => {\r\n\t\t\tme.once(type, (e) => r(e));\r\n\t\t});\r\n\t}\r\n \r\n\t/**\r\n\t * Generic prevent event bubling\r\n\t * \r\n\t * @param {Event} e \r\n\t */\r\n\tstatic prevent(e) {\r\n\t\tif (Event.#isFunction(e, 'preventDefault')) e.preventDefault();\r\n\t\tif (Event.#isFunction(e, 'stopPropagation')) e.stopPropagation();\r\n\t}\r\n\r\n    static {\r\n        Object.freeze(Event);\r\n    }\r\n\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Browser native compression\r\n */\r\nexport default class Streams {\r\n\r\n\tstatic get isAvailable() {\r\n\t\treturn typeof CompressionStream !== 'undefined' &&\r\n\t\t\ttypeof DecompressionStream !== 'undefined';\r\n\t}\r\n\r\n\tstatic convert(data) {\r\n\t\tif (data instanceof Uint8Array) return data;\r\n\t\tif (data instanceof ArrayBuffer) return new Uint8Array(data);\r\n\t\tif (typeof data === 'string' ) return new TextEncoder().encode(data);\r\n\t\tif (Array.isArray(data)) return new Uint8Array(data);\r\n\t\treturn this.convert(JSON.stringify(data));\r\n\t}\r\n\r\n\tstatic #stream(data, stream, decompress) {\r\n\t\tconst byteArray = this.convert(data);\r\n\t\tif (decompress && !this.isCompressed(byteArray)) return data;\r\n\t\tconst writer = stream.writable.getWriter();\r\n\t\twriter.write(byteArray);\r\n\t\twriter.close();\r\n\t\treturn new Response(stream.readable);\r\n\t}\r\n\r\n\t/**\r\n\t * Compress to gzip format\r\n\t * @param {*} data \r\n\t * @param {*} encoding gzip | deflate (zlib)\r\n\t * @returns {Response} \r\n\t */\t\r\n\tstatic compress(data, encoding = 'gzip') {\r\n\t\tconst stream = new CompressionStream(encoding);\r\n\t\treturn this.#stream(data, stream, false);\r\n\t}\r\n\r\n\t/**\r\n\t * Decompress from gzip format\r\n\t * @param {*} data \r\n\t * @param {*} encoding gzip | deflate (zlib)\r\n\t * @returns {Response} \r\n\t */\r\n\tstatic decompress(data, encoding = 'gzip') {\r\n\t\tconst stream = new DecompressionStream(encoding);\r\n\t\treturn this.#stream(data, stream, true);\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 2 bytes mathes gzip/deflate header signature\r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\r\n\tstatic isCompressed(data) {\r\n\t\tconst me = this;\r\n\t\tdata = me.convert(data);\r\n\t\treturn me.isGzip(data) || me.isZlib(data);\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 3 bytes matches gzip header signature\r\n\t * \r\n\t * zlib\r\n\t * 1F 8B 08\r\n\t * 31 139 8\r\n\t * \r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\t\r\n\tstatic isGzip(data) {\r\n\t\treturn data.at(0) === 31 && data.at(1) === 139 && data.at(2) === 8;\r\n\t}\r\n\r\n\t/**\r\n\t * If  1st 2 bytes matches deflate (zlib) header signature\r\n\t * \r\n\t * deflate\r\n\t * 78  (01, 5e,9c, da) \r\n\t * 120 (1, 94, 156, 218)\r\n\t * @param {ArrayBuffer|Uint8Array} data \r\n\t */\t\r\n\tstatic isZlib(data) {\r\n\t\treturn data.at(0) === 120 && [1, 94, 156, 218].indexOf(data.at(1)) > -1;\r\n\t}\r\n\r\n\tstatic isJson(data) {\r\n\t\tconst me = this;\r\n\t\tdata = typeof data === 'string' ? data.trim() : me.convert(data);\r\n\t\tconst first = data.at(0);\r\n\t\tconst last = data.at(data.length - 1);\t\t\r\n\t\treturn me.#isJsonArray(first, last) || me.#isJsonObj(first, last);\r\n\t}\r\n\r\n\tstatic #isJsonObj(first, last) {\r\n\t\treturn (first === '{' || first === 123)  && (last === '}' || last === 125);\r\n\t}\r\n\r\n\tstatic #isJsonArray(first, last) {\r\n\t\treturn (first === '[' || first === 91)  && (last === ']' || last === 93);\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Security engine using Web Crypto API to encrypt / decrypt\r\n * messages between browser and server.\r\n *\r\n * Received RSA public key is signed and verified at the\r\n * browser side to prevent tampering\r\n */\r\n\r\nimport Buffer from \"./Buffer.mjs\";\r\n\r\nexport default class Security {\r\n\r\n\t#VERSION = 0;\r\n\t#encKEY = null;\r\n\t#aesKEY = null;\r\n\t#exportedAES = null;\r\n\r\n\t#encoder = new TextEncoder();\r\n\t#decoder = new TextDecoder();\r\n\r\n\t/**\r\n\t *  Use local challenge, to verify received data signature\r\n\t *\r\n\t *  @param {Object} cfg\r\n\t *      Data received from server contins public key and signature\r\n\t */\r\n\tgetChallenge(cfg) {\r\n\t\treturn [cfg.challenge || '', cfg.keyEnc || '', cfg.keyVer || ''].join('');\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Create random bytes\r\n\t *\r\n\t * @param {int} size\r\n\t *     length of data (required)\r\n\t */\r\n\tgetRandom(size) {\r\n\t\tconst array = new Uint8Array(size);\r\n\t\tcrypto.getRandomValues(array);\r\n\t\treturn array;\r\n\t}\r\n\r\n\t/**\r\n\t * Create AES key for data encryption\r\n\t * @returns CryptoKey\r\n\t */\r\n\tasync generateAesKey() {\r\n\t\tconst type = {\r\n\t\t\tname: \"AES-CTR\",\r\n\t\t\tlength: 128\r\n\t\t};\r\n\t\tconst mode = [\"encrypt\", \"decrypt\"];\r\n\t\treturn crypto.subtle.generateKey(type, true, mode);\r\n\t}\r\n\r\n\t/**\r\n\t * Extract CryptoKey into RAW bytes\r\n\t * @param {CryptoKey} key\r\n\t * @returns Uin8Array\r\n\t */\r\n\tasync exportAesKey(key) {\r\n\t\tconst buffer = await crypto.subtle.exportKey(\"raw\", key);\r\n\t\treturn new Uint8Array(buffer);\r\n\t}\r\n\r\n\t/**\r\n\t * Import RSA key received from server\r\n\t * Key is publicKey used to send encrypted AES key\r\n\t *\r\n\t * @param {String} key\r\n\t *          PEM encoded key without headers,\r\n\t *          flattened in a single line\r\n\t *\r\n\t * @param {Object} type\r\n\t *          Crypto API key definition format\r\n\t *\r\n\t * @param {String} mode\r\n\t *          Key usage 'encrypt' or 'decrypt'\r\n\t */\r\n\tasync importRsaKey(key, type, mode) {\r\n\r\n\t\tconst binaryDer = Buffer.from(key, 'base64');\r\n\r\n\t\treturn crypto.subtle.importKey(\r\n\t\t\t\"spki\",\r\n\t\t\tbinaryDer,\r\n\t\t\ttype,\r\n\t\t\ttrue,\r\n\t\t\t[mode]\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Verify signature\r\n\t *\r\n\t * @param {CryptoKey}\r\n\t *      Public key used for verification\r\n\t *\r\n\t * @param {ArrayBuffer} signature\r\n\t *        Signature of received data\r\n\t *\r\n\t * @param {ArrayBuffer} challenge\r\n\t *        Challenge to verify with signature (ts + pemENCDEC + pemVERSGN)\r\n\t */\r\n\tasync verify(key, signature, challenge) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst binSignature = Buffer.from(signature, 'base64');\r\n\t\tconst binChallenge = me.#encoder.encode(challenge);\r\n\r\n\t\tconst type = {\r\n\t\t\tname: \"ECDSA\",\r\n\t\t\thash: {\r\n\t\t\t\tname: \"SHA-384\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\treturn crypto.subtle.verify(\r\n\t\t\ttype,\r\n\t\t\tkey,\r\n\t\t\tbinSignature,\r\n\t\t\tbinChallenge\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Encrypt message with RSA key\r\n\t *\r\n\t * @param {String || ArrayBuffer} data\r\n\t *        String or AraryBuffer to encrypt\r\n\t */\r\n\tasync encryptRSA(data) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet encoded = data;\r\n\r\n\t\tif (typeof data === 'string') {\r\n\t\t\tencoded = me.#encoder.encode(data);\r\n\t\t}\r\n\r\n\t\treturn crypto.subtle.encrypt(\r\n\t\t\t\"RSA-OAEP\",\r\n\t\t\tme.#encKEY,\r\n\t\t\tencoded\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Encrypt message with AES\r\n\t */\r\n\tasync encryptAesMessage(key, iv, data) {\r\n\r\n\t\tconst encoded = this.#encoder.encode(data);\r\n\t\tconst type = {\r\n\t\t\tname: \"AES-CTR\",\r\n\t\t\tcounter: iv,\r\n\t\t\tlength: 128\r\n\t\t};\r\n\r\n\t\treturn crypto.subtle.encrypt(type, key, encoded);\r\n\t}\r\n\r\n\t/**\r\n\t * Decrypt AES encrypted message\r\n\t */\r\n\tasync decryptAesMessage(key, iv, data) {\r\n\r\n\t\tconst databin = Buffer.from(data, \"hex\");\r\n\t\tconst counter = Buffer.from(iv, \"hex\");\r\n\r\n\t\tconst type = {\r\n\t\t\tname: \"AES-CTR\",\r\n\t\t\tcounter: counter,\r\n\t\t\tlength: 128\r\n\t\t};\r\n\r\n\t\treturn crypto.subtle.decrypt(type, key, databin);\r\n\t}\r\n\r\n\tget isValid() {\r\n\t\tconst me = this;\r\n\t\treturn me.#encKEY !== null && me.#aesKEY !== null;\r\n\t}\r\n\r\n\tstatic get isAvailable() {\r\n\t\treturn crypto.subtle != null;\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize encryption and verification keys\r\n\t * Verifies data signatures to prevent tampering\r\n\t */\r\n\tasync init(cfg) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (!Security.isAvailable) {\r\n\t\t\tconsole.log('Security mode not available, TLS protocol required.');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconsole.log('Security Initializing...');\r\n\r\n\t\tme.#VERSION++;\r\n\r\n\t\tme.#encKEY = await me.importRsaKey(cfg.keyEnc, {\r\n\t\t\tname: 'RSA-OAEP',\r\n\t\t\thash: 'SHA-256'\r\n\t\t}, 'encrypt');\r\n\r\n\t\tme.#aesKEY = await me.generateAesKey();\r\n\t\tme.#exportedAES = await me.exportAesKey(me.#aesKEY);\r\n\r\n\t\tconst verKey = await me.importRsaKey(cfg.keyVer, {\r\n\t\t\tname: 'ECDSA',\r\n\t\t\tnamedCurve: \"P-384\"\r\n\t\t}, 'verify');\r\n\r\n\t\tconst status = await me.verify(verKey, cfg.signature, me.getChallenge(cfg || {}));\r\n\r\n\t\tif (!status) {\r\n\t\t\tme.#encKEY = null;\r\n\t\t\tme.#aesKEY = null;\r\n\t\t\tme.#exportedAES = null;\r\n\t\t\tthrow new Error('Signature invalid');\r\n\t\t}\r\n\r\n\t\tconsole.log('Security Initialized!');\r\n\r\n\t}\r\n\r\n\t/**\r\n\t *  Ecnrypt received data in format {d:.., k:...}\r\n\t * @param\r\n\t * \t\tdata  - string to encrypt\r\n\t */\r\n\tasync encrypt(data, bin) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst iv = me.getRandom(16);\r\n\t\tconst key = new Uint8Array(iv.length + me.#exportedAES.length);\r\n\r\n\t\tkey.set(iv);\r\n\t\tkey.set(me.#exportedAES, iv.length);\r\n\r\n\t\tconst str = (typeof data === 'string') ? data : JSON.stringify(data);\r\n\t\tconst encryptedKey = await me.encryptRSA(key);\r\n\t\tconst encryptedData = await me.encryptAesMessage(me.#aesKEY, iv, str);\r\n\r\n\t\tif (bin === true) {\r\n\t\t\treturn {\r\n\t\t\t\tt: '1',\r\n\t\t\t\td: encryptedData,\r\n\t\t\t\tk: encryptedKey\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tt: '1',\r\n\t\t\td: Buffer.to(encryptedData, 'hex'),\r\n\t\t\tk: Buffer.to(encryptedKey, 'hex')\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decrypt received data in format {d:.., k:...}\r\n\t *\r\n\t * @param\r\n\t * \t\tcfg  - data elements to decrypt\r\n\t * \t\tcfg.d - aes encrypted server resposne\r\n\t * \t\tcfg.k - aes IV used for masking\r\n\t *\r\n\t */\r\n\tasync decrypt(cfg) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst iv = cfg.iv;\r\n\t\tconst data = cfg.d;\r\n\r\n\t\tconst message = await me.decryptAesMessage(me.#aesKEY, iv, data);\r\n\r\n\t\tconst str = me.#decoder.decode(message);\r\n\t\tconst obj = JSON.parse(str);\r\n\r\n\t\tif (obj && obj.type == 'ws' && obj.cmd === 'data') {\r\n\t\t\treturn obj.data;\r\n\t\t}\r\n\r\n\t\treturn obj;\r\n\t}\r\n\r\n\tstatic async init(cfg) {\r\n\t\tconst security = new Security();\r\n\t\tawait security.init(cfg);\r\n\t\treturn security;\r\n\t}\r\n\r\n};\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Queue to handle requests\r\n */\r\nexport default class Queue extends Map {\r\n\r\n\t#up = 0;\r\n\t#down = 0;\r\n\t#tid = 0;\r\n\r\n\t/**\r\n\t * Update counters and queue to link resposnes to requests\r\n\t * @param {Object} req\r\n\t *      Request data\r\n\t */\r\n\tupdateRequest(req) {\r\n\t\tconst me = this;\r\n\t\tme.#tid++;\r\n\t\tme.#up++;\r\n\t\treq.tid = me.#tid.toString();\r\n\t\tme.set(req.tid, req);\r\n\t}\r\n\r\n\t/**\r\n\t * Reset queue to remove old stalled elements\r\n\t */\r\n\treset() {\r\n\t\tconst me = this;\r\n\t\tif (me.#up > 50 && me.#down >= me.#up) {\r\n\t\t\tme.#up = 0;\r\n\t\t\tme.#down = 0;\r\n\t\t\tme.clear();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Process array of response records\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\tprocess(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst unknown = [];\r\n\r\n\t\tif (Array.isArray(obj)) {\r\n\t\t\tobj.forEach((o) => {\r\n\t\t\t\tconst res = me.execute(o);\r\n\t\t\t\tif (res) unkown.push(res);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconst o = me.execute(obj);\r\n\t\t\tif (o) unknown.push(o);\r\n\t\t}\r\n\r\n\t\treturn unknown;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Process single response record\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\texecute(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst tid = obj.tid;\r\n\t\tlet unknown = null;\r\n\r\n\t\tme.#down++;\r\n\r\n\t\tif (me.has(tid)) {\r\n\t\t\tconst req = me.get(tid);\r\n\t\t\ttry {\r\n\t\t\t\treq.finish(obj);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log(e);\r\n\t\t\t\treq.finish(e);\r\n\t\t\t} finally {\r\n\t\t\t\tme.delete(tid);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tunknown = obj;\r\n\t\t}\r\n\r\n\t\tme.reset();\r\n\r\n\t\treturn unknown;\r\n\t}\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * API engine asynchronous request\r\n */\r\nexport default class Request {\r\n\r\n    #id = 0;\r\n    #timeout = 0;\r\n    #callback;\r\n    \r\n    constructor(timeout , callback) {\r\n        const me = this;\r\n        me.#callback = callback;\r\n        me.#timeout = timeout;\r\n        me.#init();\r\n    }\r\n\r\n    get(object, property, receiver) {\r\n        const me = this;\r\n        if (property === 'timeout') return me.timeout;\r\n        if (property === 'finish') return me.callback.bind(me);\r\n        return object[property];\r\n    }\r\n\r\n    callback(o) {\r\n        const me = this;\r\n        if (me.timeout) return;\r\n        me.#clear();\r\n        return me.#callback(o);\r\n    }\r\n\r\n    get timeout() {\r\n        return this.#timeout === true;\r\n    }\r\n\r\n    #clear() {\r\n        const me = this;\r\n        if (me.#id === 0) return;\r\n        clearTimeout(me.#id);\r\n    }\r\n\r\n    #init() {\r\n        const me = this;\r\n        if (me.#timeout === 0) return;\r\n        me.#id = setTimeout(() => {\r\n            me.#timeout = true;\r\n            me.#callback(new Error('Call timeouted!'));\r\n        }, me.#timeout);\r\n    }\r\n\r\n    static wrap(data, timeout , callback) {\r\n        return new Proxy(data, new Request(timeout , callback));\r\n    }\r\n}","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport Event from \"./Event.mjs\";\r\nimport Request from \"./Request.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to call remote services.\r\n * All Direct functions linked to defiend namespace\r\n */\r\nexport default class Generator extends Event {\r\n\r\n\t#model = {};\r\n\t#id = null;\r\n\t#cnt = 0;\r\n\t#timeout = 0;\r\n\r\n\tconstructor(id = 0, timeout = 0) {\r\n\t\tsuper();\r\n\t\tthis.#id = id;\r\n\t\tthis.#timeout = timeout;\r\n\t}\r\n\r\n\t/**\r\n\t * Return generted API structure and callers\r\n\t */\r\n\tget api() {\r\n\t\treturn this.#model;\r\n\t}\r\n\r\n\t/**\r\n\t * Disconnect generator from API callers\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\t\tme.off('call');\r\n\t\tme.off('api');\r\n\t\tme.off('raw');\r\n\t\tme.off('error');\r\n\t\tme.#detach();\r\n\t}\r\n\r\n\t#cleanup(obj, id) {\r\n\t\tfor (let k in obj) {\r\n\t\t\tlet el = obj[k];\r\n\t\t\tif (typeof el === 'object') {\r\n\t\t\t\tif (this.#cleanup(el, id)) obj[k] = null;\r\n\t\t\t} else if (el._id_ === id) {\r\n\t\t\t\tobj[k] = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Object.values(obj).filter(o => o != null).length === 0;\r\n\t}\r\n\r\n\t#detach() {\r\n\t\tconst me = this;\r\n\t\tme.#cleanup(me.#model, me.#id);\r\n\t\tme.#model = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Build JS object with callable functions that maps to Java side methods\r\n\t * Data is retrieved from API service\r\n\t *\r\n\t * @param {String} url || api object\r\n\t * \t\t  URL Address for API service definitions\r\n\t */\r\n\tbuild(o) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst data = o ? o.api || o : null;\r\n\r\n\t\tif (data) me.#buildAPI(data);\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * From API tree generate namespace tree and\r\n\t * links generated functions to WebScoket api calls\r\n\t *\r\n\t * @param {Object} cfg\r\n\t * \t\tAlternative definition to API\r\n\t */\r\n\t#buildAPI(cfg) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (Array.isArray(cfg)) {\r\n\t\t\tcfg.forEach(v => me.#buildInstance(v));\r\n\t\t} else {\r\n\t\t\tme.#buildInstance(cfg);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Build from single definition\r\n\t *\r\n\t * @param {Object} api\r\n\t * \t\t  Java Class/Method definition\r\n\t */\r\n\t#buildInstance(api) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet tree = null;\r\n\t\tlet action = null;\r\n\r\n\t\ttree = me.#buildNamespace(api.namespace);\r\n\r\n\t\tif (!tree[api.action]) {\r\n\t\t\ttree[api.action] = {};\r\n\t\t}\r\n\t\taction = tree[api.action];\r\n\r\n\t\tapi.methods?.forEach(v => me.#buildMethod(api.namespace, api.action, action, v, me.#id));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generate namespace object structure from string version\r\n\t *\r\n\t * @param  {String} namespace\r\n\t * \t\t\tTree structure delimited with dots\r\n\t *\r\n\t * @return {Object}\r\n\t * \t\t\tObject tree structure\r\n\t */\r\n\t#buildNamespace(namespace) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tlet tmp = globalThis;\r\n\t\tlet tmp2 = me.#model;\r\n\r\n\t\tnamespace.split('.').every(v => {\r\n\r\n\t\t\tif (!tmp[v]) tmp[v] = {};\r\n\t\t\ttmp = tmp[v];\r\n\r\n\t\t\tif (!tmp2[v]) tmp2[v] = tmp;\r\n\t\t\ttmp2 = tmp;\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn tmp;\r\n\t}\r\n\r\n\t/**\r\n\t * Build instance methods\r\n\t *\r\n\t * @param {String} namespace\r\n\t * @param {String} action\r\n\t * @param {String} instance\r\n\t * @param {Array} api\r\n\t */\r\n\t#buildMethod(namespace, action, instance, api, id) {\r\n\r\n\t\tconst enc = api.encrypt === false ? false : true;\r\n\t\tconst cfg = {\r\n\t\t\tn: namespace,\r\n\t\t\tc: action,\r\n\t\t\tm: api.name,\r\n\t\t\tl: api.len,\r\n\t\t\te: enc,\r\n\t\t\ti: id\r\n\t\t};\r\n\r\n\t\tinstance[api.name] = this.#apiFn(cfg);\r\n\t\tinstance[api.name]._id_ = id;\r\n\t\t// Object.freeze(instance[api.name]);\r\n\t}\r\n\r\n\t/**\r\n\t * Generic function used to attach for generated API\r\n\t *\r\n\t * @param {Array} params List of arguments from caller\r\n\t */\r\n\t#apiFn(params) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst prop = params;\r\n\r\n\t\tconst fn = function () {\r\n\r\n\t\t\tconst args = Array.prototype.slice.call(arguments);\r\n\r\n\t\t\tif (args.length != prop.l) throw new Error(`Invalid arguments length. Required (${prop.l})`);\r\n\r\n\t\t\tconst req = {\r\n\t\t\t\t\"namespace\": prop.n,\r\n\t\t\t\t\"action\": prop.c,\r\n\t\t\t\t\"method\": prop.m,\r\n\t\t\t\t\"id\": prop.i,\r\n\t\t\t\t\"e\": prop.e,\r\n\t\t\t\t\"data\": args,\r\n\t\t\t\t\"key\" : ++me.#cnt,\r\n\t\t\t\t\"tid\" : 0,\r\n\t\t\t\t\"ts\": Date.now()\r\n\t\t\t};\r\n\t\t\tObject.seal(req);\r\n\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst proxy = Request.wrap(req, me.#timeout, (obj) => {\r\n\t\t\t\t\t\tme.#onResponse(obj, resolve, reject);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tme.emit('call', proxy);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.log(e);\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn fn;\r\n\t}\r\n\r\n\t/**\r\n\t * Process remote response\r\n\t */\r\n\t#onResponse(obj, resolve, reject) {\r\n\r\n\t\tif (obj instanceof Error) return reject(obj);\r\n\r\n\t\tconst result = obj.result || obj;\r\n\r\n\t\tif (result.success) {\r\n\t\t\tresolve(result);\r\n\t\t} else {\r\n\t\t\treject(result);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Static instance builder\r\n\t * @param {object} cfg Api list from server side Quark engine\r\n\t * @param {number} id Unique Quark Engine ID - to link functions to the engine instance\r\n\t * @returns \r\n\t */\r\n\tstatic build(cfg, id, timeout) {\r\n\t\tconst generator = new Generator(id, timeout);\r\n\t\tgenerator.build(cfg);\r\n\t\treturn generator;\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport Event from \"./Event.mjs\";\r\nimport Queue from \"./Queue.mjs\";\r\nimport Streams from \"./Streams.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to call remote services.\r\n * All Direct functions linked to io.greenscreens namespace\r\n */\r\nexport default class SocketChannel extends Event {\r\n\r\n\t#queue = new Queue();\r\n\t#webSocket = null;\r\n\t#engine = null;\r\n\r\n\t/**\r\n\t * Initialize Socket channel\r\n\t */\r\n\tasync init(engine) {\r\n\r\n\t\tconst me = this;\r\n\t\tme.stop();\r\n\t\tme.#engine = engine;\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tme.#startSocket(resolve, reject);\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tget isOpen() {\r\n\t\tconst me = this;\r\n\t\tif (me.#webSocket == null) return false;\r\n\t\treturn me.#webSocket.readyState === me.#webSocket.OPEN;\r\n\t}\r\n\r\n\t/**\r\n\t * Close WebSocket channel if available\r\n\t */\r\n\tstop() {\r\n\t\tconst me = this;\r\n\t\tif (me.#webSocket == null) return false;\r\n\t\tme.#webSocket.close();\r\n\t\tme.#webSocket = null;\r\n\t\tme.#engine = null;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Check if data can be encrypted\r\n\t *\r\n\t * @param {Object} req\r\n\t */\r\n\t#canEncrypt(req) {\r\n\t\tconst hasArgs = Array.isArray(req.data) && req.data.length > 0 && req.e !== false;\r\n\t\treturn this.#engine.Security.isValid && hasArgs;\r\n\t}\r\n\r\n\t/**\r\n\t * Prepare remote call, encrypt if avaialble\r\n\t *\r\n\t * @param {Object} req\r\n\t *         Data to send (optionaly encrypt)\r\n\t */\r\n\tasync #onCall(req) {\r\n\r\n\t\treq = req.detail;\r\n\r\n\t\tconst me = this;\r\n\t\tlet msg = null;\r\n\r\n\t\tif (req.id !== me.#engine.id) return;\r\n\r\n\t\tconst isEncrypt = me.#canEncrypt(req);\r\n\r\n\t\tme.#queue.updateRequest(req);\r\n\r\n\t\t// encrypt if supported\r\n\t\tif (isEncrypt) {\r\n\t\t\tconst enc = await me.#engine.Security.encrypt(req.data);\r\n\t\t\tconst payload = Object.assign({}, me.#engine.querys || {}, enc || {});\r\n\t\t\treq.data = [payload];\r\n\t\t}\r\n\r\n\t\tconst data = {\r\n\t\t\tcmd: isEncrypt ? 'enc' : 'data',\r\n\t\t\ttype: 'ws',\r\n\t\t\tdata: [req]\r\n\t\t};\r\n\r\n\t\tmsg = JSON.stringify(data);\r\n\r\n\t\tif (!Streams.isAvailable) {\r\n\t\t\treturn me.#webSocket.send(msg);\r\n\t\t}\r\n\r\n\t\tmsg = await Streams.compress(msg).arrayBuffer();\r\n\t\tme.#webSocket.send(msg);\r\n\t}\r\n\r\n\tasync #startSocket(resolve, reject) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tconst challenge = Date.now();\r\n\t\tconst url = new URL(engine.serviceURL);\r\n\r\n\t\tconst headers = Object.assign({}, engine.headers || {});\r\n\t\tconst querys = Object.assign({}, engine.querys || {});\r\n\t\tquerys.q = challenge;\r\n\t\tquerys.c = Streams.isAvailable;\r\n\r\n\t\tObject.entries(querys || {}).forEach((v) => {\r\n\t\t\turl.searchParams.append(v[0], encodeURIComponent(v[1]));\r\n\t\t});\r\n\r\n\t\tme.#webSocket = new WebSocket(url.toString(), ['ws4is']);\r\n\t\tme.#webSocket.binaryType = \"arraybuffer\";\r\n\r\n\t\tconst onCall = me.#onCall.bind(me);\r\n\r\n\t\tme.#webSocket.onopen = (event) => {\r\n\r\n\t\t\tme.emit('online', event);\r\n\t\t\tgenerator.on('call', onCall);\r\n\r\n\t\t\tif (!engine.isWSAPI) {\r\n\t\t\t\treturn resolve(true);\r\n\t\t\t}\r\n\r\n\t\t\tgenerator.once('api', async (data) => {\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tdata.challenge = challenge;\r\n\t\t\t\t\tawait engine.registerAPI(data);\r\n\t\t\t\t\tresolve(true);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\r\n\t\t};\r\n\r\n\t\tme.#webSocket.onclose = (event) => {\r\n\t\t\tgenerator.off('call', onCall);\r\n\t\t\tme.stop();\r\n\t\t\tme.emit('offline', event);\r\n\t\t}\r\n\r\n\t\tme.#webSocket.onerror = (event) => {\r\n\t\t\tgenerator.off('call', onCall);\r\n\t\t\treject(event);\r\n\t\t\tme.stop();\r\n\t\t\tme.emit('error', event);\r\n\t\t};\r\n\r\n\t\tme.#webSocket.onmessage = async (event) => {\r\n\t\t\ttry {\r\n\t\t\t\tif (event.data instanceof ArrayBuffer) {\r\n\t\t\t\t\tawait me.#prepareBinaryMessage(event.data);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tawait me.#prepareTextMessage(event.data);\r\n\t\t\t\t}\r\n\t\t\t} catch(e) {\r\n\t\t\t\tgenerator.emit('error', e);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tasync #prepareBinaryMessage(message) {\r\n\t\tconst me = this;\r\n\t\tif (Streams.isAvailable && Streams.isCompressed(message)) {\r\n\t\t\tconst resp = Streams.decompress(message);\r\n\t\t\tmessage = await resp.arrayBuffer();\r\n\t\t}\r\n\t\tconst isJSON = Streams.isJson(message);\r\n\t\tif (isJSON) {\r\n\t\t\tconst text = new TextDecoder().decode(message);\t\t\r\n\t\t\tme.#prepareTextMessage(text);\r\n\t\t} else {\r\n\t\t\tgenerator.emit('raw', message);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Parse and prepare received message for processing\r\n\t *\r\n\t * @param {String} mesasge\r\n\t *\r\n\t */\r\n\tasync #prepareTextMessage(message) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\ttry {\r\n\t\t\tconst isJSON = Streams.isJson(message);\r\n\r\n\t\t\tif (isJSON) {\r\n\t\t\t\tconst obj = JSON.parse(message);\r\n\t\t\t\tme.#onMessage(obj);\r\n\t\t\t} else {\r\n\t\t\t\tgenerator.emit('raw', message);\r\n\t\t\t}\r\n\r\n\t\t} catch (e) {\r\n\t\t\tgenerator.emit('error', e);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Process received message\r\n\t *\r\n\t * @param {*} msg\r\n\t *\r\n\t */\r\n\tasync #onMessage(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tlet data = null;\r\n\r\n\t\tconst engine = me.#engine;\r\n\t\tconst generator = engine.Generator;\r\n\t\tconst security = engine.Security;\r\n\r\n\t\tif (obj.cmd === 'api') {\r\n\t\t\treturn generator.emit('api', obj.data);\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'err') {\r\n\t\t\treturn generator.emit('error', obj.result);\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'enc') {\r\n\t\t\tif (security.isValid) {\r\n\t\t\t\tdata = await security.decrypt(obj);\r\n\t\t\t} else {\r\n\t\t\t\treturn generator.emit('error', new Error('Security available on https/wss only'));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (obj.cmd === 'data') {\r\n\t\t\tdata = obj.data;\r\n\t\t}\r\n\r\n\t\tif (data) {\r\n\t\t\tconst unknown = me.#queue.process(data);\r\n\t\t\tunknown.forEach((obj) => me.emit('message', obj));\r\n\t\t} else {\r\n\t\t\tme.emit('message', data);\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Web Requester Engine\r\n * Used to call remote services through HTTP/S\r\n */\r\nexport default class WebChannel {\r\n\r\n\t#engine = null;\r\n\r\n\t/**\r\n\t * If http/s used in url, make standard fetch call to the defined service\r\n\t */\r\n\tasync init(engine) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tif (me.#engine) me.stop();\r\n\r\n\t\tme.#engine = engine;\r\n\t\tconst generator = engine.Generator;\r\n\r\n\t\tconst data = await me.#getAPI(engine.apiURL);\r\n\t\tawait engine.registerAPI(data);\r\n\r\n\t\tif (engine.isSockChannel) return;\r\n\r\n\t\tgenerator.on('call', me.#onRequest.bind(me));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Disengage listeners and links\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tme.#engine = null;\r\n\r\n\t\tengine.Generator.off('call');\r\n\t\tif (engine.isSockChannel) return;\r\n\t\ttry {\r\n\t\t\tfetch(engine.serviceURL, {\r\n\t\t\t\tmethod: 'delete'\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Callback for API call request,\r\n\t * here we make remote API call\r\n\t */\r\n\tasync #onRequest(req) {\r\n\r\n\t\treq = req.detail;\r\n\t\tconst me = this;\r\n\t\tlet o = null;\r\n\t\tlet e = null;\r\n\r\n\t\tif (req.id !== me.#engine.id) return;\r\n\r\n\t\ttry {\r\n\t\t\to = await me.#onCall(me.#engine, req);\r\n\t\t\treq.finish(o);\r\n\t\t} catch (err) {\r\n\t\t\treq.finish(err);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Get API definition through HTTP/s channel\r\n\t *\r\n\t * @param {String} url\r\n\t * \t\t  URL Address for API service definitions\r\n\t */\r\n\tasync #getAPI(url) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst service = url;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst id = Date.now();\r\n\r\n\t\tconst headers = Object.assign({}, engine.headers || {}, { 'x-time': id });\r\n\r\n\t\tconst resp = await fetch(service, {\r\n\t\t\tmethod: 'get',\r\n\t\t\theaders: headers,\r\n\t\t\tcredentials: 'same-origin'\r\n\t\t});\r\n\r\n\t\tconst data = await resp.json();\r\n\r\n\t\t// update local challenge for signature verificator\r\n\t\tdata.challenge = id.toString();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Send data to server with http/s channel\r\n\t */\r\n\tasync #fetchCall(url, data) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst engine = me.#engine;\r\n\t\tconst MIME = 'application/json';\r\n\t\tconst HEADERS_ = {\r\n\t\t\t'Accept': MIME,\r\n\t\t\t'Content-Type': MIME,\r\n\t\t\t'Accept-Encoding': 'gzip,deflate,br'\r\n\t\t};\r\n\r\n\t\tconst service = new URL(url);\r\n\t\tconst headers = Object.assign({}, engine.headers || {}, HEADERS_);\r\n\t\tconst querys = Object.assign({}, engine.querys || {});\r\n\t\tconst payload = Object.assign({}, engine.querys || {}, data || {});\r\n\t\tconst body = JSON.stringify(payload);\r\n\t\tconst req = {\r\n\t\t\tmethod: 'post',\r\n\t\t\theaders: headers,\r\n\t\t\tbody: body\r\n\t\t};\r\n\t\tObject.entries(querys || {}).forEach((v) => {\r\n\t\t\tservice.searchParams.append(v[0], encodeURIComponent(v[1]));\r\n\t\t});\r\n\t\tconst res = await fetch(service.toString(), req);\r\n\t\tconst json = await res.json();\r\n\r\n\t\treturn json;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Prepare remote call, encrypt if available\r\n\t *\r\n\t * @param {String} url\r\n\t *        Service URL to receive data\r\n\t *\r\n\t * @param {Object} req\r\n\t *         Data to send (optionally encrypt)\r\n\t */\r\n\tasync #onCall(engine, req) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst security = engine.Security;\r\n\t\tconst url = engine.serviceURL;\r\n\r\n\t\tconst hasArgs = Array.isArray(req.data) && req.data.length > 0;\r\n\t\tconst shouldEncrypt = security.isValid && hasArgs;\r\n\t\tlet data = req;\r\n\r\n\t\t// encrypt if supported\r\n\t\tif (shouldEncrypt) {\r\n\t\t\tdata = await security.encrypt(req);\r\n\t\t}\r\n\r\n\t\t// send and wait for response\r\n\t\tdata = await me.#fetchCall(url, data);\r\n\r\n\t\t// if error throw\r\n\t\tif (data.cmd == 'err') {\r\n\t\t\tthrow new Error(data.result.msg);\r\n\t\t}\r\n\r\n\t\t// if encrypted, decrypt\r\n\t\tif (data.cmd === 'enc') {\r\n\t\t\tif (security.isValid) {\r\n\t\t\t\tdata = await security.decrypt(data);\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error('Security available on https/wss only');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// return server response\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport Generator from \"./Generator.mjs\";\r\nimport Security from \"./Security.mjs\";\r\nimport SocketChannel from \"./Socket.mjs\";\r\nimport WebChannel from \"./Web.mjs\";\r\n\r\n/**\r\n * Web and WebSocket API engine\r\n * Used to initialize remote API and remote services.\r\n */\r\nconst ERROR_MESSAGE = 'Invalid definition for Engine Remote Service';\r\nconst ERROR_API_UNDEFINED = 'API Url not defined!';\r\nconst ERROR_SVC_UNDEFINED = 'Service Url not defined!';\r\n\r\n/**\r\n * Main class for Quark Engine Client\r\n */\r\nexport default class Engine {\r\n\r\n\tconstructor(cfg) {\r\n\r\n\t\tcfg = cfg || {};\r\n\r\n\t\tif (!cfg.api) {\r\n\t\t\tthrow new Error(ERROR_API_UNDEFINED);\r\n\t\t}\r\n\r\n\t\tif (!cfg.service) {\r\n\t\t\tthrow new Error(ERROR_SVC_UNDEFINED);\r\n\t\t}\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tme.cfg = null;\r\n\t\tme.isWSAPI = false;\r\n\t\tme.isWebChannel = false;\r\n\t\tme.isSockChannel = false;\r\n\r\n\t\tme.Security = null;\r\n\t\tme.Generator = null;\r\n\t\tme.WebChannel = null;\r\n\t\tme.SocketChannel = null;\r\n\t\tme.id = Date.now();\r\n\r\n\t\tme.cfg = cfg;\r\n\t\tme.isWSAPI = cfg.api === cfg.service && cfg.api.indexOf('ws') == 0;\r\n\r\n\t\tme.headers = cfg.headers || {};\r\n\t\tme.querys = cfg.querys || {};\r\n\r\n\t\tme.isWebChannel = cfg.service.indexOf('http') === 0;\r\n\t\tme.isSockChannel = cfg.service.indexOf('ws') === 0;\r\n\r\n\t\tif ((me.isWebChannel || me.isSockChannel) === false) {\r\n\t\t\tthrow new Error(ERROR_MESSAGE);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/*\r\n\t * Initialize engine, throws error,\r\n\t */\r\n\tasync init() {\r\n\r\n\t\tconst me = this;\r\n\t\tif (me.isActive) return;\r\n\r\n\t\tme.Security = new Security();\r\n\t\tme.Generator = new Generator(me.id);\r\n\r\n\t\tif (me.isWebChannel || me.isWSAPI == false) {\r\n\t\t\tme.WebChannel = new WebChannel();\r\n\t\t\tawait me.WebChannel.init(me);\r\n\t\t}\r\n\r\n\t\tif (me.isSockChannel) {\r\n\t\t\tme.SocketChannel = new SocketChannel();\r\n\t\t\tawait me.SocketChannel.init(me);\r\n\t\t}\r\n\r\n\t\treturn me;\r\n\t}\r\n\r\n\t/**\r\n\t * Use internaly from channel to register received\r\n\t * API definitiona and security data\r\n\t */\r\n\tasync registerAPI(data) {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\t// initialize encryption if provided\r\n\t\tif (data.signature) {\r\n\t\t\tif (!me.Security?.isActive) {\r\n\t\t\t\tawait me.Security.init(data);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tme.Generator?.build(data.api);\r\n\t}\r\n\r\n\t/**\r\n\t * Stop engine instance by clearing all references\r\n\t * stoping listeners, stoping socket is avaialble\r\n\t */\r\n\tstop() {\r\n\r\n\t\tconst me = this;\r\n\r\n\t\tme.WebChannel?.stop();\r\n\t\tme.SocketChannel?.stop();\r\n\t\tme.Generator?.stop();\r\n\r\n\t\tme.WebChannel = null;\r\n\t\tme.SocketChannel = null;\r\n\t\tme.Generator = null;\r\n\t\tme.Security = null;\r\n\t\tme.cfg = null;\r\n\t}\r\n\r\n\t/*\r\n\t * Return generated API\r\n\t */\r\n\tget api() {\r\n\t\treturn this.Generator?.api || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Check if engine is active\r\n\t */\r\n\tget isActive() {\r\n\t\tconst me = this;\r\n\t\tif (me.SocketChannel && !me.SocketChannel.isOpen) return false;\r\n\t\treturn me.api && me.Security ? true : false;\r\n\t}\r\n\r\n\t/*\r\n\t * Return API URL address\r\n\t */\r\n\tget apiURL() {\r\n\t\treturn this.cfg?.api || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Return Service URL address\r\n\t */\r\n\tget serviceURL() {\r\n\t\treturn this.cfg?.service || null;\r\n\t}\r\n\r\n\t/*\r\n\t * Static instance builder\r\n\t */\r\n\tstatic async init(cfg) {\r\n\t\tconst engine = new Engine(cfg);\r\n\t\treturn engine.init();\r\n\t}\r\n}\r\n","\nimport * as QuarkEngine from './index.esm.mjs';\n\nglobalThis.QuarkEngine = QuarkEngine;"],"names":["Buffer","static","value","type","fromBase64","fromHex","toBase64","toHex","arry","i","length","push","parseInt","substr","Uint8Array","strbin","atob","buffer","ArrayBuffer","bufView","strLen","charCodeAt","Array","prototype","map","call","x","toString","slice","join","btoa","Event","EventTarget","listeners","Set","list","listener","from","this","isFunction","filter","o","fn","addEventListener","opt","add","super","removeEventListener","me","forEach","delete","unbind","clear","on","once","wrap","e","off","emit","data","evt","CustomEvent","detail","dispatchEvent","send","listen","unlisten","wait","Promise","r","preventDefault","stopPropagation","Object","freeze","Streams","isAvailable","CompressionStream","DecompressionStream","TextEncoder","encode","isArray","convert","JSON","stringify","stream","decompress","byteArray","isCompressed","writer","writable","getWriter","write","close","Response","readable","encoding","isGzip","isZlib","at","indexOf","first","trim","last","isJsonArray","isJsonObj","Security","VERSION","encKEY","aesKEY","exportedAES","encoder","decoder","TextDecoder","getChallenge","cfg","challenge","keyEnc","keyVer","getRandom","size","array","crypto","getRandomValues","async","subtle","generateKey","name","key","exportKey","mode","binaryDer","importKey","signature","binSignature","binChallenge","verify","hash","encoded","encrypt","iv","counter","databin","decrypt","isValid","importRsaKey","generateAesKey","exportAesKey","verKey","namedCurve","Error","bin","set","str","encryptedKey","encryptRSA","encryptedData","encryptAesMessage","t","d","k","to","message","decryptAesMessage","decode","obj","parse","cmd","security","init","Queue","Map","up","down","tid","updateRequest","req","reset","process","unknown","res","execute","unkown","has","get","finish","Request","id","timeout","callback","constructor","object","property","receiver","bind","clearTimeout","setTimeout","Proxy","Generator","model","cnt","api","stop","detach","cleanup","el","_id_","values","build","buildAPI","v","buildInstance","tree","action","buildNamespace","namespace","methods","buildMethod","tmp","globalThis","tmp2","split","every","instance","enc","n","c","m","l","len","apiFn","params","prop","args","arguments","method","ts","Date","now","seal","resolve","reject","proxy","onResponse","result","success","generator","SocketChannel","queue","webSocket","engine","startSocket","isOpen","readyState","OPEN","canEncrypt","hasArgs","msg","isEncrypt","payload","assign","querys","compress","arrayBuffer","url","URL","serviceURL","headers","q","entries","searchParams","append","encodeURIComponent","WebSocket","binaryType","onCall","onopen","event","isWSAPI","registerAPI","onclose","onerror","onmessage","prepareBinaryMessage","prepareTextMessage","resp","isJson","text","onMessage","WebChannel","getAPI","apiURL","isSockChannel","onRequest","fetch","err","service","credentials","json","MIME","HEADERS_","Accept","body","fetchCall","Engine","isWebChannel","isActive","QuarkEngine"],"mappings":"AAOe,MAAMA,OAEpBC,YAAYC,EAAOC,GAClB,OAAQA,GACP,IAAK,SACJ,OAAOH,OAAOI,WAAWF,GAC1B,IAAK,MACJ,OAAOF,OAAOK,QAAQH,GAExB,OAAOA,CACP,CAEDD,UAAUC,EAAOC,GAChB,OAAQA,GACP,IAAK,SACJ,OAAOH,OAAOM,SAASJ,GACxB,IAAK,MACJ,OAAOF,OAAOO,MAAML,GAEtB,OAAOA,CACP,CAEDD,eAAeC,GAEd,MAAMM,EAAO,GAEb,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAMQ,OAAQD,GAAK,EACtCD,EAAKG,KAAKC,SAAS,KAAOV,EAAMW,OAAOJ,EAAG,GAAI,KAG/C,OAAO,IAAIK,WAAWN,EACtB,CAEDP,kBAAkBC,GAEjB,MAAMa,EAASC,KAAKd,GACde,EAAS,IAAIC,YAAYH,EAAOL,QAChCS,EAAU,IAAIL,WAAWG,GAE/B,IAAK,IAAIR,EAAI,EAAGW,EAASL,EAAOL,OAAQD,EAAIW,EAAQX,IACnDU,EAAQV,GAAKM,EAAOM,WAAWZ,GAGhC,OAAOU,CACP,CAEDlB,aAAagB,GACZ,OAAOK,MAAMC,UAAUC,IAAIC,KAAK,IAAIX,WAAWG,IAASS,IAAM,KAAOA,EAAEC,SAAS,KAAKC,OAAO,KAAIC,KAAK,GACrG,CAED5B,gBAAgBgB,GACf,OAAOa,KAAK,IAAIhB,WAAWG,GAC3B,EC/Ca,MAAMc,cAAcC,YAE/BC,GAAa,IAAIC,IAEjBC,GAAMhC,EAAO,GAAIiC,GACb,MACMD,EAAOb,MAAMe,KADRC,MACgBL,GAC3B,OAFWK,MAEDC,EAAYH,GAClBD,EAAKK,QAAOC,GAAKA,EAAEtC,OAASA,GAAQsC,EAAEL,WAAaA,IAEnDD,EAAKK,QAAOC,GAAKA,EAAEtC,OAASA,GACnC,CAEDoC,GAAYG,GACR,MAAqB,mBAAPA,CACjB,CAEDC,iBAAiBxC,EAAMiC,EAAUQ,GAE7B,QADWN,MACHC,EAAYH,KADTE,MAERL,EAAWY,IAAI,CAAE1C,KAAMA,EAAMiC,SAAUA,IACnCU,MAAMH,iBAAiBxC,EAAMiC,EAAUQ,GACjD,CAEDG,oBAAoB5C,EAAMiC,GACtB,MAAMY,EAAKV,KACLH,EAAOa,GAAGb,EAAMhC,EAAMiC,GAC5BD,EAAKc,SAAQR,GAAKK,MAAMC,oBAAoBN,EAAEtC,KAAMsC,EAAEL,YACtDD,EAAKc,SAAQR,GAAKO,GAAGf,EAAWiB,OAAOT,IAC1C,CAKDU,SAEI7B,MAAMe,KADKC,MACGL,GAAYgB,SAAQR,IAC9BK,MAAMC,oBAAoBN,EAAEtC,KAAMsC,EAAEL,SAAS,IAFtCE,MAIRL,EAAWmB,OACjB,CAQDC,GAAGlD,EAAO,GAAIiC,GACV,OAAOE,KAAKK,iBAAiBxC,EAAMiC,EACtC,CAQDkB,KAAKnD,EAAMiC,GAEP,IAAImB,KAAQC,IACRpB,EAASoB,GACTD,KAAO,IAAI,EAIf,OAFAA,KAAKpD,KAAOA,EACZoD,KAAKnB,SAAWA,EANLE,KAODK,iBAAiBxC,EAAMoD,KAAM,CAAED,MAAM,GAClD,CAQDG,IAAItD,EAAO,GAAIiC,GACX,OAAOE,KAAKS,oBAAoB5C,EAAMiC,EACzC,CAQDsB,KAAKvD,EAAMwD,GACP,IAAKxD,EAAM,OAAO,EAClB,MAAMyD,EAAM,IAAIC,YAAY1D,EAAM,CAAE2D,OAAQH,IAC5C,OAAOrB,KAAKyB,cAAcH,EAC7B,CAEDI,KAAK7D,EAAMwD,GAAOrB,KAAKoB,KAAKvD,EAAMwD,EAAM,CACxCM,OAAO9D,EAAMiC,GAAWE,KAAKe,GAAGlD,EAAMiC,EAAU,CAChD8B,SAAS/D,EAAMiC,GAAWE,KAAKmB,IAAItD,EAAMiC,EAAU,CAOtD+B,KAAKhE,EAAO,IACL,IAAKA,EAAM,OAAOqD,EAAE,oBAC1B,MAAMR,EAAKV,KACX,OAAO,IAAI8B,SAAQ,CAACC,EAAGb,KACtBR,EAAGM,KAAKnD,GAAOqD,GAAMa,EAAEb,IAAG,GAE3B,CAODvD,eAAeuD,GACVzB,OAAMQ,EAAYiB,EAAG,mBAAmBA,EAAEc,iBAC1CvC,OAAMQ,EAAYiB,EAAG,oBAAoBA,EAAEe,iBAC/C,QAGMC,OAAOC,OAAO1C,MACjB,EC7HU,MAAM2C,QAETC,yBACV,MAAoC,oBAAtBC,mBACkB,oBAAxBC,mBACR,CAED5E,eAAe0D,GACd,OAAIA,aAAgB7C,WAAmB6C,EACnCA,aAAgBzC,YAAoB,IAAIJ,WAAW6C,GACnC,iBAATA,GAA2B,IAAImB,aAAcC,OAAOpB,GAC3DrC,MAAM0D,QAAQrB,GAAc,IAAI7C,WAAW6C,GACxCrB,KAAK2C,QAAQC,KAAKC,UAAUxB,GACnC,CAED1D,SAAe0D,EAAMyB,EAAQC,GAC5B,MAAMC,EAAYhD,KAAK2C,QAAQtB,GAC/B,GAAI0B,IAAe/C,KAAKiD,aAAaD,GAAY,OAAO3B,EACxD,MAAM6B,EAASJ,EAAOK,SAASC,YAG/B,OAFAF,EAAOG,MAAML,GACbE,EAAOI,QACA,IAAIC,SAAST,EAAOU,SAC3B,CAQD7F,gBAAgB0D,EAAMoC,EAAW,QAChC,MAAMX,EAAS,IAAIR,kBAAkBmB,GACrC,OAAOzD,MAAK8C,EAAQzB,EAAMyB,GAAQ,EAClC,CAQDnF,kBAAkB0D,EAAMoC,EAAW,QAClC,MAAMX,EAAS,IAAIP,oBAAoBkB,GACvC,OAAOzD,MAAK8C,EAAQzB,EAAMyB,GAAQ,EAClC,CAMDnF,oBAAoB0D,GACnB,MAAMX,EAAKV,KAEX,OADAqB,EAAOX,EAAGiC,QAAQtB,GACXX,EAAGgD,OAAOrC,IAASX,EAAGiD,OAAOtC,EACpC,CAWD1D,cAAc0D,GACb,OAAsB,KAAfA,EAAKuC,GAAG,IAA4B,MAAfvC,EAAKuC,GAAG,IAA6B,IAAfvC,EAAKuC,GAAG,EAC1D,CAUDjG,cAAc0D,GACb,OAAsB,MAAfA,EAAKuC,GAAG,IAAc,CAAC,EAAG,GAAI,IAAK,KAAKC,QAAQxC,EAAKuC,GAAG,KAAO,CACtE,CAEDjG,cAAc0D,GACb,MAAMX,EAAKV,KAEL8D,GADNzC,EAAuB,iBAATA,EAAoBA,EAAK0C,OAASrD,EAAGiC,QAAQtB,IACxCuC,GAAG,GAChBI,EAAO3C,EAAKuC,GAAGvC,EAAKjD,OAAS,GACnC,OAAOsC,GAAGuD,EAAaH,EAAOE,IAAStD,GAAGwD,EAAWJ,EAAOE,EAC5D,CAEDrG,SAAkBmG,EAAOE,GACxB,QAAkB,MAAVF,GAA2B,MAAVA,GAA6B,MAATE,GAAyB,MAATA,EAC7D,CAEDrG,SAAoBmG,EAAOE,GAC1B,QAAkB,MAAVF,GAA2B,KAAVA,GAA4B,MAATE,GAAyB,KAATA,EAC5D,ECxFa,MAAMG,SAEpBC,GAAW,EACXC,GAAU,KACVC,GAAU,KACVC,GAAe,KAEfC,GAAW,IAAIhC,YACfiC,GAAW,IAAIC,YAQfC,aAAaC,GACZ,MAAO,CAACA,EAAIC,WAAa,GAAID,EAAIE,QAAU,GAAIF,EAAIG,QAAU,IAAIxF,KAAK,GACtE,CASDyF,UAAUC,GACT,MAAMC,EAAQ,IAAI1G,WAAWyG,GAE7B,OADAE,OAAOC,gBAAgBF,GAChBA,CACP,CAMDG,uBAMC,OAAOF,OAAOG,OAAOC,YALR,CACZC,KAAM,UACNpH,OAAQ,MAG8B,EAD1B,CAAC,UAAW,WAEzB,CAODiH,mBAAmBI,GAClB,MAAM9G,QAAewG,OAAOG,OAAOI,UAAU,MAAOD,GACpD,OAAO,IAAIjH,WAAWG,EACtB,CAgBD0G,mBAAmBI,EAAK5H,EAAM8H,GAE7B,MAAMC,EAAYlI,OAAOqC,KAAK0F,EAAK,UAEnC,OAAON,OAAOG,OAAOO,UACpB,OACAD,EACA/H,GACA,EACA,CAAC8H,GAEF,CAcDN,aAAaI,EAAKK,EAAWjB,GAE5B,MACMkB,EAAerI,OAAOqC,KAAK+F,EAAW,UACtCE,EAFKhG,MAEawE,EAAS/B,OAAOoC,GASxC,OAAOM,OAAOG,OAAOW,OAPR,CACZT,KAAM,QACNU,KAAM,CACLV,KAAM,YAMPC,EACAM,EACAC,EAED,CAQDX,iBAAiBhE,GAEhB,MAAMX,EAAKV,KACX,IAAImG,EAAU9E,EAMd,MAJoB,iBAATA,IACV8E,EAAUzF,GAAG8D,EAAS/B,OAAOpB,IAGvB8D,OAAOG,OAAOc,QACpB,WACA1F,GAAG2D,EACH8B,EAED,CAKDd,wBAAwBI,EAAKY,EAAIhF,GAEhC,MAAM8E,EAAUnG,MAAKwE,EAAS/B,OAAOpB,GAC/BxD,EAAO,CACZ2H,KAAM,UACNc,QAASD,EACTjI,OAAQ,KAGT,OAAO+G,OAAOG,OAAOc,QAAQvI,EAAM4H,EAAKU,EACxC,CAKDd,wBAAwBI,EAAKY,EAAIhF,GAEhC,MAAMkF,EAAU7I,OAAOqC,KAAKsB,EAAM,OAG5BxD,EAAO,CACZ2H,KAAM,UACNc,QAJe5I,OAAOqC,KAAKsG,EAAI,OAK/BjI,OAAQ,KAGT,OAAO+G,OAAOG,OAAOkB,QAAQ3I,EAAM4H,EAAKc,EACxC,CAEGE,cAEH,OAAsB,OADXzG,MACDqE,GAAmC,OADlCrE,MACsBsE,CACjC,CAEUjC,yBACV,OAAwB,MAAjB8C,OAAOG,MACd,CAMDD,WAAWT,GAEV,MAAMlE,EAAKV,KAEX,IAAKmE,SAAS9B,YAEb,OAKD3B,GAAG0D,IAEH1D,GAAG2D,QAAgB3D,EAAGgG,aAAa9B,EAAIE,OAAQ,CAC9CU,KAAM,WACNU,KAAM,WACJ,WAEHxF,GAAG4D,QAAgB5D,EAAGiG,iBACtBjG,GAAG6D,QAAqB7D,EAAGkG,aAAalG,GAAG4D,GAE3C,MAAMuC,QAAenG,EAAGgG,aAAa9B,EAAIG,OAAQ,CAChDS,KAAM,QACNsB,WAAY,SACV,UAIH,UAFqBpG,EAAGuF,OAAOY,EAAQjC,EAAIkB,UAAWpF,EAAGiE,aAAaC,GAAO,CAAA,IAM5E,MAHAlE,GAAG2D,EAAU,KACb3D,GAAG4D,EAAU,KACb5D,GAAG6D,EAAe,KACZ,IAAIwC,MAAM,oBAKjB,CAOD1B,cAAchE,EAAM2F,GAEnB,MAAMtG,EAAKV,KACLqG,EAAK3F,EAAGsE,UAAU,IAClBS,EAAM,IAAIjH,WAAW6H,EAAGjI,OAASsC,GAAG6D,EAAanG,QAEvDqH,EAAIwB,IAAIZ,GACRZ,EAAIwB,IAAIvG,GAAG6D,EAAc8B,EAAGjI,QAE5B,MAAM8I,EAAuB,iBAAT7F,EAAqBA,EAAOuB,KAAKC,UAAUxB,GACzD8F,QAAqBzG,EAAG0G,WAAW3B,GACnC4B,QAAsB3G,EAAG4G,kBAAkB5G,GAAG4D,EAAS+B,EAAIa,GAEjE,OAAY,IAARF,EACI,CACNO,EAAG,IACHC,EAAGH,EACHI,EAAGN,GAIE,CACNI,EAAG,IACHC,EAAG9J,OAAOgK,GAAGL,EAAe,OAC5BI,EAAG/J,OAAOgK,GAAGP,EAAc,OAG5B,CAWD9B,cAAcT,GAEb,MAAMlE,EAAKV,KACLqG,EAAKzB,EAAIyB,GACThF,EAAOuD,EAAI4C,EAEXG,QAAgBjH,EAAGkH,kBAAkBlH,GAAG4D,EAAS+B,EAAIhF,GAErD6F,EAAMxG,GAAG+D,EAASoD,OAAOF,GACzBG,EAAMlF,KAAKmF,MAAMb,GAEvB,OAAIY,GAAmB,MAAZA,EAAIjK,MAA4B,SAAZiK,EAAIE,IAC3BF,EAAIzG,KAGLyG,CACP,CAEDnK,kBAAkBiH,GACjB,MAAMqD,EAAW,IAAI9D,SAErB,aADM8D,EAASC,KAAKtD,GACbqD,CACP,ECtSa,MAAME,cAAcC,IAElCC,GAAM,EACNC,GAAQ,EACRC,GAAO,EAOPC,cAAcC,GACb,MAAM/H,EAAKV,KACXU,GAAG6H,IACH7H,GAAG2H,IACHI,EAAIF,IAAM7H,GAAG6H,EAAKlJ,WAClBqB,EAAGuG,IAAIwB,EAAIF,IAAKE,EAChB,CAKDC,QACC,MAAMhI,EAAKV,KACPU,GAAG2H,EAAM,IAAM3H,GAAG4H,GAAS5H,GAAG2H,IACjC3H,GAAG2H,EAAM,EACT3H,GAAG4H,EAAQ,EACX5H,EAAGI,QAEJ,CAOD6H,QAAQb,GAEP,MAAMpH,EAAKV,KACL4I,EAAU,GAEhB,GAAI5J,MAAM0D,QAAQoF,GACjBA,EAAInH,SAASR,IACZ,MAAM0I,EAAMnI,EAAGoI,QAAQ3I,GACnB0I,GAAKE,OAAO1K,KAAKwK,EAAI,QAEpB,CACN,MAAM1I,EAAIO,EAAGoI,QAAQhB,GACjB3H,GAAGyI,EAAQvK,KAAK8B,EACpB,CAED,OAAOyI,CACP,CAQDE,QAAQhB,GAEP,MAAMpH,EAAKV,KACLuI,EAAMT,EAAIS,IAChB,IAAIK,EAAU,KAId,GAFAlI,GAAG4H,IAEC5H,EAAGsI,IAAIT,GAAM,CAChB,MAAME,EAAM/H,EAAGuI,IAAIV,GACnB,IACCE,EAAIS,OAAOpB,EAMX,CALC,MAAO5G,GAERuH,EAAIS,OAAOhI,EACf,CAAa,QACTR,EAAGE,OAAO2H,EACV,CACJ,MACGK,EAAUd,EAKX,OAFApH,EAAGgI,QAEIE,CACP,ECrFa,MAAMO,QAEjBC,GAAM,EACNC,GAAW,EACXC,GAEAC,YAAYF,EAAUC,GAClB,MAAM5I,EAAKV,KACXU,GAAG4I,EAAYA,EACf5I,GAAG2I,EAAWA,EACd3I,GAAGwH,GACN,CAEDe,IAAIO,EAAQC,EAAUC,GAClB,MAAMhJ,EAAKV,KACX,MAAiB,YAAbyJ,EAA+B/I,EAAG2I,QACrB,WAAbI,EAA8B/I,EAAG4I,SAASK,KAAKjJ,GAC5C8I,EAAOC,EACjB,CAEDH,SAASnJ,GACL,MAAMO,EAAKV,KACX,IAAIU,EAAG2I,QAEP,OADA3I,GAAGI,IACIJ,GAAG4I,EAAUnJ,EACvB,CAEGkJ,cACA,OAAyB,IAAlBrJ,MAAKqJ,CACf,CAEDvI,KAEmB,IADJd,MACJoJ,GACPQ,aAFW5J,MAEKoJ,EACnB,CAEDlB,KACI,MAAMxH,EAAKV,KACS,IAAhBU,GAAG2I,IACP3I,GAAG0I,EAAMS,YAAW,KAChBnJ,GAAG2I,GAAW,EACd3I,GAAG4I,EAAU,IAAIvC,MAAM,mBAAmB,GAC3CrG,GAAG2I,GACT,CAED1L,YAAY0D,EAAMgI,EAAUC,GACxB,OAAO,IAAIQ,MAAMzI,EAAM,IAAI8H,QAAQE,EAAUC,GAChD,EC3CU,MAAMS,kBAAkBtK,MAEtCuK,GAAS,CAAA,EACTZ,GAAM,KACNa,GAAO,EACPZ,GAAW,EAEXE,YAAYH,EAAK,EAAGC,EAAU,GAC7B7I,QACAR,MAAKoJ,EAAMA,EACXpJ,MAAKqJ,EAAWA,CAChB,CAKGa,UACH,OAAOlK,MAAKgK,CACZ,CAKDG,OAEC,MAAMzJ,EAAKV,KACXU,EAAGS,IAAI,QACPT,EAAGS,IAAI,OACPT,EAAGS,IAAI,OACPT,EAAGS,IAAI,SACPT,GAAG0J,GACH,CAEDC,GAASvC,EAAKsB,GACb,IAAK,IAAI3B,KAAKK,EAAK,CAClB,IAAIwC,EAAKxC,EAAIL,GACK,iBAAP6C,EACNtK,MAAKqK,EAASC,EAAIlB,KAAKtB,EAAIL,GAAK,MAC1B6C,EAAGC,OAASnB,IACtBtB,EAAIL,GAAK,KAEV,CACD,OAA4D,IAArDvF,OAAOsI,OAAO1C,GAAK5H,QAAOC,GAAU,MAALA,IAAW/B,MACjD,CAEDgM,KACC,MAAM1J,EAAKV,KACXU,GAAG2J,EAAS3J,GAAGsJ,EAAQtJ,GAAG0I,GAC1B1I,GAAGsJ,EAAS,EACZ,CASDS,MAAMtK,GAEL,MACMkB,EAAOlB,EAAIA,EAAE+J,KAAO/J,EAAI,KAI9B,OAFIkB,GAHOrB,MAGE0K,EAAUrJ,GAEhBA,CACP,CASDqJ,GAAU9F,GAET,MAAMlE,EAAKV,KAEPhB,MAAM0D,QAAQkC,GACjBA,EAAIjE,SAAQgK,GAAKjK,GAAGkK,EAAeD,KAEnCjK,GAAGkK,EAAehG,EAGnB,CAQDgG,GAAeV,GAEd,MAAMxJ,EAAKV,KACX,IAAI6K,EAAO,KACPC,EAAS,KAEbD,EAAOnK,GAAGqK,EAAgBb,EAAIc,WAEzBH,EAAKX,EAAIY,UACbD,EAAKX,EAAIY,QAAU,IAEpBA,EAASD,EAAKX,EAAIY,QAElBZ,EAAIe,SAAStK,SAAQgK,GAAKjK,GAAGwK,EAAahB,EAAIc,UAAWd,EAAIY,OAAQA,EAAQH,EAAGjK,GAAG0I,IAEnF,CAWD2B,GAAgBC,GAIf,IAAIG,EAAMC,WACNC,EAHOrL,MAGGgK,EAad,OAXAgB,EAAUM,MAAM,KAAKC,OAAMZ,IAErBQ,EAAIR,KAAIQ,EAAIR,GAAK,IACtBQ,EAAMA,EAAIR,GAELU,EAAKV,KAAIU,EAAKV,GAAKQ,GACxBE,EAAOF,GAEA,KAGDA,CACP,CAUDD,GAAaF,EAAWF,EAAQU,EAAUtB,EAAKd,GAE9C,MAAMqC,GAAsB,IAAhBvB,EAAI9D,QACVxB,EAAM,CACX8G,EAAGV,EACHW,EAAGb,EACHc,EAAG1B,EAAI1E,KACPqG,EAAG3B,EAAI4B,IACP5K,EAAGuK,EACHtN,EAAGiL,GAGJoC,EAAStB,EAAI1E,MAAQxF,MAAK+L,EAAOnH,GACjC4G,EAAStB,EAAI1E,MAAM+E,KAAOnB,CAE1B,CAOD2C,GAAOC,GAEN,MAAMtL,EAAKV,KACLiM,EAAOD,EAiCb,OA/BW,WAEV,MAAME,EAAOlN,MAAMC,UAAUK,MAAMH,KAAKgN,WAExC,GAAID,EAAK9N,QAAU6N,EAAKJ,EAAG,MAAM,IAAI9E,MAAM,uCAAuCkF,EAAKJ,MAEvF,MAAMpD,EAAM,CACXuC,UAAaiB,EAAKP,EAClBZ,OAAUmB,EAAKN,EACfS,OAAUH,EAAKL,EACfxC,GAAM6C,EAAK9N,EACX+C,EAAK+K,EAAK/K,EACVG,KAAQ6K,EACRzG,MAAU/E,GAAGuJ,EACb1B,IAAQ,EACR8D,GAAMC,KAAKC,OAIZ,OAFArK,OAAOsK,KAAK/D,GAEL,IAAI3G,SAAQ,CAAC2K,EAASC,KAC5B,IACC,MAAMC,EAAQxD,QAAQlI,KAAKwH,EAAK/H,GAAG2I,GAAWvB,IAC7CpH,GAAGkM,EAAY9E,EAAK2E,EAASC,EAAO,IAErChM,EAAGU,KAAK,OAAQuL,EAIhB,CAHC,MAAOzL,GAERwL,EAAOxL,EACP,IAEF,CAED,CAKD0L,GAAY9E,EAAK2E,EAASC,GAEzB,GAAI5E,aAAef,MAAO,OAAO2F,EAAO5E,GAExC,MAAM+E,EAAS/E,EAAI+E,QAAU/E,EAEzB+E,EAAOC,QACVL,EAAQI,GAERH,EAAOG,EAGR,CAQDlP,aAAaiH,EAAKwE,EAAIC,GACrB,MAAM0D,EAAY,IAAIhD,UAAUX,EAAIC,GAEpC,OADA0D,EAAUtC,MAAM7F,GACTmI,CACP,EC3Oa,MAAMC,sBAAsBvN,MAE1CwN,GAAS,IAAI9E,MACb+E,GAAa,KACbC,GAAU,KAKV9H,WAAW8H,GAEV,MAAMzM,EAAKV,KAIX,OAHAU,EAAGyJ,OACHzJ,GAAGyM,EAAUA,EAEN,IAAIrL,SAAQ,CAAC2K,EAASC,KAC5BhM,GAAG0M,EAAaX,EAASC,GAClB,OAGR,CAEGW,aACH,MAAM3M,EAAKV,KACX,OAAqB,MAAjBU,GAAGwM,GACAxM,GAAGwM,EAAWI,aAAe5M,GAAGwM,EAAWK,IAClD,CAKDpD,OACC,MAAMzJ,EAAKV,KACX,OAAqB,MAAjBU,GAAGwM,IACPxM,GAAGwM,EAAW5J,QACd5C,GAAGwM,EAAa,KAChBxM,GAAGyM,EAAU,MACN,EACP,CAODK,GAAY/E,GACX,MAAMgF,EAAUzO,MAAM0D,QAAQ+F,EAAIpH,OAASoH,EAAIpH,KAAKjD,OAAS,IAAe,IAAVqK,EAAIvH,EACtE,OAAOlB,MAAKmN,EAAQhJ,SAASsC,SAAWgH,CACxC,CAQDpI,QAAcoD,GAIb,MAAM/H,EAAKV,KACX,IAAI0N,EAAM,KAEV,IALAjF,EAAMA,EAAIjH,QAKF4H,KAAO1I,GAAGyM,EAAQ/D,GAAI,OAE9B,MAAMuE,EAAYjN,GAAG8M,EAAY/E,GAKjC,GAHA/H,GAAGuM,EAAOzE,cAAcC,GAGpBkF,EAAW,CACd,MAAMlC,QAAY/K,GAAGyM,EAAQhJ,SAASiC,QAAQqC,EAAIpH,MAC5CuM,EAAU1L,OAAO2L,OAAO,GAAInN,GAAGyM,EAAQW,QAAU,CAAA,EAAIrC,GAAO,CAAE,GACpEhD,EAAIpH,KAAO,CAACuM,EACZ,CAED,MAAMvM,EAAO,CACZ2G,IAAK2F,EAAY,MAAQ,OACzB9P,KAAM,KACNwD,KAAM,CAACoH,IAKR,GAFAiF,EAAM9K,KAAKC,UAAUxB,IAEhBe,QAAQC,YACZ,OAAO3B,GAAGwM,EAAWxL,KAAKgM,GAG3BA,QAAYtL,QAAQ2L,SAASL,GAAKM,cAClCtN,GAAGwM,EAAWxL,KAAKgM,EACnB,CAEDrI,QAAmBoH,EAASC,GAE3B,MAAMhM,EAAKV,KACLmN,EAASzM,GAAGyM,EACZJ,EAAYI,EAAOpD,UAEnBlF,EAAYyH,KAAKC,MACjB0B,EAAM,IAAIC,IAAIf,EAAOgB,YAEXjM,OAAO2L,OAAO,CAAA,EAAIV,EAAOiB,SAAW,CAAA,GACpD,MAAMN,EAAS5L,OAAO2L,OAAO,CAAE,EAAEV,EAAOW,QAAU,CAAA,GAClDA,EAAOO,EAAIxJ,EACXiJ,EAAOnC,EAAIvJ,QAAQC,YAEnBH,OAAOoM,QAAQR,GAAU,CAAE,GAAEnN,SAASgK,IACrCsD,EAAIM,aAAaC,OAAO7D,EAAE,GAAI8D,mBAAmB9D,EAAE,IAAI,IAGxDjK,GAAGwM,EAAa,IAAIwB,UAAUT,EAAI5O,WAAY,CAAC,UAC/CqB,GAAGwM,EAAWyB,WAAa,cAE3B,MAAMC,EAASlO,GAAGkO,EAAQjF,KAAKjJ,GAE/BA,GAAGwM,EAAW2B,OAAUC,IAKvB,GAHApO,EAAGU,KAAK,SAAU0N,GAClB/B,EAAUhM,GAAG,OAAQ6N,IAEhBzB,EAAO4B,QACX,OAAOtC,GAAQ,GAGhBM,EAAU/L,KAAK,OAAOqE,MAAOhE,IAE5B,IACCA,EAAKwD,UAAYA,QACXsI,EAAO6B,YAAY3N,GACzBoL,GAAQ,EAGR,CAFC,MAAOvL,GACRwL,EAAOxL,EACP,IAEA,EAIHR,GAAGwM,EAAW+B,QAAWH,IACxB/B,EAAU5L,IAAI,OAAQyN,GACtBlO,EAAGyJ,OACHzJ,EAAGU,KAAK,UAAW0N,EAAM,EAG1BpO,GAAGwM,EAAWgC,QAAWJ,IACxB/B,EAAU5L,IAAI,OAAQyN,GACtBlC,EAAOoC,GACPpO,EAAGyJ,OACHzJ,EAAGU,KAAK,QAAS0N,EAAM,EAGxBpO,GAAGwM,EAAWiC,UAAY9J,MAAOyJ,IAChC,IACKA,EAAMzN,gBAAgBzC,kBACnB8B,GAAG0O,EAAsBN,EAAMzN,YAE/BX,GAAG2O,EAAoBP,EAAMzN,KAIpC,CAFC,MAAMH,GACP6L,EAAU3L,KAAK,QAASF,EACxB,EAGF,CAEDmE,QAA4BsC,GAC3B,MAAMjH,EAAKV,KACX,GAAIoC,QAAQC,aAAeD,QAAQa,aAAa0E,GAAU,CACzD,MAAM2H,EAAOlN,QAAQW,WAAW4E,GAChCA,QAAgB2H,EAAKtB,aACrB,CAED,GADe5L,QAAQmN,OAAO5H,GAClB,CACX,MAAM6H,GAAO,IAAI9K,aAAcmD,OAAOF,GACtCjH,GAAG2O,EAAoBG,EAC1B,MACGzC,UAAU3L,KAAK,MAAOuG,EAEvB,CAQDtC,QAA0BsC,GAEzB,MAAMjH,EAAKV,KAEL+M,EADSrM,GAAGyM,EACOpD,UAEzB,IAGC,GAFe3H,QAAQmN,OAAO5H,GAElB,CACX,MAAMG,EAAMlF,KAAKmF,MAAMJ,GACvBjH,GAAG+O,EAAW3H,EAClB,MACIiF,EAAU3L,KAAK,MAAOuG,EAKvB,CAFC,MAAOzG,GACR6L,EAAU3L,KAAK,QAASF,EACxB,CAED,CAQDmE,QAAiByC,GAEhB,MAAMpH,EAAKV,KACX,IAAIqB,EAAO,KAEX,MAAM8L,EAASzM,GAAGyM,EACZJ,EAAYI,EAAOpD,UACnB9B,EAAWkF,EAAOhJ,SAExB,GAAgB,QAAZ2D,EAAIE,IACP,OAAO+E,EAAU3L,KAAK,MAAO0G,EAAIzG,MAGlC,GAAgB,QAAZyG,EAAIE,IACP,OAAO+E,EAAU3L,KAAK,QAAS0G,EAAI+E,QAGpC,GAAgB,QAAZ/E,EAAIE,IAAe,CACtB,IAAIC,EAASxB,QAGZ,OAAOsG,EAAU3L,KAAK,QAAS,IAAI2F,MAAM,yCAFzC1F,QAAa4G,EAASzB,QAAQsB,EAI/B,CAMD,GAJgB,SAAZA,EAAIE,MACP3G,EAAOyG,EAAIzG,MAGRA,EAAM,CACOX,GAAGuM,EAAOtE,QAAQtH,GAC1BV,SAASmH,GAAQpH,EAAGU,KAAK,UAAW0G,IAC/C,MACGpH,EAAGU,KAAK,UAAWC,EAGpB,EC/Pa,MAAMqO,WAEpBvC,GAAU,KAKV9H,WAAW8H,GAEV,MAAMzM,EAAKV,KAEPU,GAAGyM,GAASzM,EAAGyJ,OAEnBzJ,GAAGyM,EAAUA,EACb,MAAMJ,EAAYI,EAAOpD,UAEnB1I,QAAaX,GAAGiP,EAAQxC,EAAOyC,cAC/BzC,EAAO6B,YAAY3N,GAErB8L,EAAO0C,eAEX9C,EAAUhM,GAAG,OAAQL,GAAGoP,EAAWnG,KAAKjJ,GAExC,CAKDyJ,OAEC,MACMgD,EADKnN,MACOmN,EAIlB,GALWnN,MAERmN,EAAU,KAEbA,EAAOpD,UAAU5I,IAAI,SACjBgM,EAAO0C,cACX,IACCE,MAAM5C,EAAOgB,WAAY,CACxB/B,OAAQ,UAIT,CAFC,MAAOlL,GAER,CACD,CAMDmE,QAAiBoD,GAGhB,MAAM/H,EAAKV,KACX,IAAIG,EAAI,KAGR,IALAsI,EAAMA,EAAIjH,QAKF4H,KAAO1I,GAAGyM,EAAQ/D,GAE1B,IACCjJ,QAAUO,GAAGkO,EAAQlO,GAAGyM,EAAS1E,GACjCA,EAAIS,OAAO/I,EAGX,CAFC,MAAO6P,GACRvH,EAAIS,OAAO8G,EACX,CAED,CAQD3K,QAAc4I,GAEb,MACMgC,EAAUhC,EACVd,EAFKnN,MAEOmN,EACZ/D,EAAKkD,KAAKC,MAEV6B,EAAUlM,OAAO2L,OAAO,GAAIV,EAAOiB,SAAW,GAAI,CAAE,SAAUhF,IAE9DkG,QAAaS,MAAME,EAAS,CACjC7D,OAAQ,MACRgC,QAASA,EACT8B,YAAa,gBAGR7O,QAAaiO,EAAKa,OAKxB,OAFA9O,EAAKwD,UAAYuE,EAAG/J,WAEbgC,CAEP,CAKDgE,QAAiB4I,EAAK5M,GAErB,MACM8L,EADKnN,MACOmN,EACZiD,EAAO,mBACPC,EAAW,CAChBC,OAAUF,EACV,eAAgBA,EAChB,kBAAmB,mBAGdH,EAAU,IAAI/B,IAAID,GAClBG,EAAUlM,OAAO2L,OAAO,CAAA,EAAIV,EAAOiB,SAAW,GAAIiC,GAClDvC,EAAS5L,OAAO2L,OAAO,CAAE,EAAEV,EAAOW,QAAU,CAAA,GAC5CF,EAAU1L,OAAO2L,OAAO,CAAE,EAAEV,EAAOW,QAAU,CAAE,EAAEzM,GAAQ,CAAA,GAEzDoH,EAAM,CACX2D,OAAQ,OACRgC,QAASA,EACTmC,KAJY3N,KAAKC,UAAU+K,IAM5B1L,OAAOoM,QAAQR,GAAU,CAAE,GAAEnN,SAASgK,IACrCsF,EAAQ1B,aAAaC,OAAO7D,EAAE,GAAI8D,mBAAmB9D,EAAE,IAAI,IAE5D,MAAM9B,QAAYkH,MAAME,EAAQ5Q,WAAYoJ,GAG5C,aAFmBI,EAAIsH,MAGvB,CAYD9K,QAAc8H,EAAQ1E,GAErB,MACMR,EAAWkF,EAAOhJ,SAClB8J,EAAMd,EAAOgB,WAEbV,EAAUzO,MAAM0D,QAAQ+F,EAAIpH,OAASoH,EAAIpH,KAAKjD,OAAS,EAE7D,IAAIiD,EAAOoH,EAWX,GAZsBR,EAASxB,SAAWgH,IAKzCpM,QAAa4G,EAAS7B,QAAQqC,IAI/BpH,QAdWrB,MAcKwQ,EAAWvC,EAAK5M,GAGhB,OAAZA,EAAK2G,IACR,MAAM,IAAIjB,MAAM1F,EAAKwL,OAAOa,KAI7B,GAAiB,QAAbrM,EAAK2G,IAAe,CACvB,IAAIC,EAASxB,QAGZ,MAAM,IAAIM,MAAM,wCAFhB1F,QAAa4G,EAASzB,QAAQnF,EAI/B,CAGD,OAAOA,CAEP,ECnKa,MAAMoP,OAEpBlH,YAAY3E,GAIX,KAFAA,EAAMA,GAAO,IAEJsF,IACR,MAAM,IAAInD,MAbe,wBAgB1B,IAAKnC,EAAIqL,QACR,MAAM,IAAIlJ,MAhBe,4BAmB1B,MAAMrG,EAAKV,KAsBX,GApBAU,EAAGkE,IAAM,KACTlE,EAAGqO,SAAU,EACbrO,EAAGgQ,cAAe,EAClBhQ,EAAGmP,eAAgB,EAEnBnP,EAAGyD,SAAW,KACdzD,EAAGqJ,UAAY,KACfrJ,EAAGgP,WAAa,KAChBhP,EAAGsM,cAAgB,KACnBtM,EAAG0I,GAAKkD,KAAKC,MAEb7L,EAAGkE,IAAMA,EACTlE,EAAGqO,QAAUnK,EAAIsF,MAAQtF,EAAIqL,SAAoC,GAAzBrL,EAAIsF,IAAIrG,QAAQ,MAExDnD,EAAG0N,QAAUxJ,EAAIwJ,SAAW,CAAA,EAC5B1N,EAAGoN,OAASlJ,EAAIkJ,QAAU,CAAA,EAE1BpN,EAAGgQ,aAA+C,IAAhC9L,EAAIqL,QAAQpM,QAAQ,QACtCnD,EAAGmP,cAA8C,IAA9BjL,EAAIqL,QAAQpM,QAAQ,OAEO,KAAzCnD,EAAGgQ,cAAgBhQ,EAAGmP,eAC1B,MAAM,IAAI9I,MA5CS,+CA+CpB,CAKD1B,aAEC,MAAM3E,EAAKV,KACX,IAAIU,EAAGiQ,SAeP,OAbAjQ,EAAGyD,SAAW,IAAIA,SAClBzD,EAAGqJ,UAAY,IAAIA,UAAUrJ,EAAG0I,KAE5B1I,EAAGgQ,cAA8B,GAAdhQ,EAAGqO,WACzBrO,EAAGgP,WAAa,IAAIA,iBACdhP,EAAGgP,WAAWxH,KAAKxH,IAGtBA,EAAGmP,gBACNnP,EAAGsM,cAAgB,IAAIA,oBACjBtM,EAAGsM,cAAc9E,KAAKxH,IAGtBA,CACP,CAMD2E,kBAAkBhE,GAEjB,MAAMX,EAAKV,KAGPqB,EAAKyE,YACHpF,EAAGyD,UAAUwM,gBACXjQ,EAAGyD,SAAS+D,KAAK7G,IAIzBX,EAAGqJ,WAAWU,MAAMpJ,EAAK6I,IACzB,CAMDC,OAEC,MAAMzJ,EAAKV,KAEXU,EAAGgP,YAAYvF,OACfzJ,EAAGsM,eAAe7C,OAClBzJ,EAAGqJ,WAAWI,OAEdzJ,EAAGgP,WAAa,KAChBhP,EAAGsM,cAAgB,KACnBtM,EAAGqJ,UAAY,KACfrJ,EAAGyD,SAAW,KACdzD,EAAGkE,IAAM,IACT,CAKGsF,UACH,OAAOlK,KAAK+J,WAAWG,KAAO,IAC9B,CAKGyG,eACH,MAAMjQ,EAAKV,KACX,QAAIU,EAAGsM,gBAAkBtM,EAAGsM,cAAcK,YACnC3M,EAAGwJ,MAAOxJ,EAAGyD,SACpB,CAKGyL,aACH,OAAO5P,KAAK4E,KAAKsF,KAAO,IACxB,CAKGiE,iBACH,OAAOnO,KAAK4E,KAAKqL,SAAW,IAC5B,CAKDtS,kBAAkBiH,GAEjB,OADe,IAAI6L,OAAO7L,GACZsD,MACd,yIC5JFkD,WAAWwF,YAAcA"}