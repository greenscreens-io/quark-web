{"version":3,"file":"io.greenscreens.quark.all.js","mappings":"mBAOe,MAAM,oBAAcA,IAElC,GAAM,EACN,GAAQ,EACR,GAAO,EAOPC,cAAcC,EAAKC,GAClB,MAAMC,EAAKC,KACXD,GAAG,IACHA,GAAG,IACHF,EAAII,IAAMF,GAAG,EAAKG,WAClBH,EAAGI,IAAIN,EAAII,IAAKH,EACjB,CAKAM,QACC,MAAML,EAAKC,KACPD,GAAG,EAAM,IAAMA,GAAG,GAASA,GAAG,IACjCA,GAAG,EAAM,EACTA,GAAG,EAAQ,EAEb,CAOAM,QAAQC,GAEP,MAAMP,EAAKC,KACLO,EAAU,GAEhB,GAAIC,MAAMC,QAAQH,GACjBA,EAAII,SAASC,IACZ,MAAMC,EAAMb,EAAGc,QAAQF,GACnBC,GAAKE,OAAOC,KAAKH,EAAI,QAEpB,CACN,MAAMD,EAAIZ,EAAGc,QAAQP,GACjBK,GAAGJ,EAAQQ,KAAKJ,EACrB,CAEA,OAAOJ,CACR,CAQAM,QAAQP,GAEP,MAAMP,EAAKC,KACLC,EAAMK,EAAIL,IAChB,IAAIM,EAAU,KAId,GAFAR,GAAG,IAECA,EAAGiB,IAAIf,GACV,IACCF,EAAGkB,IAAIhB,EAAPF,CAAY,KAAMO,EAMnB,CALE,MAAOY,GACRC,QAAQC,IAAIF,GACZnB,EAAGkB,IAAIhB,EAAPF,CAAYmB,EAAG,KAChB,CAAE,QACDnB,EAAGsB,OAAOpB,EACX,MAEUK,EAKX,OAFAP,EAAGK,QAEIG,CACR,E","sources":["webpack://quark-engine/./src/core/queue.mjs"],"sourcesContent":["/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * Queue to handle requests\r\n */\r\nexport default class Queue extends Map {\r\n\r\n\t#up = 0;\r\n\t#down = 0;\r\n\t#tid = 0;\r\n\r\n\t/**\r\n\t * Update counters and queue to link resposnes to requests\r\n\t * @param {Object} req\r\n\t *      Request data\r\n\t */\r\n\tupdateRequest(req, callback) {\r\n\t\tconst me = this;\r\n\t\tme.#tid++;\r\n\t\tme.#up++;\r\n\t\treq.tid = me.#tid.toString();\r\n\t\tme.set(req.tid, callback);\r\n\t}\r\n\r\n\t/**\r\n\t * Reset queue to remove old stalled elements\r\n\t */\r\n\treset() {\r\n\t\tconst me = this;\r\n\t\tif (me.#up > 50 && me.#down >= me.#up) {\r\n\t\t\tme.#up = 0;\r\n\t\t\tme.#down = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Process array of response records\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\tprocess(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst unknown = [];\r\n\r\n\t\tif (Array.isArray(obj)) {\r\n\t\t\tobj.forEach((o) => {\r\n\t\t\t\tconst res = me.execute(o);\r\n\t\t\t\tif (res) unkown.push(res);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconst o = me.execute(obj);\r\n\t\t\tif (o) unknown.push(o);\r\n\t\t}\r\n\r\n\t\treturn unknown;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Process single response record\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\texecute(obj) {\r\n\r\n\t\tconst me = this;\r\n\t\tconst tid = obj.tid;\r\n\t\tlet unknown = null;\r\n\r\n\t\tme.#down++;\r\n\r\n\t\tif (me.has(tid)) {\r\n\t\t\ttry {\r\n\t\t\t\tme.get(tid)(null, obj);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log(e);\r\n\t\t\t\tme.get(tid)(e, null);\r\n\t\t\t} finally {\r\n\t\t\t\tme.delete(tid);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tunknown = obj;\r\n\t\t}\r\n\r\n\t\tme.reset();\r\n\r\n\t\treturn unknown;\r\n\t}\r\n}\r\n"],"names":["Map","updateRequest","req","callback","me","this","tid","toString","set","reset","process","obj","unknown","Array","isArray","forEach","o","res","execute","unkown","push","has","get","e","console","log","delete"],"sourceRoot":""}